// Generated by gramex V3.0 from LAYOUT* 'csharp language specification v1.2.raw' LAYOUT* (this build Mar 25 2012 at 13:21:48)
// Command line: C:\csle\dev\gramex\gramex.exe -d -s csharp language specification v1.2.raw
Csharp()(compilation_unit)

// Grammar
// This appendix contains summaries of the lexical and syntactic grammars found in the main document, and of the grammar extensions for unsafe code. Grammar productions appear here in the same order that they appear in the main document.
// A.2 Syntactic grammar
// A.2.1 Basic concepts

// Temporary until proper whitespace handling implemented
LAYOUT ::= 'whitespace' | 'comment' | 'new_line' ;

namespace_name                      ::= namespace_or_type_name ;

type_name                           ::= namespace_or_type_name ; 

namespace_or_type_name              ::= LAYOUT* 'identifier' LAYOUT* |
                                     namespace_or_type_name LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* ; // A.2.2 Types


type                                ::= value_type |
                                     reference_type ; 

value_type                          ::= struct_type |
                                     enum_type ; 

struct_type                         ::= type_name |
                                     simple_type ; 

simple_type                         ::= numeric_type |
                                     LAYOUT* 'bool' LAYOUT* ; 

numeric_type                        ::= integral_type |
                                     floating_point_type |
                                     LAYOUT* 'decimal' LAYOUT* ; 

integral_type                       ::= LAYOUT* 'sbyte' LAYOUT* |
                                     LAYOUT* 'byte' LAYOUT* |
                                     LAYOUT* 'short' LAYOUT* |
                                     LAYOUT* 'ushort' LAYOUT* |
                                     LAYOUT* 'int' LAYOUT* |
                                     LAYOUT* 'uint' LAYOUT* |
                                     LAYOUT* 'long' LAYOUT* |
                                     LAYOUT* 'ulong' LAYOUT* |
                                     LAYOUT* 'char' LAYOUT* ; 

floating_point_type                 ::= LAYOUT* 'float' LAYOUT* |
                                     LAYOUT* 'double' LAYOUT* ; 

enum_type                           ::= type_name ; 

reference_type                      ::= class_type |
                                     interface_type |
                                     array_type |
                                     delegate_type ; 

class_type                          ::= type_name |
                                     LAYOUT* 'object' LAYOUT* |
                                     LAYOUT* 'string' LAYOUT* ; 

interface_type                      ::= type_name ; 

delegate_type                       ::= type_name ; // A.2.3 Variables


variable_reference                  ::= expression ; // A.2.4 Expressions


argument_list                       ::= argument |
                                     argument_list LAYOUT* 'comma' LAYOUT* argument ; 

argument                            ::= expression |
                                     LAYOUT* 'ref' LAYOUT* variable_reference |
                                     LAYOUT* 'out' LAYOUT* variable_reference ; 

primary_expression                  ::= primary_no_array_creation_expression |
                                     array_creation_expression ; 

primary_no_array_creation_expression::= literal |
                                     simple_name |
                                     parenthesized_expression |
                                     member_access |
                                     invocation_expression |
                                     element_access |
                                     this_access |
                                     base_access |
                                     post_increment_expression |
                                     post_decrement_expression |
                                     object_creation_expression |
                                     delegate_creation_expression |
                                     typeof_expression |
                                     checked_expression |
                                     unchecked_expression ; 

simple_name                         ::= LAYOUT* 'identifier' LAYOUT* ; 

parenthesized_expression            ::= LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* ; 

member_access                       ::= primary_expression LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* |
                                     predefined_type LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* ; 

predefined_type                     ::= LAYOUT* 'bool' LAYOUT* |
                                     LAYOUT* 'byte' LAYOUT* |
                                     LAYOUT* 'char' LAYOUT* |
                                     LAYOUT* 'decimal' LAYOUT* |
                                     LAYOUT* 'double' LAYOUT* |
                                     LAYOUT* 'float' LAYOUT* |
                                     LAYOUT* 'int' LAYOUT* |
                                     LAYOUT* 'long' LAYOUT* |
                                     LAYOUT* 'object' LAYOUT* |
                                     LAYOUT* 'sbyte' LAYOUT* |
                                     LAYOUT* 'short' LAYOUT* |
                                     LAYOUT* 'string' LAYOUT* |
                                     LAYOUT* 'uint' LAYOUT* |
                                     LAYOUT* 'ulong' LAYOUT* |
                                     LAYOUT* 'ushort' LAYOUT* ; 

invocation_expression               ::= primary_expression LAYOUT* 'lparen' LAYOUT* argument_list? LAYOUT* 'rparen' LAYOUT* ; 

element_access                      ::= primary_no_array_creation_expression LAYOUT* 'lbracket' LAYOUT* expression_list LAYOUT* 'rbracket' LAYOUT* ; 

expression_list                     ::= expression |
                                     expression_list LAYOUT* 'comma' LAYOUT* expression ; 

this_access                         ::= LAYOUT* 'this' LAYOUT* ; 

base_access                         ::= LAYOUT* 'base' LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* |
                                     LAYOUT* 'base' LAYOUT* 'lbracket' LAYOUT* expression_list LAYOUT* 'rbracket' LAYOUT* ; 

post_increment_expression           ::= primary_expression LAYOUT* 'increment' LAYOUT* ; 

post_decrement_expression           ::= primary_expression LAYOUT* 'decrement' LAYOUT* ; 

object_creation_expression          ::= LAYOUT* 'new' LAYOUT* type LAYOUT* 'lparen' LAYOUT* argument_list? LAYOUT* 'rparen' LAYOUT* ; 

array_creation_expression           ::= LAYOUT* 'new' LAYOUT* non_array_type LAYOUT* 'lbracket' LAYOUT* expression_list LAYOUT* 'rbracket' LAYOUT* rank_specifiers? array_initializer? |
                                     LAYOUT* 'new' LAYOUT* array_type array_initializer ; 

delegate_creation_expression        ::= LAYOUT* 'new' LAYOUT* delegate_type LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* ; 

typeof_expression                   ::= LAYOUT* 'typeof' LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'rparen' LAYOUT* |
                                     LAYOUT* 'typeof' LAYOUT* 'lparen' LAYOUT* 'void' LAYOUT* 'rparen' LAYOUT* ; 

checked_expression                  ::= LAYOUT* 'checked' LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* ; 

unchecked_expression                ::= LAYOUT* 'unchecked' LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* ; 

unary_expression                    ::= primary_expression |
                                     LAYOUT* 'add_op' LAYOUT* unary_expression |
                                     LAYOUT* 'sub_op' LAYOUT* unary_expression |
                                     LAYOUT* 'not_op' LAYOUT* unary_expression |
                                     LAYOUT* 'tilde' LAYOUT* unary_expression |
                                     pre_increment_expression |
                                     pre_decrement_expression |
                                     cast_expression ; 

pre_increment_expression            ::= LAYOUT* 'increment' LAYOUT* unary_expression ; 

pre_decrement_expression            ::= LAYOUT* 'decrement' LAYOUT* unary_expression ; 

cast_expression                     ::= LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'rparen' LAYOUT* unary_expression ; 

multiplicative_expression           ::= unary_expression |
                                     multiplicative_expression LAYOUT* 'mul_op' LAYOUT* unary_expression |
                                     multiplicative_expression LAYOUT* 'div_op' LAYOUT* unary_expression |
                                     multiplicative_expression LAYOUT* 'mod_op' LAYOUT* unary_expression ; 

additive_expression                 ::= multiplicative_expression |
                                     additive_expression LAYOUT* 'add_op' LAYOUT* multiplicative_expression |
                                     additive_expression LAYOUT* 'sub_op' LAYOUT* multiplicative_expression ; 

shift_expression                    ::= additive_expression |
                                     shift_expression LAYOUT* 'lshift_op' LAYOUT* additive_expression |
                                     shift_expression LAYOUT* 'rshift_op' LAYOUT* additive_expression ; 

relational_expression               ::= shift_expression |
                                     relational_expression LAYOUT* 'lessthan_op' LAYOUT* shift_expression |
                                     relational_expression LAYOUT* 'greaterthan_op' LAYOUT* shift_expression |
                                     relational_expression LAYOUT* 'lessthaneq_op' LAYOUT* shift_expression |
                                     relational_expression LAYOUT* 'greaterthaneq_op' LAYOUT* shift_expression |
                                     relational_expression LAYOUT* 'is' LAYOUT* type |
                                     relational_expression LAYOUT* 'as' LAYOUT* type ; 

equality_expression                 ::= relational_expression |
                                     equality_expression LAYOUT* 'equality_op' LAYOUT* relational_expression |
                                     equality_expression LAYOUT* 'nequality_op' LAYOUT* relational_expression ; 

and_expression                      ::= equality_expression |
                                     and_expression LAYOUT* '&' LAYOUT* equality_expression ; 

exclusive_or_expression             ::= and_expression |
                                     exclusive_or_expression LAYOUT* 'xor_op' LAYOUT* and_expression ; 

inclusive_or_expression             ::= exclusive_or_expression |
                                     inclusive_or_expression LAYOUT* 'or_op' LAYOUT* exclusive_or_expression ; 

conditional_and_expression          ::= inclusive_or_expression |
                                     conditional_and_expression LAYOUT* 'condand_op' LAYOUT* inclusive_or_expression ; 

conditional_or_expression           ::= conditional_and_expression |
                                     conditional_or_expression LAYOUT* 'condor_op' LAYOUT* conditional_and_expression ; 

conditional_expression              ::= conditional_or_expression |
                                     conditional_or_expression LAYOUT* 'question' LAYOUT* expression LAYOUT* 'colon' LAYOUT* expression ; 

assignment                          ::= unary_expression assignment_operator expression ; 

assignment_operator                 ::= LAYOUT* 'dirassign' LAYOUT* |
                                     LAYOUT* 'addassign' LAYOUT* |
                                     LAYOUT* 'subassign' LAYOUT* |
                                     LAYOUT* 'mulassign' LAYOUT* |
                                     LAYOUT* 'divassign' LAYOUT* |
                                     LAYOUT* 'modassign' LAYOUT* |
                                     LAYOUT* 'andassign' LAYOUT* |
                                     LAYOUT* 'orassign' LAYOUT* |
                                     LAYOUT* 'xorassign' LAYOUT* |
                                     LAYOUT* 'lshiftassign' LAYOUT* |
                                     LAYOUT* 'rshiftassign' LAYOUT* ; 

expression                          ::= conditional_expression |
                                     assignment ; 

constant_expression                 ::= expression ; 

boolean_expression                  ::= expression ; // A.2.5 Statements


statement                           ::= labeled_statement |
                                     declaration_statement |
                                     embedded_statement ; 

embedded_statement                  ::= block |
                                     empty_statement |
                                     expression_statement |
                                     selection_statement |
                                     iteration_statement |
                                     jump_statement |
                                     try_statement |
                                     checked_statement |
                                     unchecked_statement |
                                     lock_statement |
                                     using_statement ; 

block                               ::= LAYOUT* 'lbrace' LAYOUT* statement_list? LAYOUT* 'rbrace' LAYOUT* ; 

statement_list                      ::= statement |
                                     statement_list statement ; 

empty_statement                     ::= LAYOUT* 'semicolon' LAYOUT* ; 

labeled_statement                   ::= LAYOUT* 'identifier' LAYOUT* 'colon' LAYOUT* statement ; 

declaration_statement               ::= local_variable_declaration LAYOUT* 'semicolon' LAYOUT* |
                                     local_constant_declaration LAYOUT* 'semicolon' LAYOUT* ; 

local_variable_declaration          ::= type local_variable_declarators ; 

local_variable_declarators          ::= local_variable_declarator |
                                     local_variable_declarators LAYOUT* 'comma' LAYOUT* local_variable_declarator ; 

local_variable_declarator           ::= LAYOUT* 'identifier' LAYOUT* |
                                     LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* local_variable_initializer ; 

local_variable_initializer          ::= expression |
                                     array_initializer ; 

local_constant_declaration          ::= LAYOUT* 'const' LAYOUT* type constant_declarators ; 

constant_declarators                ::= constant_declarator |
                                     constant_declarators LAYOUT* 'comma' LAYOUT* constant_declarator ; 

constant_declarator                 ::= LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* constant_expression ; 

expression_statement                ::= statement_expression LAYOUT* 'semicolon' LAYOUT* ; 

statement_expression                ::= invocation_expression |
                                     object_creation_expression |
                                     assignment |
                                     post_increment_expression |
                                     post_decrement_expression |
                                     pre_increment_expression |
                                     pre_decrement_expression ; 

selection_statement                 ::= if_statement |
                                     switch_statement ; 

if_statement                        ::= LAYOUT* 'if' LAYOUT* 'lparen' LAYOUT* boolean_expression LAYOUT* 'rparen' LAYOUT* embedded_statement |
                                     LAYOUT* 'if' LAYOUT* 'lparen' LAYOUT* boolean_expression LAYOUT* 'rparen' LAYOUT* embedded_statement LAYOUT* 'else' LAYOUT* embedded_statement ; 

switch_statement                    ::= LAYOUT* 'switch' LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* switch_block ; 

switch_block                        ::= LAYOUT* 'lbrace' LAYOUT* switch_sections? LAYOUT* 'rbrace' LAYOUT* ; 

switch_sections                     ::= switch_section |
                                     switch_sections switch_section ; 

switch_section                      ::= switch_labels statement_list ; 

switch_labels                       ::= switch_label |
                                     switch_labels switch_label ; 

switch_label                        ::= LAYOUT* 'case' LAYOUT* constant_expression LAYOUT* 'colon' LAYOUT* |
                                     LAYOUT* 'default' LAYOUT* 'colon' LAYOUT* ; 

iteration_statement                 ::= while_statement |
                                     do_statement |
                                     for_statement |
                                     foreach_statement ; 

while_statement                     ::= LAYOUT* 'while' LAYOUT* 'lparen' LAYOUT* boolean_expression LAYOUT* 'rparen' LAYOUT* embedded_statement ; 

do_statement                        ::= LAYOUT* 'do' LAYOUT* embedded_statement LAYOUT* 'while' LAYOUT* 'lparen' LAYOUT* boolean_expression LAYOUT* 'rparen' LAYOUT* 'semicolon' LAYOUT* ; 

for_statement                       ::= LAYOUT* 'for' LAYOUT* 'lparen' LAYOUT* for_initializer? LAYOUT* 'semicolon' LAYOUT* for_condition? LAYOUT* 'semicolon' LAYOUT* for_iterator? LAYOUT* 'rparen' LAYOUT* embedded_statement ; 

for_initializer                     ::= local_variable_declaration |
                                     statement_expression_list ; 

for_condition                       ::= boolean_expression ; 

for_iterator                        ::= statement_expression_list ; 

statement_expression_list           ::= statement_expression |
                                     statement_expression_list LAYOUT* 'comma' LAYOUT* statement_expression ; 

foreach_statement                   ::= LAYOUT* 'foreach' LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'in' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* embedded_statement ; 

jump_statement                      ::= break_statement |
                                     continue_statement |
                                     goto_statement |
                                     return_statement |
                                     throw_statement ; 

break_statement                     ::= LAYOUT* 'break' LAYOUT* 'semicolon' LAYOUT* ; 

continue_statement                  ::= LAYOUT* 'continue' LAYOUT* 'semicolon' LAYOUT* ; 

goto_statement                      ::= LAYOUT* 'goto' LAYOUT* 'identifier' LAYOUT* 'semicolon' LAYOUT* |
                                     LAYOUT* 'goto' LAYOUT* 'case' LAYOUT* constant_expression LAYOUT* 'semicolon' LAYOUT* |
                                     LAYOUT* 'goto' LAYOUT* 'default' LAYOUT* 'semicolon' LAYOUT* ; 

return_statement                    ::= LAYOUT* 'return' LAYOUT* expression? LAYOUT* 'semicolon' LAYOUT* ; 

throw_statement                     ::= LAYOUT* 'throw' LAYOUT* expression? LAYOUT* 'semicolon' LAYOUT* ; 

try_statement                       ::= LAYOUT* 'try' LAYOUT* block catch_clauses |
                                     LAYOUT* 'try' LAYOUT* block finally_clause |
                                     LAYOUT* 'try' LAYOUT* block catch_clauses finally_clause ; 

catch_clauses                       ::= specific_catch_clauses general_catch_clause? |
                                     specific_catch_clauses? general_catch_clause ; 

specific_catch_clauses              ::= specific_catch_clause |
                                     specific_catch_clauses specific_catch_clause ; 

specific_catch_clause               ::= LAYOUT* 'catch' LAYOUT* 'lparen' LAYOUT* class_type LAYOUT* 'identifier'? LAYOUT* 'rparen' LAYOUT* block ; 

general_catch_clause                ::= LAYOUT* 'catch' LAYOUT* block ; 

finally_clause                      ::= LAYOUT* 'finally' LAYOUT* block ; 

checked_statement                   ::= LAYOUT* 'checked' LAYOUT* block ; 

unchecked_statement                 ::= LAYOUT* 'unchecked' LAYOUT* block ; 

lock_statement                      ::= LAYOUT* 'lock' LAYOUT* 'lparen' LAYOUT* expression LAYOUT* 'rparen' LAYOUT* embedded_statement ; 

using_statement                     ::= LAYOUT* 'using' LAYOUT* 'lparen' LAYOUT* resource_acquisition LAYOUT* 'rparen' LAYOUT* embedded_statement ; 

resource_acquisition                ::= local_variable_declaration |
                                     expression ; // A.2.6 Namespaces


compilation_unit                    ::= using_directives? global_attributes? namespace_member_declarations? ; 

namespace_declaration               ::= LAYOUT* 'namespace' LAYOUT* qualified_identifier namespace_body LAYOUT* 'semicolon'? ; 

qualified_identifier                ::= LAYOUT* 'identifier' LAYOUT* |
                                     qualified_identifier LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* ; 

namespace_body                      ::= LAYOUT* 'lbrace' LAYOUT* using_directives? namespace_member_declarations? LAYOUT* 'rbrace' LAYOUT* ; 

using_directives                    ::= using_directive |
                                     using_directives using_directive ; 

using_directive                     ::= using_alias_directive |
                                     using_namespace_directive ; 

using_alias_directive               ::= LAYOUT* 'using' LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* namespace_or_type_name LAYOUT* 'semicolon' LAYOUT* ; 

using_namespace_directive           ::= LAYOUT* 'using' LAYOUT* namespace_name LAYOUT* 'semicolon' LAYOUT* ; 

namespace_member_declarations       ::= namespace_member_declaration |
                                     namespace_member_declarations namespace_member_declaration ; 

namespace_member_declaration        ::= namespace_declaration |
                                     type_declaration ; 

type_declaration                    ::= class_declaration |
                                     struct_declaration |
                                     interface_declaration |
                                     enum_declaration |
                                     delegate_declaration ; // A.2.7 Classes


class_declaration                   ::= attributes? class_modifiers? LAYOUT* 'class' LAYOUT* 'identifier' LAYOUT* class_base? class_body LAYOUT* 'semicolon'? ; 

class_modifiers                     ::= class_modifier |
                                     class_modifiers class_modifier ; 

class_modifier                      ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'abstract' LAYOUT* |
                                     LAYOUT* 'sealed' LAYOUT* ; 

class_base                          ::= LAYOUT* 'colon' LAYOUT* class_type |
                                     LAYOUT* 'colon' LAYOUT* interface_type_list |
                                     LAYOUT* 'colon' LAYOUT* class_type LAYOUT* 'comma' LAYOUT* interface_type_list ; 

interface_type_list                 ::= interface_type |
                                     interface_type_list LAYOUT* 'comma' LAYOUT* interface_type ; 

class_body                          ::= LAYOUT* 'lbrace' LAYOUT* class_member_declarations? LAYOUT* 'rbrace' LAYOUT* ; 

class_member_declarations           ::= class_member_declaration |
                                     class_member_declarations class_member_declaration ; 

class_member_declaration            ::= constant_declaration |
                                     field_declaration |
                                     method_declaration |
                                     property_declaration |
                                     event_declaration |
                                     indexer_declaration |
                                     operator_declaration |
                                     constructor_declaration |
                                     destructor_declaration |
                                     static_constructor_declaration |
                                     type_declaration ; 

constant_declaration                ::= attributes? constant_modifiers? LAYOUT* 'const' LAYOUT* type constant_declarators LAYOUT* 'semicolon' LAYOUT* ; 

constant_modifiers                  ::= constant_modifier |
                                     constant_modifiers constant_modifier ; 

constant_modifier                   ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* ; 

field_declaration                   ::= attributes? field_modifiers? type variable_declarators LAYOUT* 'semicolon' LAYOUT* ; 

field_modifiers                     ::= field_modifier |
                                     field_modifiers field_modifier ; 

field_modifier                      ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'readonly' LAYOUT* |
                                     LAYOUT* 'volatile' LAYOUT* ; 

variable_declarators                ::= variable_declarator |
                                     variable_declarators LAYOUT* 'comma' LAYOUT* variable_declarator ; 

variable_declarator                 ::= LAYOUT* 'identifier' LAYOUT* |
                                     LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* variable_initializer ; 

variable_initializer                ::= expression |
                                     array_initializer ; 

method_declaration                  ::= method_header method_body ; 

method_header                       ::= attributes? method_modifiers? return_type member_name LAYOUT* 'lparen' LAYOUT* formal_parameter_list? LAYOUT* 'rparen' LAYOUT* ; 

method_modifiers                    ::= method_modifier |
                                     method_modifiers method_modifier ; 

method_modifier                     ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'virtual' LAYOUT* |
                                     LAYOUT* 'sealed' LAYOUT* |
                                     LAYOUT* 'override' LAYOUT* |
                                     LAYOUT* 'abstract' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

return_type                         ::= type |
                                     LAYOUT* 'void' LAYOUT* ; 

member_name                         ::= LAYOUT* 'identifier' LAYOUT* |
                                     interface_type LAYOUT* 'dot' LAYOUT* 'identifier' LAYOUT* ; 

method_body                         ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; 

formal_parameter_list               ::= fixed_parameters |
                                     fixed_parameters LAYOUT* 'comma' LAYOUT* parameter_array |
                                     parameter_array ; 

fixed_parameters                    ::= fixed_parameter |
                                     fixed_parameters LAYOUT* 'comma' LAYOUT* fixed_parameter ; 

fixed_parameter                     ::= attributes? parameter_modifier? type LAYOUT* 'identifier' LAYOUT* ; 

parameter_modifier                  ::= LAYOUT* 'ref' LAYOUT* |
                                     LAYOUT* 'out' LAYOUT* ; 

parameter_array                     ::= attributes? LAYOUT* 'params' LAYOUT* array_type LAYOUT* 'identifier' LAYOUT* ; 

property_declaration                ::= attributes? property_modifiers? type member_name LAYOUT* 'lbrace' LAYOUT* accessor_declarations LAYOUT* 'rbrace' LAYOUT* ; 

property_modifiers                  ::= property_modifier |
                                     property_modifiers property_modifier ; 

property_modifier                   ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'virtual' LAYOUT* |
                                     LAYOUT* 'sealed' LAYOUT* |
                                     LAYOUT* 'override' LAYOUT* |
                                     LAYOUT* 'abstract' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

accessor_declarations               ::= get_accessor_declaration set_accessor_declaration? |
                                     set_accessor_declaration get_accessor_declaration? ; 

get_accessor_declaration            ::= attributes? LAYOUT* 'get' LAYOUT* accessor_body ; 

set_accessor_declaration            ::= attributes? LAYOUT* 'set' LAYOUT* accessor_body ; 

accessor_body                       ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; 

event_declaration                   ::= attributes? event_modifiers? LAYOUT* 'event' LAYOUT* type variable_declarators LAYOUT* 'semicolon' LAYOUT* |
                                     attributes? event_modifiers? LAYOUT* 'event' LAYOUT* type member_name LAYOUT* 'lbrace' LAYOUT* event_accessor_declarations LAYOUT* 'rbrace' LAYOUT* ; 

event_modifiers                     ::= event_modifier |
                                     event_modifiers event_modifier ; 

event_modifier                      ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'virtual' LAYOUT* |
                                     LAYOUT* 'sealed' LAYOUT* |
                                     LAYOUT* 'override' LAYOUT* |
                                     LAYOUT* 'abstract' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

event_accessor_declarations         ::= add_accessor_declaration remove_accessor_declaration |
                                     remove_accessor_declaration add_accessor_declaration ; 

add_accessor_declaration            ::= attributes? LAYOUT* 'add' LAYOUT* block ; 

remove_accessor_declaration         ::= attributes? LAYOUT* 'remove' LAYOUT* block ; 

indexer_declaration                 ::= attributes? indexer_modifiers? indexer_declarator LAYOUT* 'lbrace' LAYOUT* accessor_declarations LAYOUT* 'rbrace' LAYOUT* ; 

indexer_modifiers                   ::= indexer_modifier |
                                     indexer_modifiers indexer_modifier ; 

indexer_modifier                    ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'virtual' LAYOUT* |
                                     LAYOUT* 'sealed' LAYOUT* |
                                     LAYOUT* 'override' LAYOUT* |
                                     LAYOUT* 'abstract' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

indexer_declarator                  ::= type LAYOUT* 'this' LAYOUT* 'lbracket' LAYOUT* formal_parameter_list LAYOUT* 'rbracket' LAYOUT* |
                                     type interface_type LAYOUT* 'dot' LAYOUT* 'this' LAYOUT* 'lbracket' LAYOUT* formal_parameter_list LAYOUT* 'rbracket' LAYOUT* ; 

operator_declaration                ::= attributes? operator_modifiers operator_declarator operator_body ; 

operator_modifiers                  ::= operator_modifier |
                                     operator_modifiers operator_modifier ; 

operator_modifier                   ::= LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

operator_declarator                 ::= unary_operator_declarator |
                                     binary_operator_declarator |
                                     conversion_operator_declarator ; 

unary_operator_declarator           ::= type LAYOUT* 'operator' LAYOUT* overloadable_unary_operator LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'rparen' LAYOUT* ; 

overloadable_unary_operator         ::= LAYOUT* 'add_op' LAYOUT* |
                                     LAYOUT* 'sub_op' LAYOUT* |
                                     LAYOUT* 'not_op' LAYOUT* |
                                     LAYOUT* 'tilde' LAYOUT* |
                                     LAYOUT* 'increment' LAYOUT* |
                                     LAYOUT* 'decrement' LAYOUT* |
                                     LAYOUT* 'true' LAYOUT* |
                                     LAYOUT* 'false' LAYOUT* ; 

binary_operator_declarator          ::= type LAYOUT* 'operator' LAYOUT* overloadable_binary_operator LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'comma' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'rparen' LAYOUT* ; 

overloadable_binary_operator        ::= LAYOUT* 'add_op' LAYOUT* |
                                     LAYOUT* 'sub_op' LAYOUT* |
                                     LAYOUT* 'mul_op' LAYOUT* |
                                     LAYOUT* 'div_op' LAYOUT* |
                                     LAYOUT* 'mod_op' LAYOUT* |
                                     LAYOUT* '&' LAYOUT* |
                                     LAYOUT* 'or_op' LAYOUT* |
                                     LAYOUT* 'xor_op' LAYOUT* |
                                     LAYOUT* 'lshift_op' LAYOUT* |
                                     LAYOUT* 'rshift_op' LAYOUT* |
                                     LAYOUT* 'equality_op' LAYOUT* |
                                     LAYOUT* 'nequality_op' LAYOUT* |
                                     LAYOUT* 'greaterthan_op' LAYOUT* |
                                     LAYOUT* 'lessthan_op' LAYOUT* |
                                     LAYOUT* 'greaterthaneq_op' LAYOUT* |
                                     LAYOUT* 'lessthaneq_op' LAYOUT* ; 

conversion_operator_declarator      ::= LAYOUT* 'implicit' LAYOUT* 'operator' LAYOUT* type LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'rparen' LAYOUT* |
                                     LAYOUT* 'explicit' LAYOUT* 'operator' LAYOUT* type LAYOUT* 'lparen' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'rparen' LAYOUT* ; 

operator_body                       ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; 

constructor_declaration             ::= attributes? constructor_modifiers? constructor_declarator constructor_body ; 

constructor_modifiers               ::= constructor_modifier |
                                     constructor_modifiers constructor_modifier ; 

constructor_modifier                ::= LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* |
                                     LAYOUT* 'extern' LAYOUT* ; 

constructor_declarator              ::= LAYOUT* 'identifier' LAYOUT* 'lparen' LAYOUT* formal_parameter_list? LAYOUT* 'rparen' LAYOUT* constructor_initializer? ; 

constructor_initializer             ::= LAYOUT* 'colon' LAYOUT* 'base' LAYOUT* 'lparen' LAYOUT* argument_list? LAYOUT* 'rparen' LAYOUT* |
                                     LAYOUT* 'colon' LAYOUT* 'this' LAYOUT* 'lparen' LAYOUT* argument_list? LAYOUT* 'rparen' LAYOUT* ; 

constructor_body                    ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; 

static_constructor_declaration      ::= attributes? static_constructor_modifiers LAYOUT* 'identifier' LAYOUT* 'lparen' LAYOUT* 'rparen' LAYOUT* static_constructor_body ; 

static_constructor_modifiers        ::= LAYOUT* 'extern'? LAYOUT* 'static' LAYOUT* |
                                     LAYOUT* 'static' LAYOUT* 'extern'? ; 

static_constructor_body             ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; 

destructor_declaration              ::= attributes? LAYOUT* 'extern'? LAYOUT* 'tilde' LAYOUT* 'identifier' LAYOUT* 'lparen' LAYOUT* 'rparen' LAYOUT* destructor_body ; 

destructor_body                     ::= block |
                                     LAYOUT* 'semicolon' LAYOUT* ; // A.2.8 Structs


struct_declaration                  ::= attributes? struct_modifiers? LAYOUT* 'struct' LAYOUT* 'identifier' LAYOUT* struct_interfaces? struct_body LAYOUT* 'semicolon'? ; 

struct_modifiers                    ::= struct_modifier |
                                     struct_modifiers struct_modifier ; 

struct_modifier                     ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* ; 

struct_interfaces                   ::= LAYOUT* 'colon' LAYOUT* interface_type_list ; 

struct_body                         ::= LAYOUT* 'lbrace' LAYOUT* struct_member_declarations? LAYOUT* 'rbrace' LAYOUT* ; 

struct_member_declarations          ::= struct_member_declaration |
                                     struct_member_declarations struct_member_declaration ; 

struct_member_declaration           ::= constant_declaration |
                                     field_declaration |
                                     method_declaration |
                                     property_declaration |
                                     event_declaration |
                                     indexer_declaration |
                                     operator_declaration |
                                     constructor_declaration |
                                     static_constructor_declaration |
                                     type_declaration ; // A.2.9 Arrays


array_type                          ::= non_array_type rank_specifiers ; 

non_array_type                      ::= type ; 

rank_specifiers                     ::= rank_specifier |
                                     rank_specifiers rank_specifier ; 

rank_specifier                      ::= LAYOUT* 'lbracket' LAYOUT* dim_separators? LAYOUT* 'rbracket' LAYOUT* ; 

dim_separators                      ::= LAYOUT* 'comma' LAYOUT* |
                                     dim_separators LAYOUT* 'comma' LAYOUT* ; 

array_initializer                   ::= LAYOUT* 'lbrace' LAYOUT* variable_initializer_list? LAYOUT* 'rbrace' LAYOUT* |
                                     LAYOUT* 'lbrace' LAYOUT* variable_initializer_list LAYOUT* 'comma' LAYOUT* 'rbrace' LAYOUT* ; 

variable_initializer_list           ::= variable_initializer |
                                     variable_initializer_list LAYOUT* 'comma' LAYOUT* variable_initializer ; // A.2.10 Interfaces


interface_declaration               ::= attributes? interface_modifiers? LAYOUT* 'interface' LAYOUT* 'identifier' LAYOUT* interface_base? interface_body LAYOUT* 'semicolon'? ; 

interface_modifiers                 ::= interface_modifier |
                                     interface_modifiers interface_modifier ; 

interface_modifier                  ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* ; 

interface_base                      ::= LAYOUT* 'colon' LAYOUT* interface_type_list ; 

interface_body                      ::= LAYOUT* 'lbrace' LAYOUT* interface_member_declarations? LAYOUT* 'rbrace' LAYOUT* ; 

interface_member_declarations       ::= interface_member_declaration |
                                     interface_member_declarations interface_member_declaration ; 

interface_member_declaration        ::= interface_method_declaration |
                                     interface_property_declaration |
                                     interface_event_declaration |
                                     interface_indexer_declaration ; 

interface_method_declaration        ::= attributes? LAYOUT* 'new'? return_type LAYOUT* 'identifier' LAYOUT* 'lparen' LAYOUT* formal_parameter_list? LAYOUT* 'rparen' LAYOUT* 'semicolon' LAYOUT* ; 

interface_property_declaration      ::= attributes? LAYOUT* 'new'? type LAYOUT* 'identifier' LAYOUT* 'lbrace' LAYOUT* interface_accessors LAYOUT* 'rbrace' LAYOUT* ; 

interface_accessors                 ::= attributes? LAYOUT* 'get' LAYOUT* 'semicolon' LAYOUT* |
                                     attributes? LAYOUT* 'set' LAYOUT* 'semicolon' LAYOUT* |
                                     attributes? LAYOUT* 'get' LAYOUT* 'semicolon' LAYOUT* attributes? LAYOUT* 'set' LAYOUT* 'semicolon' LAYOUT* |
                                     attributes? LAYOUT* 'set' LAYOUT* 'semicolon' LAYOUT* attributes? LAYOUT* 'get' LAYOUT* 'semicolon' LAYOUT* ; 

interface_event_declaration         ::= attributes? LAYOUT* 'new'? LAYOUT* 'event' LAYOUT* type LAYOUT* 'identifier' LAYOUT* 'semicolon' LAYOUT* ; 

interface_indexer_declaration       ::= attributes? LAYOUT* 'new'? type LAYOUT* 'this' LAYOUT* 'lbracket' LAYOUT* formal_parameter_list LAYOUT* 'rbracket' LAYOUT* 'lbrace' LAYOUT* interface_accessors LAYOUT* 'rbrace' LAYOUT* ; // A.2.11 Enums


enum_declaration                    ::= attributes? enum_modifiers? LAYOUT* 'enum' LAYOUT* 'identifier' LAYOUT* enum_base? enum_body LAYOUT* 'semicolon'? ; 

enum_base                           ::= LAYOUT* 'colon' LAYOUT* integral_type ; 

enum_body                           ::= LAYOUT* 'lbrace' LAYOUT* enum_member_declarations? LAYOUT* 'rbrace' LAYOUT* |
                                     LAYOUT* 'lbrace' LAYOUT* enum_member_declarations LAYOUT* 'comma' LAYOUT* 'rbrace' LAYOUT* ; 

enum_modifiers                      ::= enum_modifier |
                                     enum_modifiers enum_modifier ; 

enum_modifier                       ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* ; 

enum_member_declarations            ::= enum_member_declaration |
                                     enum_member_declarations LAYOUT* 'comma' LAYOUT* enum_member_declaration ; 

enum_member_declaration             ::= attributes? LAYOUT* 'identifier' LAYOUT* |
                                     attributes? LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* constant_expression ; // A.2.12 Delegates


delegate_declaration                ::= attributes? delegate_modifiers? LAYOUT* 'delegate' LAYOUT* return_type LAYOUT* 'identifier' LAYOUT* 'lparen' LAYOUT* formal_parameter_list? LAYOUT* 'rparen' LAYOUT* 'semicolon' LAYOUT* ; 

delegate_modifiers                  ::= delegate_modifier |
                                     delegate_modifiers delegate_modifier ; 

delegate_modifier                   ::= LAYOUT* 'new' LAYOUT* |
                                     LAYOUT* 'public' LAYOUT* |
                                     LAYOUT* 'protected' LAYOUT* |
                                     LAYOUT* 'internal' LAYOUT* |
                                     LAYOUT* 'private' LAYOUT* ; // A.2.13 Attributes


global_attributes                   ::= global_attribute_sections ; 

global_attribute_sections           ::= global_attribute_section |
                                     global_attribute_sections global_attribute_section ; 

global_attribute_section            ::= LAYOUT* 'lbracket' LAYOUT* global_attribute_target_specifier attribute_list LAYOUT* 'rbracket' LAYOUT* |
                                     LAYOUT* 'lbracket' LAYOUT* global_attribute_target_specifier attribute_list LAYOUT* 'comma' LAYOUT* 'rbracket' LAYOUT* ; 

global_attribute_target_specifier   ::= global_attribute_target LAYOUT* 'colon' LAYOUT* ; 

global_attribute_target             ::= LAYOUT* 'assembly' LAYOUT* | LAYOUT* 'module' LAYOUT* ; 

attributes                          ::= attribute_sections ; 

attribute_sections                  ::= attribute_section |
                                     attribute_sections attribute_section ; 

attribute_section                   ::= LAYOUT* 'lbracket' LAYOUT* attribute_target_specifier? attribute_list LAYOUT* 'rbracket' LAYOUT* |
                                     LAYOUT* 'lbracket' LAYOUT* attribute_target_specifier? attribute_list LAYOUT* 'comma' LAYOUT* 'rbracket' LAYOUT* ; 

attribute_target_specifier          ::= attribute_target LAYOUT* 'colon' LAYOUT* ;


attribute_target                    ::= LAYOUT* 'field' LAYOUT* | LAYOUT* 'method' LAYOUT* | LAYOUT* 'param' LAYOUT* | LAYOUT* 'property' LAYOUT* | LAYOUT* 'type' LAYOUT* | LAYOUT* 'return' LAYOUT* | LAYOUT* 'event' LAYOUT* ; 

attribute_list                      ::= attribute |
                                     attribute_list LAYOUT* 'comma' LAYOUT* attribute ; 

attribute                           ::= attribute_name attribute_arguments? ; 

attribute_name                      ::= type_name ; 

attribute_arguments                 ::= LAYOUT* 'lparen' LAYOUT* positional_argument_list? LAYOUT* 'rparen' LAYOUT* |
                                     LAYOUT* 'lparen' LAYOUT* positional_argument_list LAYOUT* 'comma' LAYOUT* named_argument_list LAYOUT* 'rparen' LAYOUT* |
                                     LAYOUT* 'lparen' LAYOUT* named_argument_list LAYOUT* 'rparen' LAYOUT* ; 

positional_argument_list            ::= positional_argument |
                                     positional_argument_list LAYOUT* 'comma' LAYOUT* positional_argument ; 

positional_argument                 ::= attribute_argument_expression ; 

named_argument_list                 ::= named_argument |
                                     named_argument_list LAYOUT* 'comma' LAYOUT* named_argument ; 

named_argument                      ::= LAYOUT* 'identifier' LAYOUT* 'dirassign' LAYOUT* attribute_argument_expression ; 

attribute_argument_expression       ::= expression ; 

literal                             ::= LAYOUT* 'boolean_literal' LAYOUT* |
                                     LAYOUT* 'integer_literal' LAYOUT* |
                                     LAYOUT* 'real_literal' LAYOUT* |
                                     LAYOUT* 'character_literal' LAYOUT* |
                                     LAYOUT* 'string_literal' LAYOUT* |
                                     LAYOUT* 'null_literal' LAYOUT* ; 

