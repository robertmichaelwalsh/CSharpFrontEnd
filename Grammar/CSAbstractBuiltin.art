CSAbstract &WHITESPACE &COMMENT_LINE_C &COMMENT_BLOCK_C()(compilation_unit)

// Section 2 Lexical Structure

literal ::= 'true' | 'false' | &INTEGER | &REAL | &CHAR_SQ | &STRING_DQ | '@' &STRING_DQ | 'null' ; 

// Section 4 Types

type
  ::= predefined_type | qualified_identifier | array_type;

predefined_type
  ::= 'object' | 'string' | integral_type
    | 'float' | 'double' | 'decimal' | 'bool';

integral_type
  ::= 'sbyte' | 'byte' | 'short' | 'ushort'
    | 'int' | 'uint' | 'long' | 'ulong' | 'char';

// Section 7 Expressions

expression
  ::= literal
    | 'identifier'
    | '(' expression ')'
    | expression '.' 'identifier'
    | predefined_type '.' 'identifier'
    | expression '(' argument_list? ')'
    | expression '[' expression_list ']'
    | 'this'
    | 'base' '.' 'identifier'
    | 'base' '[' expression_list ']'
    | expression unary_assignment_operator
    | 'new' type '(' argument_list? ')'
    | 'new' type '[' expression_list ']' rank_specifier* array_initializer?
    | 'new' type rank_specifier+ array_initializer
    | 'typeof' '(' return_type ')'
    | 'checked' '(' expression ')'
    | 'unchecked' '(' expression ')'
    | unary_operator expression
    | unary_assignment_operator expression             
    | '(' type ')' expression
    | expression binary_operator expression
    | expression 'is' type
    | expression 'as' type
    | expression '?' expression ':' expression
    | expression assignment_operator expression;

unary_operator
  ::= '+' | '-' | '!' | '~';

unary_assignment_operator
  ::= '++' | '--';

binary_operator
  ::= overloadable_binary_operator | '||' | '&&' ;

overloadable_unary_operator
  ::= unary_operator | 'true' | 'false' ;

overloadable_binary_operator
  ::= '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^'
	| '<<' | '>>' | '==' | '!=' | '>' | '<' | '>=' | '<=';

assignment_operator
  ::= '='| '+='| '-='| '*='| '/='| '%='| '&='| '|='| '^='| '<<='| '>>=';

argument_list
  ::= argument (',' argument)*;

argument
  ::= expression | 'ref' expression | 'out' expression;
  
expression_list
  ::= expression (',' expression)*;

// Section 8 Statements

statement
  ::= embedded_statement
    | declaration_statement
    | 'identifier' ':' statement;

embedded_statement
  ::= block
    | ';'
    | expression ';'
    | 'if' '(' expression ')' embedded_statement ('else' embedded_statement)?
    | 'switch' '(' expression ')' '{' switch_section* '}'
    | 'while' '(' expression ')' embedded_statement
    | 'do' embedded_statement 'while' '(' expression ')' ';'
    | 'for' '(' for_initializer? ';' expression? ';' expression_list? ')'
                                                             embedded_statement
    | 'foreach' '(' type 'identifier' 'in' expression ')' embedded_statement
    | 'break' ';'
    | 'continue' ';'
    | 'goto' 'identifier' ';'
    | 'goto' 'case' expression ';'
    | 'goto' 'default' ';'
    | 'return' expression? ';'
    | 'throw' expression? ';'
    | 'try' block catch_clauses? ('finally' block)?
    | 'checked' block
    | 'unchecked' block
    | 'lock' '(' expression ')' embedded_statement
    | 'using' '(' resource_acquisition ')' embedded_statement;

block
  ::= '{' statement* '}';

declaration_statement
  ::= local_variable_declaration ';'
    | local_constant_declaration ';';
                                
local_variable_declaration
  ::= type variable_declarators;
 
local_constant_declaration
  ::= 'const' type constant_declarators;

switch_section
  ::= switch_label+ statement+;
  
switch_label
  ::= 'case' expression ':'
    |  'default' ':';
                        
for_initializer
  ::= local_variable_declaration | expression_list;

catch_clauses
  ::= specific_catch_clause+
    |  specific_catch_clause* general_catch_clause;

specific_catch_clause
  ::= 'catch' '(' type 'identifier'? ')' block;

general_catch_clause
  ::= 'catch' block;
  
resource_acquisition
  ::= local_variable_declaration | expression;
                                                                                
// Section 9 Namespaces

compilation_unit
  ::= using_directive* global_attribute_section* namespace_member_declaration*;

namespace_member_declaration
  ::= 'namespace' qualified_identifier
                    '{' using_directive* namespace_member_declaration* '}' ';'?
    | type_declaration ;

qualified_identifier
  ::= 'identifier' ('.' 'identifier')*;

using_directive
  ::= 'using' ('identifier' '=')? qualified_identifier ';';

type_declaration
  ::= class_declaration
    | struct_declaration
    | interface_declaration
    | enum_declaration
    | delegate_declaration;

// Section 10 Classes

class_declaration
  ::= attribute_section* modifier* 'class' 'identifier' class_base?
                                               '{' member_declaration* '}' ';'?;
class_base
  ::= ':' ('object' | 'string' | qualified_identifier)
                                                    (',' qualified_identifier)*;

modifier
  ::= 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract'
    | 'sealed' | 'static' | 'readonly' | 'volatile' | 'virtual' | 'override'
    | 'extern';
(*
   "modifier" is a non-terminal we have introduced to subsume several
   non-terminals called "X-modifier". The productions of "modifier" form the
   union of the productions for each "X-modifier".
*)
  
member_declaration
  ::= constant_declaration
    | field_declaration
  	| method_declaration
  	| property_declaration
  	| event_declaration
  	| indexer_declaration
  	| operator_declaration
  	| constructor_declaration
  	| static_constructor_declaration
  	| destructor_declaration
    | type_declaration;
(*
   "member-declaration" is a non-terminal we have introduced to subsume
   "class-member-declaration" and "struct-member-declaration".  The only
    differences between the two are that stucts cannot have destructor
    declarations, and that class modifiers can be "abstract" and "sealed"
    whereas structs cannot.
*)

body
  ::= block | ';';
(* "body" is a non-terminal we have introduced to replace several identical
   non-terminals called "X-body". *)


constant_declaration
  ::= attribute_section* modifier* 'const' type constant_declarators ';';
  
constant_declarators
  ::= constant_declarator (',' constant_declarator)*;
  
constant_declarator
  ::= 'identifier' '=' expression;
  
field_declaration
  ::= attribute_section* modifier* type variable_declarators ';';
  
variable_declarators
  ::= variable_declarator (',' variable_declarator)*;
  
variable_declarator
  ::= 'identifier' ('=' variable_initializer)?;
  
variable_initializer
  ::= expression | array_initializer;

method_declaration
  ::= attribute_section* modifier*  return_type qualified_identifier
  	                                        '(' formal_parameter_list? ')' body;

return_type
  ::= 'void' | type;

formal_parameter_list
  ::= fixed_parameter (',' fixed_parameter)* (',' parameter_array)?
    | parameter_array;

fixed_parameter
  ::= attribute_section* ('ref' | 'out')? type 'identifier';
  
parameter_array
  ::= attribute_section* 'params' type rank_specifier+ 'identifier';
  
property_declaration
  ::= attribute_section* modifier*  type qualified_identifier
                                                  '{' accessor_declarations '}';
accessor_declarations
  ::= attribute_section* 'get' body (attribute_section* 'set' body)?
    | attribute_section* 'set' body (attribute_section* 'get' body)?;

event_declaration
  ::= attribute_section* modifier* 'event' local_variable_declaration ';'
    | attribute_section* modifier* 'event' type qualified_identifier
                                            '{' event_accessor_declarations '}';
indexer_declaration
  ::= attribute_section* modifier*  indexer_declarator
                                                  '{' accessor_declarations '}';
indexer_declarator
  ::= type (qualified_identifier '.')? 'this' '[' formal_parameter_list ']';
  
operator_declaration
  ::= attribute_section* modifier* operator_declarator body ;
  
operator_declarator
  ::= ('implicit' | 'explicit') 'operator' type '(' type 'identifier' ')'
  	| type 'operator' overloadable_unary_operator '(' type 'identifier' ')'
    | type 'operator' overloadable_binary_operator
                                    '(' type 'identifier' ',' type 'identifier' ')';

constructor_declaration
  ::= attribute_section* modifier*  'identifier'
                   '(' formal_parameter_list? ')' constructor_initializer? body;

constructor_initializer
  ::= ':' constructor_order '(' argument_list? ')';
  
constructor_order
  ::= 'base' | 'this';
  
static_constructor_declaration
  ::= attribute_section* static_constructor_modifiers 'identifier' '(' ')' body;
  
static_constructor_modifiers
  ::= 'static' | 'extern' 'static' | 'static' 'extern';
    
destructor_declaration
  ::= attribute_section* 'extern'? '~' 'identifier' '(' ')' body;
  
// Section 11 Structs

struct_declaration
  ::= attribute_section* modifier* 'struct' 'identifier'
                    interface_base? '{' member_declaration* '}' ';'?;

// Section 12 Arrays

array_type
  ::= type rank_specifier+;
  
rank_specifier
  ::= '[' ','* ']';
  
array_initializer
  ::= '{' variable_initializer_list? ','? '}';

variable_initializer_list
  ::= variable_initializer (',' variable_initializer)*;
  
// Section 13 Interfaces

interface_declaration
  ::= attribute_section* modifier* 'interface' 'identifier'
          interface_base? '{' interface_member_declaration* '}' ';'?;

interface_base ::= ':' interface_type_list;

interface_type_list
  ::= qualified_identifier (',' qualified_identifier)*;

interface_member_declaration
  ::= attribute_section* 'new'? 'event' type 'identifier' ';'
    | attribute_section* 'new'? type 'identifier' '{' interface_accessors '}'
  	| attribute_section* 'new'? return_type 'identifier'
  	                                         '(' formal_parameter_list? ')' ';'
    | attribute_section* 'new'? type 'this'
                      '[' formal_parameter_list ']' '{' interface_accessors '}';

interface_accessors
  ::= attribute_section* 'get' ';'
    | attribute_section* 'set' ';'
    | attribute_section* 'get' ';' attribute_section* 'set' ';'
    | attribute_section* 'set' ';' attribute_section* 'get' ';';

// Section 14 Enums

enum_declaration
  ::= attribute_section* modifier* 'enum' 'identifier' enum_base?
                                    '{' enum_member_declarations? ','? '}' ';'?;

enum_base
  ::= ':' integral_type;

enum_member_declarations
  ::= enum_member_declaration (',' enum_member_declaration)*;

enum_member_declaration
  ::= attribute_section* 'identifier'
    | attribute_section* 'identifier' '=' expression;

// Section 15 Delegates

delegate_declaration
  ::= attribute_section* modifier* 'delegate' return_type 'identifier'
                                             '(' formal_parameter_list? ')' ';';

event_accessor_declarations
  ::= add_accessor_declaration remove_accessor_declaration
    | remove_accessor_declaration add_accessor_declaration;

add_accessor_declaration
  ::= attribute_section* 'add' block;

remove_accessor_declaration
  ::= attribute_section* 'remove' block;

// Section 17 Attributes

global_attribute_section
  ::= '[' ('assembly' | 'module') ':' attribute_list ','? ']';

attribute_list
  ::= attribute (',' attribute)*;

attribute
  ::= qualified_identifier attribute_arguments?;

attribute_arguments
  ::= '(' expression_list? ')'
    | '(' expression_list ',' named_argument_list ')'
    | '(' named_argument_list ')' ;

named_argument_list
  ::= named_argument (',' named_argument)*;

named_argument
  ::= 'identifier' '=' expression;

attribute_section
  ::= '[' (attribute_target ':')? attribute_list ','? ']';

attribute_target
  ::= 'field' | 'event' | 'method' | 'param' |  'property' | 'return' | 'type';

//////////////////////////////////////////////////////////////////////////
