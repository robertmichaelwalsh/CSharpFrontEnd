compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('A'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type('predefined_type'('bool')),
            variable_declarators(variable_declarator(
                identifier('b_cctor_run'),
                '=',
                variable_initializer(expression(literal('false')))
              )),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('B'),
        '{',
        member_declaration(static_constructor_declaration(
            static_constructor_modifiers('static'),
            identifier('B'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('A')),
                        '.',
                        identifier('b_cctor_run')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('method'),
            '(',
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(delegate_declaration(
        'delegate',
        'type'('void'),
        identifier('DoIt'),
        '(',
        ')',
        ';'
      ))),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Bah')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('DllImport')),
                      attribute_arguments(
                        ambig(
                          '(',
                          expression(literal('"cygwin1.dll"')),
                          ',',
                          expression(
                            expression(identifier('EntryPoint')),
                            assignment_operator('='),
                            expression(literal('"puts"'))
                          ),
                          ',',
                          expression(
                            expression(identifier('CharSet')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Ansi')
                            )
                          ),
                          ')'
                        ),
                        ambig(
                          ambig(
                            '(',
                            expression(literal('"cygwin1.dll"')),
                            ',',
                            named_argument_list(
                              named_argument(
                                identifier('EntryPoint'),
                                '=',
                                expression(literal('"puts"'))
                              ),
                              ',',
                              named_argument(
                                identifier('CharSet'),
                                '=',
                                expression(
                                  expression(identifier('CharSet')),
                                  '.',
                                  identifier('Ansi')
                                )
                              )
                            )
                          ),
                          ambig(
                            '(',
                            expression(literal('"cygwin1.dll"')),
                            ',',
                            expression(
                              expression(identifier('EntryPoint')),
                              assignment_operator('='),
                              expression(literal('"puts"'))
                            ),
                            ',',
                            named_argument_list(named_argument(
                                identifier('CharSet'),
                                '=',
                                expression(
                                  expression(identifier('CharSet')),
                                  '.',
                                  identifier('Ansi')
                                )
                              ))
                          ),
                          ')'
                        )
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                'modifier'('static'),
                'modifier'('extern'),
                type(predefined_type(integral_type('int'))),
                identifier('puts'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('name')
                  )),
                ')',
                'body'(';')
              )),
            member_declaration(type_declaration(delegate_declaration(
                  'delegate',
                  'type'('void'),
                  identifier('SimpleDelegate'),
                  '(',
                  ')',
                  ';'
                ))),
            member_declaration(type_declaration(delegate_declaration(
                  'delegate',
                  type('predefined_type'('string')),
                  identifier('NotSimpleDelegate'),
                  '(',
                  formal_parameter_list(fixed_parameter(
                      type(predefined_type(integral_type('int'))),
                      identifier('a')
                    )),
                  ')',
                  ';'
                ))),
            member_declaration(type_declaration(delegate_declaration(
                  'delegate',
                  type(predefined_type(integral_type('int'))),
                  identifier('AnotherDelegate'),
                  '(',
                  formal_parameter_list(fixed_parameter(
                      type('predefined_type'('string')),
                      identifier('s')
                    )),
                  ')',
                  ';'
                ))),
            member_declaration(field_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('data'))),
                ';'
              )),
            member_declaration(method_declaration(
                'modifier'('static'),
                'type'('void'),
                identifier('F'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"Test.F from delegate"')))),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type('predefined_type'('string')),
                identifier('G'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('a')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('2'))
                        ),
                        ')',
                        embedded_statement(
                          'throw',
                          expression(
                            'new',
                            type(qualified_identifier(identifier('Exception'))),
                            '(',
                            argument_list(argument(expression(literal('"Something went wrong in G"')))),
                            ')'
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(
                          expression(literal('"G got: "')),
                          'binary_operator'('overloadable_binary_operator'('+')),
                          expression(
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          )
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                type('predefined_type'('string')),
                identifier('H'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('a')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          'throw',
                          expression(
                            'new',
                            type(qualified_identifier(identifier('Exception'))),
                            '(',
                            argument_list(argument(expression(literal('"Something went wrong in H"')))),
                            ')'
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(
                          expression(
                            expression(
                              expression(literal('"H got: "')),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(
                                expression(
                                  expression(identifier('a')),
                                  '.',
                                  identifier('ToString')
                                ),
                                '(',
                                ')'
                              )
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(literal('" and "'))
                          ),
                          'binary_operator'('overloadable_binary_operator'('+')),
                          expression(
                            expression(
                              expression(identifier('data')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          )
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('virtual'),
                'type'('void'),
                identifier('VF'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"Test.VF from delegate"')))),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('Test'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('data')),
                          assignment_operator('='),
                          expression(literal('5'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('DoIt'))),
                          variable_declarator(
                            identifier('doit'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('DoIt'))),
                                '(',
                                argument_list(argument(expression(
                                      expression(identifier('B')),
                                      '.',
                                      identifier('method')
                                    ))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('A')),
                          '.',
                          identifier('b_cctor_run')
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Test'))),
                          variable_declarator(
                            identifier('test'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Test'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('SimpleDelegate'))),
                          variable_declarator(
                            identifier('d'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('SimpleDelegate'))),
                                '(',
                                argument_list(argument(expression(identifier('F')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('SimpleDelegate'))),
                          variable_declarator(
                            identifier('d1'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('SimpleDelegate'))),
                                '(',
                                argument_list(argument(expression(
                                      expression(identifier('test')),
                                      '.',
                                      identifier('VF')
                                    ))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('NotSimpleDelegate'))),
                          variable_declarator(
                            identifier('d2'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('NotSimpleDelegate'))),
                                '(',
                                argument_list(argument(expression(identifier('G')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('NotSimpleDelegate'))),
                          variable_declarator(
                            identifier('d3'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('NotSimpleDelegate'))),
                                '(',
                                argument_list(argument(expression(
                                      expression(identifier('test')),
                                      '.',
                                      identifier('H')
                                    ))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('d')),
                          '(',
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('d1')),
                          '(',
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('G')),
                          '(',
                          argument_list(argument(expression(literal('2')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('test')),
                            '.',
                            identifier('H')
                          ),
                          '(',
                          argument_list(argument(expression(literal('3')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('d2')),
                                '(',
                                argument_list(argument(expression(literal('2')))),
                                ')'
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('d3')),
                                '(',
                                argument_list(argument(expression(literal('3')))),
                                ')'
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('G')),
                          '(',
                          argument_list(argument(expression(literal('2')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('test')),
                            '.',
                            identifier('H')
                          ),
                          '(',
                          argument_list(argument(expression(literal('3')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('Method')
                            ),
                            '.',
                            identifier('Name')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"F"'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('d3')),
                            '.',
                            identifier('Method')
                          ),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('object')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('args'),
                            '=',
                            variable_initializer(array_initializer(
                                '{',
                                variable_initializer_list(variable_initializer(expression(literal('3')))),
                                '}'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(
                                  expression(identifier('d3')),
                                  '.',
                                  identifier('DynamicInvoke')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('args')))),
                                ')'
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('AnotherDelegate'))),
                          variable_declarator(
                            identifier('d4'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('AnotherDelegate'))),
                                '(',
                                argument_list(argument(expression(identifier('puts')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('d4')),
                            '.',
                            identifier('Method')
                          ),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('d4')),
                                '.',
                                identifier('Method')
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(
                                  expression(identifier('d4')),
                                  '.',
                                  identifier('Method')
                                ),
                                '.',
                                identifier('Name')
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(
                                  expression(identifier('d4')),
                                  '.',
                                  identifier('Method')
                                ),
                                '.',
                                identifier('DeclaringType')
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)