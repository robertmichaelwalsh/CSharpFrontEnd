compilation_unit(namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('A'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('x'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('x')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(identifier('x')),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('2'))
                      ),
                      ')',
                      embedded_statement(
                        expression(
                          expression(identifier('x')),
                          assignment_operator('='),
                          expression(literal('1'))
                        ),
                        ';'
                      ),
                      'else',
                      embedded_statement(
                        expression(
                          expression(identifier('x')),
                          assignment_operator('='),
                          expression(literal('0'))
                        ),
                        ';'
                      )
                    )
                  )),
                '}'
              ))
          )),
        '}'
      ))))