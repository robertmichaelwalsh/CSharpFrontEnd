compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(interface_declaration(
        'modifier'('public'),
        'interface',
        identifier('IVehicle'),
        '{',
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Start'),
          '(',
          ')',
          ';'
        ),
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Stop'),
          '(',
          ')',
          ';'
        ),
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Turn'),
          '(',
          ')',
          ';'
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Base'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('IVehicle')))
        ),
        '{',
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IVehicle')),
            '.',
            identifier('Start'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('Stop'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('2')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type(predefined_type(integral_type('int'))),
            identifier('Turn'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('3')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Derived1'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Base')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type(predefined_type(integral_type('int'))),
            identifier('Turn'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('4')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Derived2'),
        class_base(
          ':',
          interface_type_list(
            qualified_identifier(identifier('Base')),
            ',',
            qualified_identifier(identifier('IVehicle'))
          )
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('new'),
            type(predefined_type(integral_type('int'))),
            identifier('Stop'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('6')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IVehicle')),
            '.',
            identifier('Start'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('5')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IVehicle')),
            '.',
            identifier('Turn'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('7')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type(predefined_type(integral_type('int'))),
            identifier('Turn'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('8')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Derived1'))),
                      variable_declarator(
                        identifier('d1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Derived1'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Derived2'))),
                      variable_declarator(
                        identifier('d2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Derived2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Base'))),
                      variable_declarator(
                        identifier('b1'),
                        '=',
                        variable_initializer(expression(identifier('d1')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Base'))),
                      variable_declarator(
                        identifier('b2'),
                        '=',
                        variable_initializer(expression(identifier('d2')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('d1')),
                          '.',
                          identifier('Turn')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('IVehicle'))),
                              ')',
                              expression(identifier('d1'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('Turn')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('IVehicle'))),
                              ')',
                              expression(identifier('d2'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('Turn')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('7'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('b2')),
                          '.',
                          identifier('Turn')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('IVehicle'))),
                              ')',
                              expression(identifier('b2'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('Turn')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('7'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)