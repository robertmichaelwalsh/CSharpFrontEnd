compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('name'),
                            '=',
                            variable_initializer(expression(literal('"System.String"')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('args')),
                            '.',
                            identifier('Length')
                          ),
                          'binary_operator'('overloadable_binary_operator'('>')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('name')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('args')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Type'))),
                          variable_declarator(
                            identifier('t'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('Type')),
                                  '.',
                                  identifier('GetType')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('name')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('PropertyInfo'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('ms'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('t')),
                                  '.',
                                  identifier('GetProperties')
                                ),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type(qualified_identifier(identifier('PropertyInfo'))),
                        identifier('m'),
                        'in',
                        expression(identifier('ms')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('m')),
                                  '.',
                                  identifier('CanRead')
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(
                                      expression(identifier('Console')),
                                      '.',
                                      identifier('Write')
                                    ),
                                    '(',
                                    argument_list(argument(expression(
                                          expression(
                                            expression(literal('"Type "')),
                                            'binary_operator'('overloadable_binary_operator'('+')),
                                            expression(
                                              expression(
                                                expression(identifier('m')),
                                                '.',
                                                identifier('PropertyType')
                                              ),
                                              '.',
                                              identifier('Name')
                                            )
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ))),
                                    ')'
                                  ),
                                  ';'
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(identifier('m')),
                                        '.',
                                        identifier('Name')
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)