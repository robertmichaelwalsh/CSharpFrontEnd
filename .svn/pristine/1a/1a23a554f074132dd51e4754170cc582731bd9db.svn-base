compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Messaging'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Proxies'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Channels'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Serialization'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('RemotingTest')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('MyProxy'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('RealProxy')))
            ),
            '{',
            member_declaration(field_declaration(
                'modifier'('readonly'),
                type(qualified_identifier(identifier('MarshalByRefObject'))),
                variable_declarators(variable_declarator(identifier('target'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('MyProxy'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(qualified_identifier(identifier('MarshalByRefObject'))),
                    identifier('target')
                  )),
                ')',
                constructor_initializer(
                  ':',
                  'base',
                  '(',
                  argument_list(argument(expression(
                        expression(
                          expression(identifier('target')),
                          '.',
                          identifier('GetType')
                        ),
                        '(',
                        ')'
                      ))),
                  ')'
                ),
                body(block(
                    '{',
                    statement(embedded_statement(
                        'expression'(
                          'expression'(
                            'expression'('this'),
                            '.',
                            identifier('target')
                          ),
                          assignment_operator('='),
                          expression(identifier('target'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('override'),
                type(qualified_identifier(identifier('IMessage'))),
                identifier('Invoke'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(qualified_identifier(identifier('IMessage'))),
                    identifier('request')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('IMethodCallMessage'))),
                          variable_declarator(
                            identifier('call'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type(qualified_identifier(identifier('IMethodCallMessage'))),
                                ')',
                                expression(identifier('request'))
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"Invoke "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(identifier('call')),
                                  '.',
                                  identifier('MethodName')
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('Write')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"ARGS("')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('call')),
                            '.',
                            identifier('ArgCount')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(literal('0'))
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(
                                      expression(identifier('Console')),
                                      '.',
                                      identifier('Write')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('", "')))),
                                    ')'
                                  ),
                                  ';'
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('Write')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(
                                              expression(identifier('call')),
                                              '.',
                                              identifier('GetArgName')
                                            ),
                                            '(',
                                            argument_list(argument(expression(identifier('i')))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('call')),
                                            '.',
                                            identifier('GetArg')
                                          ),
                                          '(',
                                          argument_list(argument(expression(identifier('i')))),
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('")"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('Write')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"INARGS("')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('call')),
                            '.',
                            identifier('InArgCount')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(literal('0'))
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(
                                      expression(identifier('Console')),
                                      '.',
                                      identifier('Write')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('", "')))),
                                    ')'
                                  ),
                                  ';'
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('Write')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(
                                              expression(identifier('call')),
                                              '.',
                                              identifier('GetInArgName')
                                            ),
                                            '(',
                                            argument_list(argument(expression(identifier('i')))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('call')),
                                            '.',
                                            identifier('GetInArg')
                                          ),
                                          '(',
                                          argument_list(argument(expression(identifier('i')))),
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('")"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('IMethodReturnMessage'))),
                          variable_declarator(
                            identifier('res'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('RemotingServices')),
                                  '.',
                                  identifier('ExecuteMessage')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(identifier('target'))),
                                  ',',
                                  argument(expression(identifier('call')))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('Write')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"RESARGS("')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('res')),
                            '.',
                            identifier('ArgCount')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(literal('0'))
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(
                                      expression(identifier('Console')),
                                      '.',
                                      identifier('Write')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('", "')))),
                                    ')'
                                  ),
                                  ';'
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('Write')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(
                                              expression(identifier('res')),
                                              '.',
                                              identifier('GetArgName')
                                            ),
                                            '(',
                                            argument_list(argument(expression(identifier('i')))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('res')),
                                            '.',
                                            identifier('GetArg')
                                          ),
                                          '(',
                                          argument_list(argument(expression(identifier('i')))),
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('")"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('Write')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"RESOUTARGS("')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('res')),
                            '.',
                            identifier('OutArgCount')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(literal('0'))
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(
                                      expression(identifier('Console')),
                                      '.',
                                      identifier('Write')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('", "')))),
                                    ')'
                                  ),
                                  ';'
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('Write')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(
                                              expression(identifier('res')),
                                              '.',
                                              identifier('GetOutArgName')
                                            ),
                                            '(',
                                            argument_list(argument(expression(identifier('i')))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('res')),
                                            '.',
                                            identifier('GetOutArg')
                                          ),
                                          '(',
                                          argument_list(argument(expression(identifier('i')))),
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('")"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(identifier('res')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('R2'),
            '{',
            member_declaration(field_declaration(
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(identifier('sTest'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('R2'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('sTest')),
                          assignment_operator('='),
                          expression(literal('"R2"'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'type'('void'),
                identifier('Print'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('sTest')))),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
              ']'
            ),
            'class',
            identifier('R2_MBV'),
            '{',
            member_declaration(field_declaration(
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(identifier('sTest'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('R2_MBV'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('sTest')),
                          assignment_operator('='),
                          expression(literal('"R2"'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(property_declaration(
                'modifier'('public'),
                type('predefined_type'('string')),
                identifier('Data'),
                '{',
                accessor_declarations(
                  ambig(
                    'get',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(identifier('sTest')),
                            ';'
                          )),
                        '}'
                      ))
                  ),
                  ambig(
                    'get',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(identifier('sTest')),
                            ';'
                          )),
                        '}'
                      ))
                  )
                ),
                '}'
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('R1'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('MarshalByRefObject')))
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                type(qualified_identifier(identifier('R2'))),
                identifier('TestMBV'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(
                          'new',
                          type(qualified_identifier(identifier('R2'))),
                          '(',
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Class1'),
            '{',
            member_declaration(method_declaration(
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"test "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(identifier('AppDomain')),
                                    '.',
                                    identifier('CurrentDomain')
                                  ),
                                  '.',
                                  identifier('FriendlyName')
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('AppDomain'))),
                          variable_declarator(
                            identifier('app2'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('AppDomain')),
                                  '.',
                                  identifier('CreateDomain')
                                ),
                                '(',
                                argument_list(argument(expression(literal('"2"')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(
                            expression(
                              expression(identifier('RemotingServices')),
                              '.',
                              identifier('IsTransparentProxy')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('app2')))),
                            ')'
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('ObjectHandle'))),
                          variable_declarator(
                            identifier('o'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(
                                    expression(identifier('AppDomain')),
                                    '.',
                                    identifier('CurrentDomain')
                                  ),
                                  '.',
                                  identifier('CreateInstance')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(
                                      'expression'(
                                        'expression'(
                                          'typeof',
                                          '(',
                                          type(qualified_identifier(identifier('R1'))),
                                          ')'
                                        ),
                                        '.',
                                        identifier('Assembly')
                                      ),
                                      '.',
                                      identifier('FullName')
                                    )),
                                  ',',
                                  argument(expression(
                                      'expression'(
                                        'typeof',
                                        '(',
                                        type(qualified_identifier(identifier('R1'))),
                                        ')'
                                      ),
                                      '.',
                                      identifier('FullName')
                                    ))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('R1'))),
                          variable_declarator(
                            identifier('myobj'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type(qualified_identifier(identifier('R1'))),
                                ')',
                                expression(
                                  expression(
                                    expression(identifier('o')),
                                    '.',
                                    identifier('Unwrap')
                                  ),
                                  '(',
                                  ')'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('RemotingServices')),
                            '.',
                            identifier('IsTransparentProxy')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('myobj')))),
                          ')'
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"CreateInstance return TP for in our current domain"')))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'return',
                                expression(literal('2')),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('o')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('app2')),
                              '.',
                              identifier('CreateInstance')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'expression'(
                                    'expression'(
                                      'typeof',
                                      '(',
                                      type(qualified_identifier(identifier('R1'))),
                                      ')'
                                    ),
                                    '.',
                                    identifier('Assembly')
                                  ),
                                  '.',
                                  identifier('FullName')
                                )),
                              ',',
                              argument(expression(
                                  'expression'(
                                    'typeof',
                                    '(',
                                    type(qualified_identifier(identifier('R1'))),
                                    ')'
                                  ),
                                  '.',
                                  identifier('FullName')
                                ))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"type: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('o')),
                                        '.',
                                        identifier('GetType')
                                      ),
                                      '(',
                                      ')'
                                    ),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  ')'
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('myobj')),
                          assignment_operator('='),
                          expression(
                            '(',
                            type(qualified_identifier(identifier('R1'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('o')),
                                '.',
                                identifier('Unwrap')
                              ),
                              '(',
                              ')'
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(
                            expression(
                              expression(identifier('RemotingServices')),
                              '.',
                              identifier('IsTransparentProxy')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('myobj')))),
                            ')'
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('3')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"unwrapped type: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('myobj')),
                                        '.',
                                        identifier('GetType')
                                      ),
                                      '(',
                                      ')'
                                    ),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  ')'
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('R2'))),
                          variable_declarator(
                            identifier('r2'),
                            '=',
                            variable_initializer(expression(literal('null')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('bool')),
                          variable_declarator(
                            identifier('bSerExc'),
                            '=',
                            variable_initializer(expression(literal('false')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('r2')),
                                assignment_operator('='),
                                expression(
                                  expression(
                                    expression(identifier('myobj')),
                                    '.',
                                    identifier('TestMBV')
                                  ),
                                  '(',
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('SerializationException')),
                              ')',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('bSerExc')),
                                      assignment_operator('='),
                                      expression(literal('true'))
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(identifier('bSerExc'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('4')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test-ok"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)