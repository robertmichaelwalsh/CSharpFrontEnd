compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(struct_declaration(
        'struct',
        identifier('Point'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(
              variable_declarator(identifier('x')),
              ',',
              variable_declarator(identifier('y')),
              ',',
              variable_declarator(identifier('z'))
            ),
            ';'
          )),
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('Point'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('x')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('y')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'('this'),
                        '.',
                        identifier('x')
                      ),
                      assignment_operator('='),
                      expression(identifier('x'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'('this'),
                        '.',
                        identifier('y')
                      ),
                      assignment_operator('='),
                      expression(identifier('y'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'('this'),
                        '.',
                        identifier('z')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('Point'))),
            identifier('get_zerop'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Point'))),
                      variable_declarator(
                        identifier('p'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Point'))),
                            '(',
                            argument_list(
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('0')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('z')
                      ),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('p')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('struct_param'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('Point'))),
                identifier('p')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('p')),
                            '.',
                            identifier('x')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('p')),
                            '.',
                            identifier('y')
                          )
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('p')),
                            '.',
                            identifier('y')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('p')),
                            '.',
                            identifier('z')
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('p')),
                          '.',
                          identifier('z')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('0'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('x')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('y')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('z')
                      ),
                      assignment_operator('='),
                      expression(literal('3'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Point'))),
                      variable_declarator(
                        identifier('p'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Point'))),
                            '(',
                            argument_list(
                              argument(expression(literal('10'))),
                              ',',
                              argument(expression(literal('20')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Point'))),
                      variable_declarator(
                        identifier('c'),
                        '=',
                        variable_initializer(expression(identifier('p')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Point'))),
                      variable_declarator(identifier('zp'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('c')),
                        '.',
                        identifier('x')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('c')),
                        '.',
                        identifier('y')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('20'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('c')),
                        '.',
                        identifier('z')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('x')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('y')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('20'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('z')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('z')
                      ),
                      assignment_operator('='),
                      expression(literal('7'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('p')),
                        '.',
                        identifier('z')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('7'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('7')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('c')),
                        '.',
                        identifier('x')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('8')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('zp')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Point')),
                          '.',
                          identifier('get_zerop')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('x')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('y')
                          )
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('y')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('z')
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('zp')),
                          '.',
                          identifier('z')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('0'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('9')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Point')),
                          '.',
                          identifier('struct_param')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('zp')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('10')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('x')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('y')
                          )
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('y')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('zp')),
                            '.',
                            identifier('z')
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('zp')),
                          '.',
                          identifier('z')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('0'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('11')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Activator')),
                              '.',
                              identifier('CreateInstance')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('Point'))),
                                  ')'
                                )),
                              ',',
                              argument(expression(
                                  'new',
                                  array_type(
                                    type('predefined_type'('object')),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  ),
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(literal('1'))),
                                      ',',
                                      variable_initializer(expression(literal('2')))
                                    ),
                                    '}'
                                  )
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('o')),
                          'is',
                          type(qualified_identifier(identifier('Point')))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('12')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)