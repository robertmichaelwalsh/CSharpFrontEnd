compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(struct_declaration(
        'struct',
        identifier('A'),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('A'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        'struct',
        identifier('B'),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('B'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Tests'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('last'),
                '=',
                variable_initializer(expression(literal('42')))
              )),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('burp'))),
            ';'
          )),
        member_declaration(static_constructor_declaration(
            static_constructor_modifiers('static'),
            identifier('Tests'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('last')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('42'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('burp')),
                        assignment_operator('='),
                        expression(literal('5'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('burp')),
                        assignment_operator('='),
                        expression(literal('4'))
                      ),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('last')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('42'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('burp')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ConstructorInfo'))),
                      variable_declarator(
                        identifier('con1'),
                        '=',
                        variable_initializer(expression(
                            'expression'(
                              'expression'(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('A'))),
                                ')'
                              ),
                              '.',
                              identifier('GetConstructor')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  expression(
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('Instance')
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('Public')
                                    )
                                  ),
                                  '|',
                                  expression(
                                    expression(identifier('BindingFlags')),
                                    '.',
                                    identifier('NonPublic')
                                  )
                                )),
                              ',',
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('Type'))),
                                  '[',
                                  expression_list(expression(literal('1'))),
                                  ']',
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(variable_initializer(expression(
                                          'typeof',
                                          '(',
                                          type(predefined_type(integral_type('int'))),
                                          ')'
                                        ))),
                                    '}'
                                  )
                                )),
                              ',',
                              argument(expression(literal('null')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ConstructorInfo'))),
                      variable_declarator(
                        identifier('con2'),
                        '=',
                        variable_initializer(expression(
                            'expression'(
                              'expression'(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('B'))),
                                ')'
                              ),
                              '.',
                              identifier('GetConstructor')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  expression(
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('Instance')
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('Public')
                                    )
                                  ),
                                  '|',
                                  expression(
                                    expression(identifier('BindingFlags')),
                                    '.',
                                    identifier('NonPublic')
                                  )
                                )),
                              ',',
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('Type'))),
                                  '[',
                                  expression_list(expression(literal('1'))),
                                  ']',
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(variable_initializer(expression(
                                          'typeof',
                                          '(',
                                          type(predefined_type(integral_type('int'))),
                                          ')'
                                        ))),
                                    '}'
                                  )
                                )),
                              ',',
                              argument(expression(literal('null')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('con1')),
                        '.',
                        identifier('Invoke')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('null'))),
                        ',',
                        argument(expression(
                            'new',
                            array_type(
                              type(qualified_identifier(identifier('Object'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(literal('0')))),
                              '}'
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('con2')),
                        '.',
                        identifier('Invoke')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('null'))),
                        ',',
                        argument(expression(
                            'new',
                            array_type(
                              type(qualified_identifier(identifier('Object'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(literal('0')))),
                              '}'
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)