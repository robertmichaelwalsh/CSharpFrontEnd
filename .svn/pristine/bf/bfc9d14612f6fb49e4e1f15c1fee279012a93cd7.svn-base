compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('fall_through'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('str')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"testing: '{0}', interned: {1}"'))),
                        ',',
                        argument(expression(identifier('str'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(
                                expression(identifier('String')),
                                '.',
                                identifier('IsInterned')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('str')))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'switch',
                    '(',
                    expression(identifier('str')),
                    ')',
                    '{',
                    switch_section(
                      switch_label(
                        'case',
                        expression(literal('"test"')),
                        ':'
                      ),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Console')),
                              '.',
                              identifier('WriteLine')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"passed"')))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'break',
                          ';'
                        ))
                    ),
                    switch_section(
                      switch_label(
                        'default',
                        ':'
                      ),
                      statement(embedded_statement(
                          'return',
                          ';'
                        ))
                    ),
                    '}'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('char'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('c'),
                        '=',
                        variable_initializer(array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal(''t''))),
                              ',',
                              variable_initializer(expression(literal(''e''))),
                              ',',
                              variable_initializer(expression(literal(''s''))),
                              ',',
                              variable_initializer(expression(literal(''t'')))
                            ),
                            '}'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('s'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('String'))),
                            '(',
                            argument_list(argument(expression(identifier('c')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('s2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('String'))),
                            '(',
                            argument_list(argument(expression(identifier('c')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"testing built string (interned = {0}) (equal strings: {1})"'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(
                                expression(identifier('String')),
                                '.',
                                identifier('IsInterned')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('s')))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          )),
                        ',',
                        argument(expression(
                            'expression'(
                              '(',
                              type('predefined_type'('object')),
                              ')',
                              expression(identifier('s'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            'expression'(
                              '(',
                              type('predefined_type'('object')),
                              ')',
                              expression(identifier('s2'))
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('test')),
                      '(',
                      argument_list(argument(expression(identifier('s')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"after test 1 (interned = {0}) (equal strings: {1})"'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(
                                expression(identifier('String')),
                                '.',
                                identifier('IsInterned')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('s')))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          )),
                        ',',
                        argument(expression(
                            'expression'(
                              '(',
                              type('predefined_type'('object')),
                              ')',
                              expression(identifier('s'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            'expression'(
                              '(',
                              type('predefined_type'('object')),
                              ')',
                              expression(identifier('s2'))
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"after test (interned = {0}) (interned2 = {1})"'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(
                                expression(identifier('String')),
                                '.',
                                identifier('IsInterned')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('s')))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          )),
                        ',',
                        argument(expression(
                            expression(
                              expression(
                                expression(identifier('String')),
                                '.',
                                identifier('IsInterned')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('s2')))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'foreach',
                    '(',
                    type('predefined_type'('string')),
                    identifier('str'),
                    'in',
                    expression(identifier('args')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('test')),
                              '(',
                              argument_list(argument(expression(identifier('str')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                '}'
              ))
          )),
        '}'
      )))
)