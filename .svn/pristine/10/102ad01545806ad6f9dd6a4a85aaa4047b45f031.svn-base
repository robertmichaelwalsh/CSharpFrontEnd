compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('t'),
                        '=',
                        variable_initializer(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(
                                identifier('System'),
                                '.',
                                identifier('Console')
                              )),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('Type'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('p'),
                        '=',
                        variable_initializer(array_initializer(
                            '{',
                            variable_initializer_list(variable_initializer(expression(
                                  'typeof',
                                  '(',
                                  type('predefined_type'('string')),
                                  ')'
                                ))),
                            '}'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('m'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('t')),
                              '.',
                              identifier('GetMethod')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"WriteLine"'))),
                              ',',
                              argument(expression(identifier('p')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'typeof',
                        '(',
                        'type'('void'),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(identifier('m')),
                        '.',
                        identifier('ReturnType')
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Type mismatch"')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)