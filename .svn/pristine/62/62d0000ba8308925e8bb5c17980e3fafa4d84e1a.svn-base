compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Messaging'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate'),
              '(',
              formal_parameter_list(
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                ),
                ',',
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('b')
                )
              ),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_invoke_delegate"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_invoke_delegate"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_invoke_delegate'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Add'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"Test.Add from delegate: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('a'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('" + "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('b'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Add2'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"Test.Add2 from delegate: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('a'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('" + "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('b'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('Add')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('Add2')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_invoke_delegate')),
                        '(',
                        argument_list(argument(expression(identifier('d')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_invoke_delegate')),
                        '(',
                        argument_list(argument(expression(identifier('d2')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)