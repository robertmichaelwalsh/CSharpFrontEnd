compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('MyMarshal'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ICustomMarshaler')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('ICustomMarshaler'))),
            identifier('GetInstance'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"GetInstance called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('MyMarshal'))),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpManagedData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('managedObj')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"CleanUpManagedData called"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpNativeData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('pNativeData')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"CleanUpNativeData called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('pNativeData')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(identifier('IntPtr')),
                        '.',
                        identifier('Zero')
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('IntPtr'))),
                              variable_declarator(
                                identifier('realPtr'),
                                '=',
                                variable_initializer(expression(
                                    'new',
                                    type(qualified_identifier(identifier('IntPtr'))),
                                    '(',
                                    argument_list(argument(expression(
                                          expression(
                                            expression(
                                              expression(identifier('pNativeData')),
                                              '.',
                                              identifier('ToInt64')
                                            ),
                                            '(',
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('-')),
                                          expression(
                                            expression(
                                              expression(identifier('Marshal')),
                                              '.',
                                              identifier('SizeOf')
                                            ),
                                            '(',
                                            argument_list(argument(expression(
                                                  'typeof',
                                                  '(',
                                                  type(predefined_type(integral_type('int'))),
                                                  ')'
                                                ))),
                                            ')'
                                          )
                                        ))),
                                    ')'
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Marshal')),
                                '.',
                                identifier('FreeHGlobal')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('realPtr')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('GetNativeDataSize'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"GetNativeDataSize() called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('4')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(qualified_identifier(identifier('IntPtr'))),
            identifier('MarshalManagedToNative'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('managedObj')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('number'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IntPtr'))),
                      variable_declarator(identifier('ptr'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('number')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('Convert')),
                                '.',
                                identifier('ToInt32')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('managedObj')))),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('ptr')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('Marshal')),
                                '.',
                                identifier('AllocHGlobal')
                              ),
                              '(',
                              argument_list(argument(expression(literal('8')))),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('WriteInt32')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('ptr'))),
                              ',',
                              argument(expression(literal('0')))
                            ),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('WriteInt32')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('IntPtr'))),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(identifier('ptr')),
                                            '.',
                                            identifier('ToInt64')
                                          ),
                                          '(',
                                          ')'
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('Marshal')),
                                            '.',
                                            identifier('SizeOf')
                                          ),
                                          '(',
                                          argument_list(argument(expression(
                                                'typeof',
                                                '(',
                                                type(predefined_type(integral_type('int'))),
                                                ')'
                                              ))),
                                          ')'
                                        )
                                      ))),
                                  ')'
                                )),
                              ',',
                              argument(expression(identifier('number')))
                            ),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(
                            'new',
                            type(qualified_identifier(identifier('IntPtr'))),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(
                                      expression(identifier('ptr')),
                                      '.',
                                      identifier('ToInt64')
                                    ),
                                    '(',
                                    ')'
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('+')),
                                  expression(
                                    expression(
                                      expression(identifier('Marshal')),
                                      '.',
                                      identifier('SizeOf')
                                    ),
                                    '(',
                                    argument_list(argument(expression(
                                          'typeof',
                                          '(',
                                          type(predefined_type(integral_type('int'))),
                                          ')'
                                        ))),
                                    ')'
                                  )
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(general_catch_clause(
                        'catch',
                        block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                expression(identifier('IntPtr')),
                                '.',
                                identifier('Zero')
                              ),
                              ';'
                            )),
                          '}'
                        )
                      ))
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type('predefined_type'('object')),
            identifier('MarshalNativeToManaged'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('pNativeData')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(literal('"*"')),
                        'binary_operator'('overloadable_binary_operator'('+')),
                        expression(
                          expression(
                            expression(identifier('Marshal')),
                            '.',
                            identifier('PtrToStringAnsi')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('pNativeData')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(literal('"*"'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Testing'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('printInt'),
            '(',
            formal_parameter_list(fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('CustomMarshaler')
                          ),
                          ',',
                          expression(
                            expression(identifier('MarshalTypeRef')),
                            assignment_operator('='),
                            expression(
                              'typeof',
                              '(',
                              type(qualified_identifier(identifier('MyMarshal'))),
                              ')'
                            )
                          ),
                          ')'
                        ),
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('CustomMarshaler')
                          ),
                          ',',
                          named_argument_list(named_argument(
                              identifier('MarshalTypeRef'),
                              '=',
                              expression(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('MyMarshal'))),
                                ')'
                              )
                            )),
                          ')'
                        )
                      )
                    )),
                  ']'
                ),
                type('predefined_type'('object')),
                identifier('number')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            'type'('void'),
            identifier('callFunction'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('Delegate'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              'type'('void'),
              identifier('Del'),
              '(',
              formal_parameter_list(fixed_parameter(
                  attribute_section(
                    '[',
                    attribute_list(attribute(
                        qualified_identifier(identifier('MarshalAs')),
                        attribute_arguments(
                          ambig(
                            '(',
                            expression(
                              expression(identifier('UnmanagedType')),
                              '.',
                              identifier('CustomMarshaler')
                            ),
                            ',',
                            expression(
                              expression(identifier('MarshalTypeRef')),
                              assignment_operator('='),
                              expression(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('MyMarshal'))),
                                ')'
                              )
                            ),
                            ')'
                          ),
                          ambig(
                            '(',
                            expression(
                              expression(identifier('UnmanagedType')),
                              '.',
                              identifier('CustomMarshaler')
                            ),
                            ',',
                            named_argument_list(named_argument(
                                identifier('MarshalTypeRef'),
                                '=',
                                expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('MyMarshal'))),
                                  ')'
                                )
                              )),
                            ')'
                          )
                        )
                      )),
                    ']'
                  ),
                  type('predefined_type'('string')),
                  identifier('x')
                )),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('TestMethod'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"s = {0}"'))),
                        ',',
                        argument(expression(identifier('s')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('s')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"*ABC*"'))
                    ),
                    ')',
                    embedded_statement(
                      'throw',
                      expression(
                        'new',
                        type(qualified_identifier(identifier('Exception'))),
                        '(',
                        argument_list(argument(expression(literal('"received wrong value"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('x'),
                        '=',
                        variable_initializer(expression(literal('5')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('printInt')),
                        '(',
                        argument_list(argument(expression(identifier('x')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('6'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Del'))),
                      variable_declarator(
                        identifier('del'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Del'))),
                            '(',
                            argument_list(argument(expression(identifier('TestMethod')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('callFunction')),
                      '(',
                      argument_list(argument(expression(identifier('del')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)