compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('TestJit'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('long'))),
            identifier('test_call'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('long'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('long'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_shift_1'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('long'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('9')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('>>')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('>>')),
                          expression(literal('63'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('<<')),
                          expression(literal('1'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('18'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('<<')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('18'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('a')),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('-'),
                        expression(literal('9'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('>>')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'unary_operator'('-'),
                        expression(literal('5'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_shift_2'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'unchecked',
                    block(
                      '{',
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('long'))),
                            variable_declarator(
                              identifier('c'),
                              '=',
                              variable_initializer(expression(
                                  '(',
                                  type(predefined_type(integral_type('long'))),
                                  ')',
                                  expression(literal('0x800000ff00000000'))
                                ))
                            )
                          ),
                          ';'
                        )),
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('long'))),
                            variable_declarator(
                              identifier('d'),
                              '=',
                              variable_initializer(expression(
                                  '(',
                                  type(predefined_type(integral_type('long'))),
                                  ')',
                                  expression(literal('0x8ef0abcd00000000'))
                                ))
                            )
                          ),
                          ';'
                        )),
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('long'))),
                            variable_declarator(identifier('t'))
                          ),
                          ';'
                        )),
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(identifier('sa'))
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('t')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('c')),
                              'binary_operator'('overloadable_binary_operator'('>>')),
                              expression(literal('4'))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Console')),
                              '.',
                              identifier('WriteLine')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('t')),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"X"')))),
                                  ')'
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(identifier('t')),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            'expression'(
                              '(',
                              type(predefined_type(integral_type('long'))),
                              ')',
                              expression(literal('0xf800000ff0000000'))
                            )
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('t')),
                                'binary_operator'('overloadable_binary_operator'('<<')),
                                expression(literal('4'))
                              ),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(identifier('c'))
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('t')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('d')),
                              'binary_operator'('overloadable_binary_operator'('>>')),
                              expression(literal('40'))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Console')),
                              '.',
                              identifier('WriteLine')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('t')),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"X"')))),
                                  ')'
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(identifier('t')),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            'expression'(
                              '(',
                              type(predefined_type(integral_type('long'))),
                              ')',
                              expression(literal('0xffffffffff8ef0ab'))
                            )
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('t')),
                                'binary_operator'('overloadable_binary_operator'('<<')),
                                expression(literal('40'))
                              ),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            'expression'(
                              '(',
                              type(predefined_type(integral_type('long'))),
                              ')',
                              expression(literal('0x8ef0ab0000000000'))
                            )
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      '}'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_shift_3'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'checked',
                    block(
                      '{',
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('ulong'))),
                            variable_declarator(
                              identifier('c'),
                              '=',
                              variable_initializer(expression(literal('0x800000ff00000000')))
                            )
                          ),
                          ';'
                        )),
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('ulong'))),
                            variable_declarator(
                              identifier('d'),
                              '=',
                              variable_initializer(expression(literal('0x8ef0abcd00000000')))
                            )
                          ),
                          ';'
                        )),
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(predefined_type(integral_type('ulong'))),
                            variable_declarator(identifier('t'))
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('t')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('c')),
                              'binary_operator'('overloadable_binary_operator'('>>')),
                              expression(literal('4'))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Console')),
                              '.',
                              identifier('WriteLine')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('t')),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"X"')))),
                                  ')'
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(identifier('t')),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0x0800000ff0000000'))
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('t')),
                                'binary_operator'('overloadable_binary_operator'('<<')),
                                expression(literal('4'))
                              ),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(identifier('c'))
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('t')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('d')),
                              'binary_operator'('overloadable_binary_operator'('>>')),
                              expression(literal('40'))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Console')),
                              '.',
                              identifier('WriteLine')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('t')),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"X"')))),
                                  ')'
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(identifier('t')),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0x8ef0ab'))
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('t')),
                                'binary_operator'('overloadable_binary_operator'('<<')),
                                expression(literal('40'))
                              ),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0x8ef0ab0000000000'))
                          ),
                          ')',
                          embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )
                        )),
                      '}'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_alu'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('long'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('9')))
                      ),
                      ',',
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('6')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('+')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('15'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('-')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('&')),
                          expression(literal('8'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          '|',
                          expression(literal('2'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('11'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('54'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('/')),
                          expression(literal('4'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('%')),
                          expression(literal('4'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'unary_operator'('-'),
                        expression(identifier('a'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'unary_operator'('-'),
                        expression(literal('9'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('b')),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('-'),
                        expression(literal('1'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'unary_operator'('~'),
                        expression(identifier('b'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_branch'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('long'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('5')))
                      ),
                      ',',
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('5')))
                      ),
                      ',',
                      variable_declarator(identifier('t'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('>=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('<=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('num'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_shift_1')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_shift_2')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_shift_3')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_call')),
                        '(',
                        argument_list(
                          argument(expression(literal('3'))),
                          ',',
                          argument(expression(literal('5')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_branch')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_alu')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)