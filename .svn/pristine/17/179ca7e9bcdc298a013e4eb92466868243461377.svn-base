compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('T')),
      '{',
      namespace_member_declaration(type_declaration(struct_declaration(
            'struct',
            identifier('datum'),
            '{',
            member_declaration(field_declaration(
                'modifier'('public'),
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(identifier('a'))),
                ';'
              )),
            member_declaration(field_declaration(
                'modifier'('public'),
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(identifier('b'))),
                ';'
              )),
            member_declaration(field_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('result'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('datum'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('A')
                  ),
                  ',',
                  fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('B')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('r')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('a')),
                          assignment_operator('='),
                          expression(identifier('A'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('b')),
                          assignment_operator('='),
                          expression(identifier('B'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('result')),
                          assignment_operator('='),
                          expression(identifier('r'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                type('predefined_type'('bool')),
                identifier('match'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('r'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('String')),
                                  '.',
                                  identifier('Compare')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(identifier('a'))),
                                  ',',
                                  argument(expression(identifier('b')))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'switch',
                        '(',
                        expression(identifier('result')),
                        ')',
                        '{',
                        switch_section(
                          switch_label(
                            'case',
                            expression(
                              'unary_operator'('-'),
                              expression(literal('1'))
                            ),
                            ':'
                          ),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(identifier('r')),
                                'binary_operator'('overloadable_binary_operator'('<')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(literal('true')),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              'break',
                              ';'
                            ))
                        ),
                        switch_section(
                          switch_label(
                            'case',
                            expression(literal('0')),
                            ':'
                          ),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(identifier('r')),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(literal('true')),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              'break',
                              ';'
                            ))
                        ),
                        switch_section(
                          switch_label(
                            'case',
                            expression(literal('1')),
                            ':'
                          ),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(identifier('r')),
                                'binary_operator'('overloadable_binary_operator'('>')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(literal('true')),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              'break',
                              ';'
                            ))
                        ),
                        switch_section(
                          switch_label(
                            'default',
                            ':'
                          ),
                          statement(embedded_statement(
                              'return',
                              expression(literal('false')),
                              ';'
                            ))
                        ),
                        '}'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('false')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('datum'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('data'),
                            '=',
                            variable_initializer(array_initializer(
                                '{',
                                variable_initializer_list(
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('datum'))),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"a"'))),
                                        ',',
                                        argument(expression(literal('"b"'))),
                                        ',',
                                        argument(expression(
                                            'unary_operator'('-'),
                                            expression(literal('1'))
                                          ))
                                      ),
                                      ')'
                                    )),
                                  ',',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('datum'))),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"a"'))),
                                        ',',
                                        argument(expression(literal('"a"'))),
                                        ',',
                                        argument(expression(literal('0')))
                                      ),
                                      ')'
                                    )),
                                  ',',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('datum'))),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"b"'))),
                                        ',',
                                        argument(expression(literal('"a"'))),
                                        ',',
                                        argument(expression(literal('1')))
                                      ),
                                      ')'
                                    )),
                                  ',',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('datum'))),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"ba"'))),
                                        ',',
                                        argument(expression(literal('"b"'))),
                                        ',',
                                        argument(expression(literal('1')))
                                      ),
                                      ')'
                                    )),
                                  ',',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('datum'))),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"b"'))),
                                        ',',
                                        argument(expression(literal('"ba"'))),
                                        ',',
                                        argument(expression(
                                            'unary_operator'('-'),
                                            expression(literal('1'))
                                          ))
                                      ),
                                      ')'
                                    ))
                                ),
                                ',',
                                '}'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(identifier('i'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(expression(
                            expression(identifier('i')),
                            assignment_operator('='),
                            expression(literal('0'))
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('data')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('i'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  'unary_operator'('!'),
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('data')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      ),
                                      '.',
                                      identifier('match')
                                    ),
                                    '(',
                                    ')'
                                  )
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(
                                    expression(identifier('i')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('1'))
                                  ),
                                  ';'
                                )
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)