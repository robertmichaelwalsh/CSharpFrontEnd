compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Foo'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(
              identifier('System'),
              '.',
              identifier('ContextBoundObject')
            ))
        ),
        '{',
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Bar'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(
              identifier('System'),
              '.',
              identifier('ContextBoundObject')
            ))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('Test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('Foo'))),
                identifier('f')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('RemotingServices')),
                        '.',
                        identifier('IsTransparentProxy')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('f')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"Bar::Test(Foo) Is TP"')))),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"Bar::Test(Foo) Is NOT a TP (error!)"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('f')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('f')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"Bar::Test(Foo) f.Equals (b) failed (error!)"')))),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"Bar::Test(Foo) f.Equals (f) ok!"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Driver'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Foo'))),
                      variable_declarator(
                        identifier('f'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Foo'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Bar'))),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Bar'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('b')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('b')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"b.Equals (b) failed (error!)"')))),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"b.Equals (b) ok!"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('RemotingServices')),
                        '.',
                        identifier('IsTransparentProxy')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('b')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"b is a TP"')))),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"b is NOT a TP (error!)"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('b')),
                        '.',
                        identifier('Test')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('f')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('f')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('f')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"f.Equals (b) failed (error!)"')))),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"f.Equals (f) ok!"')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"test end."')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)