compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_liveness_exception'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('id'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('id')),
                            assignment_operator('='),
                            expression(literal('2'))
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'throw',
                          expression(
                            'new',
                            type(qualified_identifier(identifier('Exception'))),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('id')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(literal('2'))
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(identifier('id')),
                                  ';'
                                )
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('test_0_liveness_exception')),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('WriteLine')
                        ),
                        '(',
                        argument_list(
                          argument(expression(literal('"error, test_0_liveness_exception res={0}"'))),
                          ',',
                          argument(expression(identifier('res')))
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)