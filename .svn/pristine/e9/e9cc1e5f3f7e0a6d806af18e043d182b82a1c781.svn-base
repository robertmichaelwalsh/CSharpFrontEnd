compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(struct_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('StructLayout')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('LayoutKind')),
                      '.',
                      identifier('Explicit')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'struct',
            identifier('Doh'),
            '{',
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('0')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('a'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('0')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a1'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('1')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a2'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('2')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a3'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('3')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a4'))),
                ';'
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('StructLayout')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('LayoutKind')),
                      '.',
                      identifier('Explicit')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'class',
            identifier('Doh2'),
            '{',
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('0')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('a'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('0')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a1'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('1')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a2'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('2')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a3'))),
                ';'
              )),
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('3')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('byte'))),
                variable_declarators(variable_declarator(identifier('a4'))),
                ';'
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('StructLayout')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('LayoutKind')),
                      '.',
                      identifier('Explicit')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'class',
            identifier('Doh3'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Doh2')))
            ),
            '{',
            member_declaration(field_declaration(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('FieldOffset')),
                      attribute_arguments(
                        '(',
                        expression(literal('0')),
                        ')'
                      )
                    )),
                  ']'
                ),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('b'))),
                ';'
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Doh'))),
                          variable_declarator(identifier('doh'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Doh3'))),
                          variable_declarator(
                            identifier('doh2'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Doh3'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('bool')),
                          variable_declarator(
                            identifier('success'),
                            '=',
                            variable_initializer(expression(literal('false')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('doh')),
                            '.',
                            identifier('a1')
                          ),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('doh')),
                              '.',
                              identifier('a2')
                            ),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('doh')),
                                '.',
                                identifier('a3')
                              ),
                              assignment_operator('='),
                              expression(
                                expression(
                                  expression(identifier('doh')),
                                  '.',
                                  identifier('a4')
                                ),
                                assignment_operator('='),
                                expression(literal('0'))
                              )
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('doh')),
                            '.',
                            identifier('a')
                          ),
                          assignment_operator('='),
                          expression(literal('1'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('doh')),
                                  '.',
                                  identifier('a1')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('1'))
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(
                                  expression(identifier('doh')),
                                  '.',
                                  identifier('a2')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('0'))
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(
                                expression(identifier('doh')),
                                '.',
                                identifier('a3')
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(literal('0'))
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('doh')),
                              '.',
                              identifier('a4')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('0'))
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('System')),
                                      '.',
                                      identifier('Console')
                                    ),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"Little endian"')))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('success')),
                                  assignment_operator('='),
                                  expression(literal('true'))
                                ),
                                ';'
                              )),
                            '}'
                          )),
                        'else',
                        embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(
                              expression(
                                expression(
                                  expression(
                                    expression(identifier('doh')),
                                    '.',
                                    identifier('a1')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('0'))
                                ),
                                'binary_operator'('&&'),
                                expression(
                                  expression(
                                    expression(identifier('doh')),
                                    '.',
                                    identifier('a2')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('0'))
                                )
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(
                                  expression(identifier('doh')),
                                  '.',
                                  identifier('a3')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('0'))
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(
                                expression(identifier('doh')),
                                '.',
                                identifier('a4')
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(literal('1'))
                            )
                          ),
                          ')',
                          embedded_statement(block(
                              '{',
                              statement(embedded_statement(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('System')),
                                        '.',
                                        identifier('Console')
                                      ),
                                      '.',
                                      identifier('WriteLine')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('"Big endian"')))),
                                    ')'
                                  ),
                                  ';'
                                )),
                              statement(embedded_statement(
                                  expression(
                                    expression(identifier('success')),
                                    assignment_operator('='),
                                    expression(literal('true'))
                                  ),
                                  ';'
                                )),
                              '}'
                            ))
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(identifier('success'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('doh2')),
                            '.',
                            identifier('a1')
                          ),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('doh2')),
                              '.',
                              identifier('a2')
                            ),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('doh2')),
                                '.',
                                identifier('a3')
                              ),
                              assignment_operator('='),
                              expression(
                                expression(
                                  expression(identifier('doh2')),
                                  '.',
                                  identifier('a4')
                                ),
                                assignment_operator('='),
                                expression(literal('0'))
                              )
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('doh2')),
                            '.',
                            identifier('a')
                          ),
                          assignment_operator('='),
                          expression(literal('1'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('doh2')),
                                  '.',
                                  identifier('a1')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('1'))
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(
                                  expression(identifier('doh2')),
                                  '.',
                                  identifier('a2')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('0'))
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(
                                expression(identifier('doh2')),
                                '.',
                                identifier('a3')
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(literal('0'))
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('doh2')),
                              '.',
                              identifier('a4')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('0'))
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('success')),
                                  assignment_operator('='),
                                  expression(literal('true'))
                                ),
                                ';'
                              )),
                            '}'
                          )),
                        'else',
                        embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(
                              expression(
                                expression(
                                  expression(
                                    expression(identifier('doh2')),
                                    '.',
                                    identifier('a1')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('0'))
                                ),
                                'binary_operator'('&&'),
                                expression(
                                  expression(
                                    expression(identifier('doh2')),
                                    '.',
                                    identifier('a2')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('0'))
                                )
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(
                                  expression(identifier('doh2')),
                                  '.',
                                  identifier('a3')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('0'))
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(
                                expression(identifier('doh2')),
                                '.',
                                identifier('a4')
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(literal('1'))
                            )
                          ),
                          ')',
                          embedded_statement(block(
                              '{',
                              statement(embedded_statement(
                                  expression(
                                    expression(identifier('success')),
                                    assignment_operator('='),
                                    expression(literal('true'))
                                  ),
                                  ';'
                                )),
                              '}'
                            ))
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('doh2')),
                            '.',
                            identifier('b')
                          ),
                          assignment_operator('='),
                          expression(literal('3'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('doh2')),
                            '.',
                            identifier('a')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('success')),
                            assignment_operator('='),
                            expression(literal('false'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(identifier('success'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)