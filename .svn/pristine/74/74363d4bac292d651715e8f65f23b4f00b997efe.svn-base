compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('My')),
              attribute_arguments(
                '(',
                expression(
                  '(',
                  type(predefined_type(integral_type('long'))),
                  ')',
                  expression(literal('1'))
                ),
                ')'
              )
            )),
          ']'
        ),
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('My')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('TypeCode')),
                  '.',
                  identifier('Empty')
                ),
                ')'
              )
            )),
          ']'
        ),
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('My')),
              attribute_arguments(
                '(',
                expression(
                  'typeof',
                  '(',
                  type(qualified_identifier(
                      identifier('System'),
                      '.',
                      identifier('Enum')
                    )),
                  ')'
                ),
                ')'
              )
            )),
          ']'
        ),
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Attribute')),
                              '.',
                              identifier('GetCustomAttributes')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('T'))),
                                  ')'
                                )),
                              ',',
                              argument(expression(literal('false')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('a')),
                        '.',
                        identifier('Length')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'foreach',
                    '(',
                    type('predefined_type'('object')),
                    identifier('o'),
                    'in',
                    expression(identifier('a')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('My'))),
                              variable_declarator(
                                identifier('attr'),
                                '=',
                                variable_initializer(expression(
                                    '(',
                                    type(qualified_identifier(identifier('My'))),
                                    ')',
                                    expression(identifier('o'))
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(
                                  expression(
                                    expression(identifier('attr')),
                                    '.',
                                    identifier('obj')
                                  ),
                                  '.',
                                  identifier('GetType')
                                ),
                                '(',
                                ')'
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              'expression'(
                                'typeof',
                                '(',
                                type(predefined_type(integral_type('long'))),
                                ')'
                              )
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(declaration_statement(
                                    local_variable_declaration(
                                      type(predefined_type(integral_type('long'))),
                                      variable_declarator(
                                        identifier('val'),
                                        '=',
                                        variable_initializer(expression(
                                            '(',
                                            type(predefined_type(integral_type('long'))),
                                            ')',
                                            expression(
                                              expression(identifier('attr')),
                                              '.',
                                              identifier('obj')
                                            )
                                          ))
                                      )
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('Console')),
                                        '.',
                                        identifier('WriteLine')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"got value: {0}"'))),
                                        ',',
                                        argument(expression(identifier('val')))
                                      ),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    'if',
                                    '(',
                                    expression(
                                      expression(identifier('val')),
                                      'binary_operator'('overloadable_binary_operator'('!=')),
                                      expression(literal('1'))
                                    ),
                                    ')',
                                    embedded_statement(
                                      'return',
                                      expression(literal('2')),
                                      ';'
                                    )
                                  )),
                                '}'
                              )),
                            'else',
                            embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('attr')),
                                      '.',
                                      identifier('obj')
                                    ),
                                    '.',
                                    identifier('GetType')
                                  ),
                                  '(',
                                  ')'
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                'expression'(
                                  'typeof',
                                  '(',
                                  type(predefined_type(integral_type('int'))),
                                  ')'
                                )
                              ),
                              ')',
                              embedded_statement(block(
                                  '{',
                                  statement(declaration_statement(
                                      local_variable_declaration(
                                        type(predefined_type(integral_type('int'))),
                                        variable_declarator(
                                          identifier('val'),
                                          '=',
                                          variable_initializer(expression(
                                              '(',
                                              type(predefined_type(integral_type('int'))),
                                              ')',
                                              expression(
                                                expression(identifier('attr')),
                                                '.',
                                                identifier('obj')
                                              )
                                            ))
                                        )
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      'if',
                                      '(',
                                      expression(
                                        expression(identifier('val')),
                                        'binary_operator'('overloadable_binary_operator'('!=')),
                                        'expression'(
                                          '(',
                                          type(predefined_type(integral_type('int'))),
                                          ')',
                                          expression(
                                            expression(identifier('TypeCode')),
                                            '.',
                                            identifier('Empty')
                                          )
                                        )
                                      ),
                                      ')',
                                      embedded_statement(
                                        'return',
                                        expression(literal('3')),
                                        ';'
                                      )
                                    )),
                                  '}'
                                )),
                              'else',
                              embedded_statement(block(
                                  '{',
                                  statement(declaration_statement(
                                      local_variable_declaration(
                                        type(qualified_identifier(identifier('Type'))),
                                        variable_declarator(
                                          identifier('t'),
                                          '=',
                                          variable_initializer(expression(
                                              expression(
                                                expression(identifier('attr')),
                                                '.',
                                                identifier('obj')
                                              ),
                                              'as',
                                              type(qualified_identifier(identifier('Type')))
                                            ))
                                        )
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      'if',
                                      '(',
                                      expression(
                                        expression(identifier('t')),
                                        'binary_operator'('overloadable_binary_operator'('==')),
                                        expression(literal('null'))
                                      ),
                                      ')',
                                      embedded_statement(
                                        'return',
                                        expression(literal('4')),
                                        ';'
                                      )
                                    )),
                                  statement(embedded_statement(
                                      'if',
                                      '(',
                                      expression(
                                        expression(identifier('t')),
                                        'binary_operator'('overloadable_binary_operator'('!=')),
                                        'expression'(
                                          'typeof',
                                          '(',
                                          type(qualified_identifier(
                                              identifier('System'),
                                              '.',
                                              identifier('Enum')
                                            )),
                                          ')'
                                        )
                                      ),
                                      ')',
                                      embedded_statement(
                                        'return',
                                        expression(literal('5')),
                                        ';'
                                      )
                                    )),
                                  '}'
                                ))
                            )
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('AttributeUsage')),
              attribute_arguments(
                ambig(
                  '(',
                  expression(
                    expression(identifier('AttributeTargets')),
                    '.',
                    identifier('All')
                  ),
                  ',',
                  expression(
                    expression(identifier('AllowMultiple')),
                    assignment_operator('='),
                    expression(literal('true'))
                  ),
                  ')'
                ),
                ambig(
                  '(',
                  expression(
                    expression(identifier('AttributeTargets')),
                    '.',
                    identifier('All')
                  ),
                  ',',
                  named_argument_list(named_argument(
                      identifier('AllowMultiple'),
                      '=',
                      expression(literal('true'))
                    )),
                  ')'
                )
              )
            )),
          ']'
        ),
        'class',
        identifier('My'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Attribute')))
        ),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type('predefined_type'('object')),
            variable_declarators(variable_declarator(identifier('obj'))),
            ';'
          )),
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('My'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('o')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('obj')),
                      assignment_operator('='),
                      expression(identifier('o'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)