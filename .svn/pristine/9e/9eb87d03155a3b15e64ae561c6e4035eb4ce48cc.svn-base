compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                ambig(
                  '(',
                  expression(
                    expression(identifier('LayoutKind')),
                    '.',
                    identifier('Explicit')
                  ),
                  ',',
                  expression(
                    expression(identifier('Size')),
                    assignment_operator('='),
                    expression(literal('32'))
                  ),
                  ')'
                ),
                ambig(
                  '(',
                  expression(
                    expression(identifier('LayoutKind')),
                    '.',
                    identifier('Explicit')
                  ),
                  ',',
                  named_argument_list(named_argument(
                      identifier('Size'),
                      '=',
                      expression(literal('32'))
                    )),
                  ')'
                )
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('Dummy'),
        '{',
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MarshalAs')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('ByValTStr')
                      ),
                      ',',
                      expression(
                        expression(identifier('SizeConst')),
                        assignment_operator('='),
                        expression(literal('16'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('ByValTStr')
                      ),
                      ',',
                      named_argument_list(named_argument(
                          identifier('SizeConst'),
                          '=',
                          expression(literal('16'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('0')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            type('predefined_type'('string')),
            variable_declarators(variable_declarator(identifier('a'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('X'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Dummy'))),
                      variable_declarator(
                        identifier('dummy'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Dummy'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('dummy')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('"abcd"'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IntPtr'))),
                      variable_declarator(
                        identifier('p'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('AllocHGlobal')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('Marshal')),
                                    '.',
                                    identifier('SizeOf')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        'typeof',
                                        '(',
                                        type(qualified_identifier(identifier('Dummy'))),
                                        ')'
                                      ))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Marshal')),
                        '.',
                        identifier('StructureToPtr')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('dummy'))),
                        ',',
                        argument(expression(identifier('p'))),
                        ',',
                        argument(expression(literal('false')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('ReadByte')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('p'))),
                          ',',
                          argument(expression(literal('0')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0x61'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('ReadByte')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('p'))),
                          ',',
                          argument(expression(literal('1')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0x62'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('ReadByte')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('p'))),
                          ',',
                          argument(expression(literal('2')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0x63'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('ReadByte')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('p'))),
                          ',',
                          argument(expression(literal('3')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0x64'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)