compilation_unit(namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      using_directive(
        'using',
        identifier('System'),
        ';'
      ),
      using_directive(
        'using',
        identifier('System'),
        '.',
        identifier('Reflection'),
        ';'
      ),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Foo'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Sum'),
                '(',
                formal_parameter_list(parameter_array(
                    'params',
                    array_type(
                      type(predefined_type(integral_type('int'))),
                      rank_specifier(
                        '[',
                        ']'
                      )
                    ),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('ret'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type(predefined_type(integral_type('int'))),
                        identifier('a'),
                        'in',
                        expression(identifier('args')),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('ret')),
                            assignment_operator('+='),
                            expression(identifier('a'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(identifier('ret')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('TestInvokeArray'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Foo'))),
                          variable_declarator(
                            identifier('f'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Foo'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('MethodInfo'))),
                          variable_declarator(
                            identifier('m'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type(qualified_identifier(identifier('MethodInfo'))),
                                ')',
                                'expression'(
                                  'expression'(
                                    '(',
                                    expression(
                                      expression(
                                        expression(
                                          expression(
                                            expression(identifier('f')),
                                            '.',
                                            identifier('GetType')
                                          ),
                                          '(',
                                          ')'
                                        ),
                                        '.',
                                        identifier('FindMembers')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(expression(
                                            expression(identifier('MemberTypes')),
                                            '.',
                                            identifier('All')
                                          )),
                                        ',',
                                        argument(expression(
                                            expression(
                                              expression(identifier('BindingFlags')),
                                              '.',
                                              identifier('Public')
                                            ),
                                            '|',
                                            expression(
                                              expression(identifier('BindingFlags')),
                                              '.',
                                              identifier('Static')
                                            )
                                          )),
                                        ',',
                                        argument(expression(
                                            expression(identifier('Type')),
                                            '.',
                                            identifier('FilterName')
                                          )),
                                        ',',
                                        argument(expression(literal('"Sum"')))
                                      ),
                                      ')'
                                    ),
                                    ')'
                                  ),
                                  '[',
                                  expression_list(expression(literal('0'))),
                                  ']'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(predefined_type(integral_type('int'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('numbers'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(predefined_type(integral_type('int'))),
                                '[',
                                expression_list(expression(literal('3'))),
                                ']',
                                array_initializer(
                                  '{',
                                  variable_initializer_list(
                                    variable_initializer(expression(literal('4'))),
                                    ',',
                                    variable_initializer(expression(literal('5'))),
                                    ',',
                                    variable_initializer(expression(literal('6')))
                                  ),
                                  '}'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('object')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('parms'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type('predefined_type'('object')),
                                '[',
                                expression_list(expression(literal('1'))),
                                ']',
                                array_initializer(
                                  '{',
                                  variable_initializer_list(variable_initializer(expression(identifier('numbers')))),
                                  '}'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('sum'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type(predefined_type(integral_type('int'))),
                                ')',
                                expression(
                                  expression(
                                    expression(identifier('m')),
                                    '.',
                                    identifier('Invoke')
                                  ),
                                  '(',
                                  argument_list(
                                    argument(expression(identifier('f'))),
                                    ',',
                                    argument(expression(identifier('parms')))
                                  ),
                                  ')'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"sum is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('sum'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('sum')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('15'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    )))