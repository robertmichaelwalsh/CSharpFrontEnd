compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('private'),
            'modifier'('static'),
            type(array_type(
                type(predefined_type(integral_type('int'))),
                rank_specifier(
                  '[',
                  ']'
                )
              )),
            variable_declarators(variable_declarator(
                identifier('crc_lookup'),
                '=',
                variable_initializer(expression(
                    'new',
                    type(predefined_type(integral_type('int'))),
                    '[',
                    expression_list(expression(literal('256'))),
                    ']'
                  ))
              )),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(array_type(
                type(predefined_type(integral_type('byte'))),
                rank_specifier(
                  '[',
                  ']'
                )
              )),
            variable_declarators(variable_declarator(
                identifier('header_base'),
                '=',
                variable_initializer(expression(
                    'new',
                    type(predefined_type(integral_type('byte'))),
                    '[',
                    expression_list(expression(literal('10'))),
                    ']'
                  ))
              )),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('header'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('internal'),
            type(predefined_type(integral_type('int'))),
            identifier('checksum'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('uint'))),
                      variable_declarator(
                        identifier('crc_reg'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('i'),
                        '=',
                        variable_initializer(expression(literal('5')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('crc_reg')),
                      assignment_operator('='),
                      expression(
                        'expression'(
                          '(',
                          expression(
                            expression(identifier('crc_reg')),
                            'binary_operator'('overloadable_binary_operator'('<<')),
                            expression(literal('8'))
                          ),
                          ')'
                        ),
                        'binary_operator'('overloadable_binary_operator'('^')),
                        'expression'(
                          '(',
                          type(predefined_type(integral_type('uint'))),
                          ')',
                          'expression'(
                            '(',
                            expression(
                              expression(identifier('crc_lookup')),
                              '[',
                              expression_list(expression(
                                  'expression'(
                                    '(',
                                    expression(
                                      'expression'(
                                        '(',
                                        expression(
                                          expression(identifier('crc_reg')),
                                          'binary_operator'('overloadable_binary_operator'('>>')),
                                          expression(literal('24'))
                                        ),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('&')),
                                      expression(literal('0xff'))
                                    ),
                                    ')'
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('^')),
                                  'expression'(
                                    '(',
                                    expression(
                                      expression(
                                        expression(identifier('header_base')),
                                        '[',
                                        expression_list(expression(
                                            expression(identifier('header')),
                                            'binary_operator'('overloadable_binary_operator'('+')),
                                            expression(identifier('i'))
                                          )),
                                        ']'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('&')),
                                      expression(literal('0xff'))
                                    ),
                                    ')'
                                  )
                                )),
                              ']'
                            ),
                            ')'
                          )
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Test'))),
                      variable_declarator(
                        identifier('t1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Test'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('t1')),
                        '.',
                        identifier('checksum')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)