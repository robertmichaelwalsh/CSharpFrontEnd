compilation_unit(namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('intf')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('A'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('virtual'),
                type(predefined_type(integral_type('int'))),
                identifier('method'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(interface_declaration(
            'modifier'('public'),
            'interface',
            identifier('B'),
            '{',
            interface_member_declaration(
              type(predefined_type(integral_type('int'))),
              identifier('method'),
              '(',
              ')',
              ';'
            ),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('C'),
            class_base(
              ':',
              interface_type_list(
                qualified_identifier(identifier('A')),
                ',',
                qualified_identifier(identifier('B'))
              )
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('C'))),
                          variable_declarator(
                            identifier('c'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('C'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('c')),
                              '.',
                              identifier('method')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    )))