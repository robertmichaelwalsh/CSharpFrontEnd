compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Net'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Net'),
    '.',
    identifier('Sockets'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Text'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('T')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(field_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(qualified_identifier(identifier('String'))),
                variable_declarators(variable_declarator(
                    identifier('docroot'),
                    '=',
                    variable_initializer(expression(literal('"/home/dick/mono/install/html"')))
                  )),
                ';'
              )),
            member_declaration(field_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(qualified_identifier(identifier('Hashtable'))),
                variable_declarators(variable_declarator(
                    identifier('mime_types'),
                    '=',
                    variable_initializer(expression(
                        'new',
                        type(qualified_identifier(identifier('Hashtable'))),
                        '(',
                        ')'
                      ))
                  )),
                ';'
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(qualified_identifier(identifier('Socket'))),
                identifier('NetSetup'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Socket'))),
                          variable_declarator(
                            identifier('s'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Socket'))),
                                '(',
                                argument_list(
                                  argument(expression(
                                      expression(identifier('AddressFamily')),
                                      '.',
                                      identifier('InterNetwork')
                                    )),
                                  ',',
                                  argument(expression(
                                      expression(identifier('SocketType')),
                                      '.',
                                      identifier('Stream')
                                    )),
                                  ',',
                                  argument(expression(
                                      expression(identifier('ProtocolType')),
                                      '.',
                                      identifier('Tcp')
                                    ))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('s')),
                            '.',
                            identifier('Bind')
                          ),
                          '(',
                          argument_list(argument(expression(
                                'new',
                                type(qualified_identifier(identifier('IPEndPoint'))),
                                '(',
                                argument_list(
                                  argument(expression(
                                      expression(identifier('IPAddress')),
                                      '.',
                                      identifier('Any')
                                    )),
                                  ',',
                                  argument(expression(literal('8000')))
                                ),
                                ')'
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"Listening on "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('s')),
                                      '.',
                                      identifier('LocalEndPoint')
                                    ),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  ')'
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('s')),
                            '.',
                            identifier('Listen')
                          ),
                          '(',
                          argument_list(argument(expression(literal('5')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(
                          '(',
                          expression(identifier('s')),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(qualified_identifier(identifier('String'))),
                identifier('NetRead'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(predefined_type(integral_type('byte'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('buf'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(predefined_type(integral_type('byte'))),
                                '[',
                                expression_list(expression(literal('256'))),
                                ']'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('count'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('sock')),
                                  '.',
                                  identifier('Receive')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('buf')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('String'))),
                          variable_declarator(
                            identifier('req'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('String'))),
                                '(',
                                argument_list(
                                  argument(expression(
                                      expression(
                                        expression(
                                          expression(identifier('Encoding')),
                                          '.',
                                          identifier('UTF8')
                                        ),
                                        '.',
                                        identifier('GetChars')
                                      ),
                                      '(',
                                      argument_list(argument(expression(identifier('buf')))),
                                      ')'
                                    )),
                                  ',',
                                  argument(expression(literal('0'))),
                                  ',',
                                  argument(expression(identifier('count')))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(
                          '(',
                          expression(identifier('req')),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                'type'('void'),
                identifier('NetWrite'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('data')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(predefined_type(integral_type('byte'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('buf'),
                            '=',
                            variable_initializer(expression(
                                'expression'(
                                  'expression'(
                                    'new',
                                    type(qualified_identifier(identifier('UTF8Encoding'))),
                                    '(',
                                    ')'
                                  ),
                                  '.',
                                  identifier('GetBytes')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('data')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('sock')),
                            '.',
                            identifier('Send')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('buf')))),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                'type'('void'),
                identifier('ReplyHeaders'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('code')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('detail')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('content_type')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('content_opt')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('long'))),
                    identifier('content_length')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(
                                expression(
                                  expression(
                                    expression(
                                      expression(literal('"HTTP/1.0 "')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('code'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('" "'))
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('+')),
                                  expression(identifier('detail'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('"\r\n"'))
                              ))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"Date: Sat, 12 Jan 2002 01:52:56 GMT\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"Server: MIS\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"Last-Modified: Sat, 12 Jan 2002 01:52:56 GMT\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"Connection: close\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('content_length')),
                          'binary_operator'('overloadable_binary_operator'('>')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('NetWrite')),
                                  '(',
                                  argument_list(
                                    argument(expression(identifier('sock'))),
                                    ',',
                                    argument(expression(
                                        expression(
                                          expression(literal('"Content-Length: "')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('content_length'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('"\r\n"'))
                                      ))
                                  ),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(
                                expression(literal('"Content-type: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('content_type'))
                              ))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('content_opt')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('NetWrite')),
                                  '(',
                                  argument_list(
                                    argument(expression(identifier('sock'))),
                                    ',',
                                    argument(expression(
                                        expression(literal('"; "')),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(identifier('content_opt'))
                                      ))
                                  ),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                'type'('void'),
                identifier('NotFound'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('ReplyHeaders')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('404'))),
                            ',',
                            argument(expression(literal('"Not Found"'))),
                            ',',
                            argument(expression(literal('"text/html"'))),
                            ',',
                            argument(expression(literal('"charset=iso-8859-1"'))),
                            ',',
                            argument(expression(literal('0')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"<HTML><HEAD>\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"<TITLE>404 Not Found</TITLE>\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"</HEAD><BODY>\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"<H1>Not Found</H1>\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('NetWrite')),
                          '(',
                          argument_list(
                            argument(expression(identifier('sock'))),
                            ',',
                            argument(expression(literal('"</BODY></HTML>\r\n"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('static'),
                'type'('void'),
                identifier('GetHeaders'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    'out',
                    type(qualified_identifier(identifier('String'))),
                    identifier('req')
                  ),
                  ',',
                  fixed_parameter(
                    'out',
                    type(array_type(
                        type(qualified_identifier(identifier('String'))),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('headers')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('data')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('pos'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('data')),
                                  '.',
                                  identifier('IndexOf')
                                ),
                                '(',
                                argument_list(argument(expression(literal('"\r\n"')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'while',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          'expression'(
                            'unary_operator'('-'),
                            expression(literal('1'))
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"Couldn't isolate request"')))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('data')),
                                  assignment_operator('='),
                                  expression(
                                    expression(identifier('data')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(identifier('NetRead')),
                                      '(',
                                      argument_list(argument(expression(identifier('sock')))),
                                      ')'
                                    )
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('pos')),
                                  assignment_operator('='),
                                  expression(
                                    expression(
                                      expression(identifier('data')),
                                      '.',
                                      identifier('IndexOf')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('"\r\n"')))),
                                    ')'
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('req')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('data')),
                              '.',
                              identifier('Remove')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('pos'))),
                              ',',
                              argument(expression(
                                  expression(
                                    expression(identifier('data')),
                                    '.',
                                    identifier('Length')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('-')),
                                  expression(identifier('pos'))
                                ))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('pos')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('data')),
                              '.',
                              identifier('IndexOf')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"\r\n\r\n"')))),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'while',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          'expression'(
                            'unary_operator'('-'),
                            expression(literal('1'))
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('data')),
                                  assignment_operator('='),
                                  expression(
                                    expression(identifier('data')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(identifier('NetRead')),
                                      '(',
                                      argument_list(argument(expression(identifier('sock')))),
                                      ')'
                                    )
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('pos')),
                                  assignment_operator('='),
                                  expression(
                                    expression(
                                      expression(identifier('data')),
                                      '.',
                                      identifier('IndexOf')
                                    ),
                                    '(',
                                    argument_list(argument(expression(literal('"\r\n\r\n"')))),
                                    ')'
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('String'))),
                          variable_declarator(
                            identifier('hdr'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('data')),
                                  '.',
                                  identifier('Remove')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(literal('0'))),
                                  ',',
                                  argument(expression(
                                      expression(
                                        expression(identifier('req')),
                                        '.',
                                        identifier('Length')
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('2'))
                                    ))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('headers')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('hdr')),
                              '.',
                              identifier('Split')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  'new',
                                  array_type(
                                    type(predefined_type(integral_type('char'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  ),
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(literal(''\r''))),
                                      ',',
                                      variable_initializer(expression(literal(''\n'')))
                                    ),
                                    '}'
                                  )
                                ))),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                'type'('void'),
                identifier('Get'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('data')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('String'))),
                          variable_declarator(identifier('req'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('String'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(identifier('headers'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('GetHeaders')),
                          '(',
                          argument_list(
                            argument(
                              'out',
                              expression(identifier('req'))
                            ),
                            ',',
                            argument(
                              'out',
                              expression(identifier('headers'))
                            ),
                            ',',
                            argument(expression(identifier('data'))),
                            ',',
                            argument(expression(identifier('sock')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('headers')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('headers')),
                                      '[',
                                      expression_list(expression(identifier('i'))),
                                      ']'
                                    ),
                                    '.',
                                    identifier('StartsWith')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"User-Agent: "')))),
                                  ')'
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        expression(
                                          expression(
                                            expression(identifier('Console')),
                                            '.',
                                            identifier('WriteLine')
                                          ),
                                          '(',
                                          argument_list(argument(expression(
                                                expression(identifier('headers')),
                                                '[',
                                                expression_list(expression(identifier('i'))),
                                                ']'
                                              ))),
                                          ')'
                                        ),
                                        ';'
                                      )),
                                    '}'
                                  ))
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('req')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('String')),
                              '.',
                              identifier('Concat')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('docroot'))),
                              ',',
                              argument(expression(
                                  expression(
                                    expression(identifier('req')),
                                    '.',
                                    identifier('Remove')
                                  ),
                                  '(',
                                  argument_list(
                                    argument(expression(literal('0'))),
                                    ',',
                                    argument(expression(literal('4')))
                                  ),
                                  ')'
                                ))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('pos'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('req')),
                                  '.',
                                  identifier('IndexOfAny')
                                ),
                                '(',
                                argument_list(argument(expression(
                                      'new',
                                      array_type(
                                        type(predefined_type(integral_type('char'))),
                                        rank_specifier(
                                          '[',
                                          ']'
                                        )
                                      ),
                                      array_initializer(
                                        '{',
                                        variable_initializer_list(variable_initializer(expression(literal('' '')))),
                                        '}'
                                      )
                                    ))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('>=')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('req')),
                                  assignment_operator('='),
                                  expression(
                                    expression(
                                      expression(identifier('req')),
                                      '.',
                                      identifier('Remove')
                                    ),
                                    '(',
                                    argument_list(
                                      argument(expression(identifier('pos'))),
                                      ',',
                                      argument(expression(
                                          expression(
                                            expression(identifier('req')),
                                            '.',
                                            identifier('Length')
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('-')),
                                          expression(identifier('pos'))
                                        ))
                                    ),
                                    ')'
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('pos')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('req')),
                              '.',
                              identifier('LastIndexOf')
                            ),
                            '(',
                            argument_list(argument(expression(literal(''.'')))),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('String'))),
                          variable_declarator(identifier('filetype'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            'unary_operator'('-'),
                            expression(literal('1'))
                          )
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('filetype')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('req')),
                                '.',
                                identifier('Substring')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('pos')))),
                              ')'
                            )
                          ),
                          ';'
                        ),
                        'else',
                        embedded_statement(
                          expression(
                            expression(identifier('filetype')),
                            assignment_operator('='),
                            expression(literal('""'))
                          ),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('mime_type'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type('predefined_type'('string')),
                                ')',
                                expression(
                                  expression(identifier('mime_types')),
                                  '[',
                                  expression_list(expression(identifier('filetype'))),
                                  ']'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('mime_type')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('mime_type')),
                            assignment_operator('='),
                            expression(literal('"text/plain"'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"File is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('req'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"Mime type is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('mime_type'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(qualified_identifier(identifier('FileStream'))),
                                variable_declarator(
                                  identifier('f'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('FileStream'))),
                                      '(',
                                      argument_list(
                                        argument(expression(identifier('req'))),
                                        ',',
                                        argument(expression(
                                            expression(identifier('FileMode')),
                                            '.',
                                            identifier('Open')
                                          )),
                                        ',',
                                        argument(expression(
                                            expression(identifier('FileAccess')),
                                            '.',
                                            identifier('Read')
                                          ))
                                      ),
                                      ')'
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(array_type(
                                    type(predefined_type(integral_type('byte'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  )),
                                variable_declarator(
                                  identifier('fbuf'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      type(predefined_type(integral_type('byte'))),
                                      '[',
                                      expression_list(expression(literal('256'))),
                                      ']'
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('ReplyHeaders')),
                                '(',
                                argument_list(
                                  argument(expression(identifier('sock'))),
                                  ',',
                                  argument(expression(literal('200'))),
                                  ',',
                                  argument(expression(literal('"OK"'))),
                                  ',',
                                  argument(expression(identifier('mime_type'))),
                                  ',',
                                  argument(expression(literal('null'))),
                                  ',',
                                  argument(expression(
                                      expression(identifier('f')),
                                      '.',
                                      identifier('Length')
                                    ))
                                ),
                                ')'
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(identifier('count'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'while',
                              '(',
                              expression(
                                'expression'(
                                  '(',
                                  expression(
                                    expression(identifier('count')),
                                    assignment_operator('='),
                                    expression(
                                      expression(
                                        expression(identifier('f')),
                                        '.',
                                        identifier('Read')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(expression(identifier('fbuf'))),
                                        ',',
                                        argument(expression(literal('0'))),
                                        ',',
                                        argument(expression(literal('256')))
                                      ),
                                      ')'
                                    )
                                  ),
                                  ')'
                                ),
                                'binary_operator'('overloadable_binary_operator'('>')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('sock')),
                                          '.',
                                          identifier('Send')
                                        ),
                                        '(',
                                        argument_list(
                                          argument(expression(identifier('fbuf'))),
                                          ',',
                                          argument(expression(identifier('count'))),
                                          ',',
                                          argument(expression(
                                              expression(identifier('SocketFlags')),
                                              '.',
                                              identifier('None')
                                            ))
                                        ),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  '}'
                                ))
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('f')),
                                  '.',
                                  identifier('Close')
                                ),
                                '(',
                                ')'
                              ),
                              ';'
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(
                            specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('FileNotFoundException')),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('Console')),
                                          '.',
                                          identifier('WriteLine')
                                        ),
                                        '(',
                                        argument_list(argument(expression(literal('"File not found"')))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      expression(
                                        expression(identifier('NotFound')),
                                        '(',
                                        argument_list(argument(expression(identifier('sock')))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  '}'
                                )
                              )),
                            specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('IOException')),
                              ')',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('Console')),
                                        '.',
                                        identifier('WriteLine')
                                      ),
                                      '(',
                                      argument_list(argument(expression(literal('"IO error"')))),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('NotFound')),
                                      '(',
                                      argument_list(argument(expression(identifier('sock')))),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )
                          ))
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('private'),
                'modifier'('static'),
                'type'('void'),
                identifier('Head'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(qualified_identifier(identifier('Socket'))),
                    identifier('sock')
                  ),
                  ',',
                  fixed_parameter(
                    type(qualified_identifier(identifier('String'))),
                    identifier('data')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('String'))),
                          variable_declarator(identifier('req'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('String'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(identifier('headers'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('GetHeaders')),
                          '(',
                          argument_list(
                            argument(
                              'out',
                              expression(identifier('req'))
                            ),
                            ',',
                            argument(
                              'out',
                              expression(identifier('headers'))
                            ),
                            ',',
                            argument(expression(identifier('data'))),
                            ',',
                            argument(expression(identifier('sock')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('headers')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('headers')),
                                      '[',
                                      expression_list(expression(identifier('i'))),
                                      ']'
                                    ),
                                    '.',
                                    identifier('StartsWith')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"User-Agent: "')))),
                                  ')'
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        expression(
                                          expression(
                                            expression(identifier('Console')),
                                            '.',
                                            identifier('WriteLine')
                                          ),
                                          '(',
                                          argument_list(argument(expression(
                                                expression(identifier('headers')),
                                                '[',
                                                expression_list(expression(identifier('i'))),
                                                ']'
                                              ))),
                                          ')'
                                        ),
                                        ';'
                                      )),
                                    '}'
                                  ))
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('req')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('String')),
                              '.',
                              identifier('Concat')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('docroot'))),
                              ',',
                              argument(expression(
                                  expression(
                                    expression(identifier('req')),
                                    '.',
                                    identifier('Remove')
                                  ),
                                  '(',
                                  argument_list(
                                    argument(expression(literal('0'))),
                                    ',',
                                    argument(expression(literal('5')))
                                  ),
                                  ')'
                                ))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('pos'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('req')),
                                  '.',
                                  identifier('IndexOfAny')
                                ),
                                '(',
                                argument_list(argument(expression(
                                      'new',
                                      array_type(
                                        type(predefined_type(integral_type('char'))),
                                        rank_specifier(
                                          '[',
                                          ']'
                                        )
                                      ),
                                      array_initializer(
                                        '{',
                                        variable_initializer_list(variable_initializer(expression(literal('' '')))),
                                        '}'
                                      )
                                    ))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('>=')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('req')),
                                  assignment_operator('='),
                                  expression(
                                    expression(
                                      expression(identifier('req')),
                                      '.',
                                      identifier('Remove')
                                    ),
                                    '(',
                                    argument_list(
                                      argument(expression(identifier('pos'))),
                                      ',',
                                      argument(expression(
                                          expression(
                                            expression(identifier('req')),
                                            '.',
                                            identifier('Length')
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('-')),
                                          expression(identifier('pos'))
                                        ))
                                    ),
                                    ')'
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('pos')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('req')),
                              '.',
                              identifier('LastIndexOf')
                            ),
                            '(',
                            argument_list(argument(expression(literal(''.'')))),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(identifier('filetype'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('pos')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            'unary_operator'('-'),
                            expression(literal('1'))
                          )
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('filetype')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('req')),
                                '.',
                                identifier('Substring')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('pos')))),
                              ')'
                            )
                          ),
                          ';'
                        ),
                        'else',
                        embedded_statement(
                          expression(
                            expression(identifier('filetype')),
                            assignment_operator('='),
                            expression(literal('""'))
                          ),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('mime_type'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type('predefined_type'('string')),
                                ')',
                                expression(
                                  expression(identifier('mime_types')),
                                  '[',
                                  expression_list(expression(identifier('filetype'))),
                                  ']'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('mime_type')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('mime_type')),
                            assignment_operator('='),
                            expression(literal('"text/plain"'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"File is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('req'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"Mime type is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('mime_type'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(qualified_identifier(identifier('FileStream'))),
                                variable_declarator(
                                  identifier('f'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      type(qualified_identifier(identifier('FileStream'))),
                                      '(',
                                      argument_list(
                                        argument(expression(identifier('req'))),
                                        ',',
                                        argument(expression(
                                            expression(identifier('FileMode')),
                                            '.',
                                            identifier('Open')
                                          )),
                                        ',',
                                        argument(expression(
                                            expression(identifier('FileAccess')),
                                            '.',
                                            identifier('Read')
                                          ))
                                      ),
                                      ')'
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(array_type(
                                    type(predefined_type(integral_type('byte'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  )),
                                variable_declarator(
                                  identifier('fbuf'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      type(predefined_type(integral_type('byte'))),
                                      '[',
                                      expression_list(expression(literal('256'))),
                                      ']'
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('ReplyHeaders')),
                                '(',
                                argument_list(
                                  argument(expression(identifier('sock'))),
                                  ',',
                                  argument(expression(literal('200'))),
                                  ',',
                                  argument(expression(literal('"OK"'))),
                                  ',',
                                  argument(expression(identifier('mime_type'))),
                                  ',',
                                  argument(expression(literal('null'))),
                                  ',',
                                  argument(expression(
                                      expression(identifier('f')),
                                      '.',
                                      identifier('Length')
                                    ))
                                ),
                                ')'
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('f')),
                                  '.',
                                  identifier('Close')
                                ),
                                '(',
                                ')'
                              ),
                              ';'
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(
                            specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('FileNotFoundException')),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('Console')),
                                          '.',
                                          identifier('WriteLine')
                                        ),
                                        '(',
                                        argument_list(argument(expression(literal('"File not found"')))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      expression(
                                        expression(identifier('NotFound')),
                                        '(',
                                        argument_list(argument(expression(identifier('sock')))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  '}'
                                )
                              )),
                            specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('IOException')),
                              ')',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('Console')),
                                        '.',
                                        identifier('WriteLine')
                                      ),
                                      '(',
                                      argument_list(argument(expression(literal('"IO error"')))),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('NotFound')),
                                      '(',
                                      argument_list(argument(expression(identifier('sock')))),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )
                          ))
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('mime_types')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(
                            argument(expression(literal('".html"'))),
                            ',',
                            argument(expression(literal('"text/html"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('mime_types')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(
                            argument(expression(literal('".jpeg"'))),
                            ',',
                            argument(expression(literal('"image/jpeg"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('mime_types')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(
                            argument(expression(literal('".png"'))),
                            ',',
                            argument(expression(literal('"image/png"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('mime_types')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(
                            argument(expression(literal('".cs"'))),
                            ',',
                            argument(expression(literal('"text/plain"')))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('args')),
                              '.',
                              identifier('Length')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('2'))
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('args')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('"--root"'))
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('docroot')),
                                  assignment_operator('='),
                                  expression(
                                    expression(identifier('args')),
                                    '[',
                                    expression_list(expression(literal('1'))),
                                    ']'
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Socket'))),
                          variable_declarator(
                            identifier('s'),
                            '=',
                            variable_initializer(expression(
                                expression(identifier('NetSetup')),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'while',
                        '(',
                        expression(literal('true')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(declaration_statement(
                                local_variable_declaration(
                                  type(qualified_identifier(identifier('Socket'))),
                                  variable_declarator(
                                    identifier('newsock'),
                                    '=',
                                    variable_initializer(expression(
                                        expression(
                                          expression(identifier('s')),
                                          '.',
                                          identifier('Accept')
                                        ),
                                        '(',
                                        ')'
                                      ))
                                  )
                                ),
                                ';'
                              )),
                            statement(declaration_statement(
                                local_variable_declaration(
                                  type(qualified_identifier(identifier('String'))),
                                  variable_declarator(
                                    identifier('req'),
                                    '=',
                                    variable_initializer(expression(
                                        expression(identifier('NetRead')),
                                        '(',
                                        argument_list(argument(expression(identifier('newsock')))),
                                        ')'
                                      ))
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('String')),
                                      '.',
                                      identifier('Compare')
                                    ),
                                    '(',
                                    argument_list(
                                      argument(expression(identifier('req'))),
                                      ',',
                                      argument(expression(literal('0'))),
                                      ',',
                                      argument(expression(literal('"GET "'))),
                                      ',',
                                      argument(expression(literal('0'))),
                                      ',',
                                      argument(expression(literal('4')))
                                    ),
                                    ')'
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('0'))
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        expression(
                                          expression(identifier('Get')),
                                          '(',
                                          argument_list(
                                            argument(expression(identifier('newsock'))),
                                            ',',
                                            argument(expression(identifier('req')))
                                          ),
                                          ')'
                                        ),
                                        ';'
                                      )),
                                    '}'
                                  )),
                                'else',
                                embedded_statement(
                                  'if',
                                  '(',
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('String')),
                                        '.',
                                        identifier('Compare')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(expression(identifier('req'))),
                                        ',',
                                        argument(expression(literal('0'))),
                                        ',',
                                        argument(expression(literal('"HEAD "'))),
                                        ',',
                                        argument(expression(literal('0'))),
                                        ',',
                                        argument(expression(literal('5')))
                                      ),
                                      ')'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('==')),
                                    expression(literal('0'))
                                  ),
                                  ')',
                                  embedded_statement(block(
                                      '{',
                                      statement(embedded_statement(
                                          expression(
                                            expression(identifier('Head')),
                                            '(',
                                            argument_list(
                                              argument(expression(identifier('newsock'))),
                                              ',',
                                              argument(expression(identifier('req')))
                                            ),
                                            ')'
                                          ),
                                          ';'
                                        )),
                                      '}'
                                    )),
                                  'else',
                                  embedded_statement(block(
                                      '{',
                                      statement(embedded_statement(
                                          expression(
                                            expression(
                                              expression(identifier('Console')),
                                              '.',
                                              identifier('WriteLine')
                                            ),
                                            '(',
                                            argument_list(argument(expression(literal('"Unknown method!"')))),
                                            ')'
                                          ),
                                          ';'
                                        )),
                                      statement(embedded_statement(
                                          expression(
                                            expression(
                                              expression(identifier('Console')),
                                              '.',
                                              identifier('WriteLine')
                                            ),
                                            '(',
                                            argument_list(argument(expression(
                                                  expression(
                                                    expression(literal('"["')),
                                                    'binary_operator'('overloadable_binary_operator'('+')),
                                                    expression(identifier('req'))
                                                  ),
                                                  'binary_operator'('overloadable_binary_operator'('+')),
                                                  expression(literal('"]"'))
                                                ))),
                                            ')'
                                          ),
                                          ';'
                                        )),
                                      '}'
                                    ))
                                )
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('newsock')),
                                    '.',
                                    identifier('Close')
                                  ),
                                  '(',
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)