compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Security'),
    '.',
    identifier('Policy'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Container'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('LoaderOptimization')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('LoaderOptimization')),
                      '.',
                      identifier('SingleDomain')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('arg_sum'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'foreach',
                    '(',
                    type('predefined_type'('string')),
                    identifier('s'),
                    'in',
                    expression(identifier('args')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('res')),
                              assignment_operator('+='),
                              expression(
                                expression(
                                  expression(identifier('Convert')),
                                  '.',
                                  identifier('ToInt32')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('s')))),
                                ')'
                              )
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomainSetup'))),
                      variable_declarator(
                        identifier('setup'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AppDomainSetup'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('setup')),
                        '.',
                        identifier('ApplicationBase')
                      ),
                      assignment_operator('='),
                      expression(literal('"."'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CurrentDomain')
                            ),
                            '.',
                            identifier('FriendlyName')
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('newDomain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"NewDomain"'))),
                              ',',
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(identifier('setup')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('string')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('args'),
                        '=',
                        variable_initializer(array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal('"1"'))),
                              ',',
                              variable_initializer(expression(literal('"2"'))),
                              ',',
                              variable_initializer(expression(literal('"3"')))
                            ),
                            '}'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('newDomain')),
                          '.',
                          identifier('ExecuteAssembly')
                        ),
                        '(',
                        argument_list(
                          argument(expression(literal('"appdomain-client.exe"'))),
                          ',',
                          argument(expression(literal('null'))),
                          ',',
                          argument(expression(identifier('args')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(identifier('arg_sum')),
                        '(',
                        argument_list(argument(expression(identifier('args')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"test-ok"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)