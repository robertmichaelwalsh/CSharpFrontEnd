compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(field_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(array_type(
                    type(predefined_type(integral_type('int'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                variable_declarators(variable_declarator(
                    identifier('array'),
                    '=',
                    variable_initializer(array_initializer(
                        '{',
                        variable_initializer_list(
                          variable_initializer(expression(literal('0'))),
                          ',',
                          variable_initializer(expression(literal('1'))),
                          ',',
                          variable_initializer(expression(literal('2'))),
                          ',',
                          variable_initializer(expression(literal('3')))
                        ),
                        '}'
                      ))
                  )),
                ';'
              )),
            member_declaration(field_declaration(
                'modifier'('private'),
                'modifier'('static'),
                type(array_type(
                    type(predefined_type(integral_type('int'))),
                    rank_specifier(
                      '[',
                      ',',
                      ']'
                    )
                  )),
                variable_declarators(variable_declarator(
                    identifier('bar'),
                    '=',
                    variable_initializer(array_initializer(
                        '{',
                        variable_initializer_list(
                          variable_initializer(array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('0'))),
                                ',',
                                variable_initializer(expression(literal('1')))
                              ),
                              '}'
                            )),
                          ',',
                          variable_initializer(array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('4'))),
                                ',',
                                variable_initializer(expression(literal('5')))
                              ),
                              '}'
                            )),
                          ',',
                          variable_initializer(array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('10'))),
                                ',',
                                variable_initializer(expression(literal('20')))
                              ),
                              '}'
                            ))
                        ),
                        '}'
                      ))
                  )),
                ';'
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('num'),
                            '=',
                            variable_initializer(expression(literal('1')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('t'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type(predefined_type(integral_type('int'))),
                        identifier('i'),
                        'in',
                        expression(identifier('array')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(
                                    expression(identifier('t')),
                                    'unary_assignment_operator'('++')
                                  )
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(identifier('num')),
                                  ';'
                                )
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('0')),
                              ',',
                              expression(literal('0'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('0')),
                              ',',
                              expression(literal('1'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('1')),
                              ',',
                              expression(literal('0'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('4'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('1')),
                              ',',
                              expression(literal('1'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('5'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('2')),
                              ',',
                              expression(literal('0'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('10'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('bar')),
                            '[',
                            expression_list(
                              expression(literal('2')),
                              ',',
                              expression(literal('1'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('20'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('num')),
                          'unary_assignment_operator'('++')
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(predefined_type(integral_type('short'))),
                              rank_specifier(
                                '[',
                                ',',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('j'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(predefined_type(integral_type('short'))),
                                '[',
                                expression_list(
                                  expression(literal('4')),
                                  ',',
                                  expression(literal('2'))
                                ),
                                ']',
                                array_initializer(
                                  '{',
                                  variable_initializer_list(
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('0'))),
                                          ',',
                                          variable_initializer(expression(literal('1')))
                                        ),
                                        '}'
                                      )),
                                    ',',
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('2'))),
                                          ',',
                                          variable_initializer(expression(literal('3')))
                                        ),
                                        '}'
                                      )),
                                    ',',
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('4'))),
                                          ',',
                                          variable_initializer(expression(literal('5')))
                                        ),
                                        '}'
                                      )),
                                    ',',
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('6'))),
                                          ',',
                                          variable_initializer(expression(literal('7')))
                                        ),
                                        '}'
                                      ))
                                  ),
                                  '}'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('j')),
                            '[',
                            expression_list(
                              expression(literal('1')),
                              ',',
                              expression(literal('1'))
                            ),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)