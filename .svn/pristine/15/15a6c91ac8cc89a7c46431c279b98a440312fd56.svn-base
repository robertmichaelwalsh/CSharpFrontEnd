compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(enum_declaration(
              'modifier'('public'),
              'enum',
              identifier('MyEnum'),
              '{',
              enum_member_declarations(
                enum_member_declaration(identifier('ZERO')),
                ',',
                enum_member_declaration(identifier('ONE'))
              ),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MyEnum'))),
                      variable_declarator(
                        identifier('en'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('MyEnum')),
                            '.',
                            identifier('ONE')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IComparable'))),
                      variable_declarator(identifier('ic'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(identifier('en')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('ic')),
                      assignment_operator('='),
                      expression(
                        '(',
                        type(qualified_identifier(identifier('IComparable'))),
                        ')',
                        expression(identifier('o'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('ic')),
                      assignment_operator('='),
                      expression(
                        'expression'(
                          '(',
                          type('predefined_type'('object')),
                          ')',
                          expression(identifier('en'))
                        ),
                        'as',
                        type(qualified_identifier(identifier('IComparable')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ic')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)