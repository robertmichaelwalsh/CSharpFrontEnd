compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Fib'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('fib'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('n')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('n')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('fib')),
                        '(',
                        argument_list(argument(expression(
                              expression(identifier('n')),
                              'binary_operator'('overloadable_binary_operator'('-')),
                              expression(literal('2'))
                            ))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(
                        expression(identifier('fib')),
                        '(',
                        argument_list(argument(expression(
                              expression(identifier('n')),
                              'binary_operator'('overloadable_binary_operator'('-')),
                              expression(literal('1'))
                            ))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('repeat'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('args')),
                        '.',
                        identifier('Length')
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('repeat')),
                        assignment_operator('='),
                        expression(
                          expression(
                            expression(identifier('Convert')),
                            '.',
                            identifier('ToInt32')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('args')),
                                '[',
                                expression_list(expression(literal('0'))),
                                ']'
                              ))),
                          ')'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('repeat')),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(literal('32'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"{0}"'))),
                                ',',
                                argument(expression(
                                    expression(identifier('fib')),
                                    '(',
                                    argument_list(argument(expression(identifier('repeat')))),
                                    ')'
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('0')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(identifier('repeat'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('fib')),
                          '(',
                          argument_list(argument(expression(literal('32')))),
                          ')'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('3524578'))
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)