compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Assembly'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(
                                expression(identifier('AppDomain')),
                                '.',
                                identifier('CurrentDomain')
                              ),
                              '.',
                              identifier('Load')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"mscorlib"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('CreateInstance')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"System.Exception"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('o')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('o')),
                          'is',
                          type(qualified_identifier(
                              identifier('System'),
                              '.',
                              identifier('Exception')
                            ))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('args'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('object')),
                            '[',
                            expression_list(expression(literal('2'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('args')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal(''X''))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('args')),
                        '[',
                        expression_list(expression(literal('1'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('10'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('o')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Activator')),
                          '.',
                          identifier('CreateInstance')
                        ),
                        '(',
                        argument_list(
                          argument(expression(
                              'typeof',
                              '(',
                              type(qualified_identifier(
                                  identifier('System'),
                                  '.',
                                  identifier('String')
                                )),
                              ')'
                            )),
                          ',',
                          argument(expression(identifier('args')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('o')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('o')),
                          'is',
                          type(qualified_identifier(
                              identifier('System'),
                              '.',
                              identifier('String')
                            ))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(literal('"XXXXXXXXXX"')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('o')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"got: {0}"'))),
                                ',',
                                argument(expression(identifier('o')))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('5')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)