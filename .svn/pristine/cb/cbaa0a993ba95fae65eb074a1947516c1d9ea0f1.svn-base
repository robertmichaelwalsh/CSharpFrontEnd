compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Ex2'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(literal('10')),
                        'binary_operator'('overloadable_binary_operator'('/')),
                        expression(identifier('a'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('test')),
                            '(',
                            argument_list(argument(expression(literal('1')))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('test')),
                            '(',
                            argument_list(argument(expression(literal('0')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(general_catch_clause(
                        'catch',
                        block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('res')),
                                assignment_operator('='),
                                expression(literal('0'))
                              ),
                              ';'
                            )),
                          '}'
                        )
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)