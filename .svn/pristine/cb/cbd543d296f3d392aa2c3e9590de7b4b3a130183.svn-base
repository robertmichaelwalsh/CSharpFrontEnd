compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('CompilerServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MethodImplAttribute')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('MethodImplOptions')),
                      '.',
                      identifier('Synchronized')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('test'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Exit')
                      ),
                      '(',
                      argument_list(argument(expression('this'))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Enter')
                      ),
                      '(',
                      argument_list(argument(expression('this'))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(literal('2')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MethodImplAttribute')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('MethodImplOptions')),
                      '.',
                      identifier('Synchronized')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_static'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Exit')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Test'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Enter')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Test'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(literal('2')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MethodImplAttribute')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('MethodImplOptions')),
                      '.',
                      identifier('Synchronized')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('test_exception'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Exit')
                      ),
                      '(',
                      argument_list(argument(expression('this'))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'throw',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('Exception'))),
                      '(',
                      argument_list(argument(expression(literal('"A"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MethodImplAttribute')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('MethodImplOptions')),
                      '.',
                      identifier('Synchronized')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('virtual'),
            type(predefined_type(integral_type('int'))),
            identifier('test_virtual'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Exit')
                      ),
                      '(',
                      argument_list(argument(expression('this'))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Monitor')),
                        '.',
                        identifier('Enter')
                      ),
                      '(',
                      argument_list(argument(expression('this'))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(literal('2')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('Delegate1'),
              '(',
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(qualified_identifier(identifier('String'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Test'))),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Test'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test1..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('b')),
                        '.',
                        identifier('test')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test2..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('test_static')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test3..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('test_exception')
                            ),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(
                        specific_catch_clauses(specific_catch_clause(
                            'catch',
                            '(',
                            qualified_identifier(identifier('SynchronizationLockException')),
                            identifier('ex'),
                            ')',
                            block(
                              '{',
                              statement(embedded_statement(
                                  'return',
                                  expression(literal('1')),
                                  ';'
                                )),
                              '}'
                            )
                          )),
                        specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test4..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('b')),
                        '.',
                        identifier('test_virtual')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test5..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Delegate1'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Delegate1'))),
                            '(',
                            argument_list(argument(expression(
                                  expression(identifier('b')),
                                  '.',
                                  identifier('test')
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d')),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test6..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('Delegate1'))),
                        '(',
                        argument_list(argument(expression(identifier('test_static')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d')),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test7..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('Delegate1'))),
                        '(',
                        argument_list(argument(expression(
                              expression(identifier('b')),
                              '.',
                              identifier('test_virtual')
                            ))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d')),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test8..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('Delegate1'))),
                        '(',
                        argument_list(argument(expression(
                              expression(identifier('b')),
                              '.',
                              identifier('test_exception')
                            ))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('d')),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(
                        specific_catch_clauses(specific_catch_clause(
                            'catch',
                            '(',
                            qualified_identifier(identifier('SynchronizationLockException')),
                            identifier('ex'),
                            ')',
                            block(
                              '{',
                              statement(embedded_statement(
                                  'return',
                                  expression(literal('2')),
                                  ';'
                                )),
                              '}'
                            )
                          )),
                        specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)