compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('T')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(field_declaration(
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(
                    identifier('name'),
                    '=',
                    variable_initializer(expression(literal('"unset"')))
                  )),
                ';'
              )),
            member_declaration(constructor_declaration(
                identifier('T'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('n')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('name')),
                          assignment_operator('='),
                          expression(identifier('n'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('ArrayList'))),
                          variable_declarator(
                            identifier('tlist'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('ArrayList'))),
                                '(',
                                ')'
                              ))
                          ),
                          ',',
                          variable_declarator(identifier('newlist'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('T'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('tarray'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('T'))),
                                '[',
                                expression_list(expression(literal('2'))),
                                ']'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('T'))),
                          variable_declarator(
                            identifier('t1'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('T'))),
                                '(',
                                argument_list(argument(expression(literal('"t1"')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('T'))),
                          variable_declarator(
                            identifier('t2'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('T'))),
                                '(',
                                argument_list(argument(expression(literal('"t2"')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('tlist')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('t1')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('tlist')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('t2')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('newlist')),
                          assignment_operator('='),
                          expression(
                            '(',
                            type(qualified_identifier(identifier('ArrayList'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('tlist')),
                                '.',
                                identifier('Clone')
                              ),
                              '(',
                              ')'
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('newlist')),
                            '.',
                            identifier('CopyTo')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('tarray')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('tarray')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            ),
                            '.',
                            identifier('name')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"t1"'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('tarray')),
                              '[',
                              expression_list(expression(literal('1'))),
                              ']'
                            ),
                            '.',
                            identifier('name')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"t2"'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('2')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)