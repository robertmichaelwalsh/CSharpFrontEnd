compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Obj')),
      '{',
      namespace_member_declaration(type_declaration(interface_declaration(
            'interface',
            identifier('Measurable'),
            '{',
            interface_member_declaration(
              type('predefined_type'('double')),
              identifier('Area'),
              '(',
              ')',
              ';'
            ),
            '}',
            ';'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Obj'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Measurable')))
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                type('predefined_type'('double')),
                identifier('Area'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('0.0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}',
            ';'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Rect'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Obj')))
            ),
            '{',
            member_declaration(field_declaration(
                type(predefined_type(integral_type('int'))),
                variable_declarators(
                  variable_declarator(identifier('x')),
                  ',',
                  variable_declarator(identifier('y')),
                  ',',
                  variable_declarator(identifier('w')),
                  ',',
                  variable_declarator(identifier('h'))
                ),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('Rect'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vx')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vy')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vw')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vh')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('x')),
                          assignment_operator('='),
                          expression(identifier('vx'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('y')),
                          assignment_operator('='),
                          expression(identifier('vy'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('w')),
                          assignment_operator('='),
                          expression(identifier('vw'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('h')),
                          assignment_operator('='),
                          expression(identifier('vh'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('new'),
                type('predefined_type'('double')),
                identifier('Area'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(
                          'expression'(
                            '(',
                            type('predefined_type'('double')),
                            ')',
                            expression(identifier('w'))
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('h'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Circle'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Obj')))
            ),
            '{',
            member_declaration(field_declaration(
                type(predefined_type(integral_type('int'))),
                variable_declarators(
                  variable_declarator(identifier('x')),
                  ',',
                  variable_declarator(identifier('y')),
                  ',',
                  variable_declarator(identifier('r'))
                ),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('Circle'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vx')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vy')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('vr')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('x')),
                          assignment_operator('='),
                          expression(identifier('vx'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('y')),
                          assignment_operator('='),
                          expression(identifier('vy'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('r')),
                          assignment_operator('='),
                          expression(identifier('vr'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('new'),
                type('predefined_type'('double')),
                identifier('Area'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(
                          expression(
                            expression(identifier('r')),
                            'binary_operator'('overloadable_binary_operator'('*')),
                            expression(identifier('r'))
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(
                            expression(
                              expression(identifier('System')),
                              '.',
                              identifier('Math')
                            ),
                            '.',
                            identifier('PI')
                          )
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('static'),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Obj'))),
                          variable_declarator(identifier('rect')),
                          ',',
                          variable_declarator(identifier('circle'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('double')),
                          variable_declarator(identifier('sum'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('rect')),
                          assignment_operator('='),
                          expression(
                            'new',
                            type(qualified_identifier(identifier('Rect'))),
                            '(',
                            argument_list(
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('10'))),
                              ',',
                              argument(expression(literal('20')))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('circle')),
                          assignment_operator('='),
                          expression(
                            'new',
                            type(qualified_identifier(identifier('Circle'))),
                            '(',
                            argument_list(
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('20')))
                            ),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('sum')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(
                                expression(identifier('rect')),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(
                                expression(identifier('circle')),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('sum')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0.0'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('sum')),
                          assignment_operator('='),
                          expression(
                            'expression'(
                              'expression'(
                                'expression'(
                                  '(',
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('Rect'))),
                                    ')',
                                    expression(identifier('rect'))
                                  ),
                                  ')'
                                ),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            'expression'(
                              'expression'(
                                'expression'(
                                  '(',
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('Circle'))),
                                    ')',
                                    expression(identifier('circle'))
                                  ),
                                  ')'
                                ),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('sum')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            '(',
                            expression(
                              expression(literal('200')),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(
                                expression(literal('400')),
                                'binary_operator'('overloadable_binary_operator'('*')),
                                expression(
                                  expression(
                                    expression(identifier('System')),
                                    '.',
                                    identifier('Math')
                                  ),
                                  '.',
                                  identifier('PI')
                                )
                              )
                            ),
                            ')'
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('2')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('sum')),
                          assignment_operator('='),
                          expression(
                            'expression'(
                              'expression'(
                                'expression'(
                                  '(',
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('Measurable'))),
                                    ')',
                                    expression(identifier('rect'))
                                  ),
                                  ')'
                                ),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            'expression'(
                              'expression'(
                                'expression'(
                                  '(',
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('Measurable'))),
                                    ')',
                                    expression(identifier('circle'))
                                  ),
                                  ')'
                                ),
                                '.',
                                identifier('Area')
                              ),
                              '(',
                              ')'
                            )
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('sum')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0.0'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('3')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}',
            ';'
          ))),
      '}',
      ';'
    ))
)