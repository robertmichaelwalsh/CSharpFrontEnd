compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('VectorList'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('a'),
                '=',
                variable_initializer(expression(literal('1')))
              )),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('b'),
                '=',
                variable_initializer(expression(literal('2')))
              )),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('VectorList'))),
            identifier('TestVectorList'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('VectorList'))),
                identifier('vl')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('VectorList'))),
                      variable_declarator(
                        identifier('v1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('VectorList'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('VectorList'))),
                      variable_declarator(
                        identifier('v2'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('TestVectorList')),
                            '(',
                            argument_list(argument(expression(identifier('v1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('v1')),
                          '.',
                          identifier('a')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('1'))
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('v1')),
                          '.',
                          identifier('b')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('2'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('v2')),
                          '.',
                          identifier('a')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('2'))
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('v2')),
                          '.',
                          identifier('b')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('3'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)