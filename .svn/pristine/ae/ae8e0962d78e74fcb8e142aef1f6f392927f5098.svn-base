compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('TestString'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('"ddd"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('"ddd"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('c'),
                        '=',
                        variable_initializer(expression(literal('"ddda"')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('c')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(
                          expression(identifier('String')),
                          '.',
                          identifier('Concat')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('b'))),
                          ',',
                          argument(expression(literal('"a"')))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(
                            expression(identifier('System')),
                            '.',
                            identifier('Object')
                          ),
                          '.',
                          identifier('ReferenceEquals')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('a'))),
                          ',',
                          argument(expression(identifier('b')))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('System')),
                          '.',
                          identifier('Object')
                        ),
                        '.',
                        identifier('ReferenceEquals')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('c'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(identifier('String')),
                              '.',
                              identifier('Concat')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('b'))),
                              ',',
                              argument(expression(literal('"a"')))
                            ),
                            ')'
                          ))
                      ),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)