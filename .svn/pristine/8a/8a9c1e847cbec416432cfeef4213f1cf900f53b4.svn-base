compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(struct_declaration(
              'modifier'('public'),
              'struct',
              identifier('SimpleStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('Test2'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test2 called"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('SimpleStruct'))),
            identifier('Test1'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"Test1 called "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(identifier('ss')),
                                  '.',
                                  identifier('a')
                                )
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('" "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('b')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('!'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('a')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('!'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('b')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Foo'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                'ref',
                type(predefined_type(integral_type('int'))),
                identifier('x')
              ),
              ',',
              fixed_parameter(
                'ref',
                type(predefined_type(integral_type('int'))),
                identifier('y')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('x')),
                      assignment_operator('='),
                      expression(literal('20'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('y')),
                      assignment_operator('='),
                      expression(literal('30'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('t'),
                        '=',
                        variable_initializer(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Test'))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('m2'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('t')),
                              '.',
                              identifier('GetMethod')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test2"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('m2')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('m1'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('t')),
                              '.',
                              identifier('GetMethod')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test1"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('m1')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('args'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('object')),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('args')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(identifier('ss'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('m1')),
                                '.',
                                identifier('Invoke')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('null'))),
                                ',',
                                argument(expression(identifier('args')))
                              ),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('a')
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('true'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('b')
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('false'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('m3'),
                        '=',
                        variable_initializer(expression(
                            'expression'(
                              'expression'(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('Test'))),
                                ')'
                              ),
                              '.',
                              identifier('GetMethod')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Foo"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('args')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type('predefined_type'('object')),
                        '[',
                        expression_list(expression(literal('2'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('m3')),
                        '.',
                        identifier('Invoke')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('null'))),
                        ',',
                        argument(expression(identifier('args')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(predefined_type(integral_type('int'))),
                              ')',
                              'expression'(
                                '(',
                                expression(
                                  expression(identifier('args')),
                                  '[',
                                  expression_list(expression(literal('0'))),
                                  ']'
                                ),
                                ')'
                              )
                            ),
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('20'))
                        ),
                        ')'
                      ),
                      'binary_operator'('||'),
                      'expression'(
                        '(',
                        expression(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(predefined_type(integral_type('int'))),
                              ')',
                              'expression'(
                                '(',
                                expression(
                                  expression(identifier('args')),
                                  '[',
                                  expression_list(expression(literal('1'))),
                                  ']'
                                ),
                                ')'
                              )
                            ),
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('30'))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)