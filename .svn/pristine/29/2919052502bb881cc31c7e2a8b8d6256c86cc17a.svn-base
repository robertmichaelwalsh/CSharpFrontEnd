compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(enum_declaration(
        'enum',
        identifier('A'),
        '{',
        enum_member_declarations(
          enum_member_declaration(identifier('Hello')),
          ',',
          enum_member_declaration(identifier('Bye'))
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('X'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('num'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('x'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('A')),
                            '.',
                            identifier('Hello')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('y'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('A')),
                            '.',
                            identifier('Bye')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('x'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('y'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(literal('"Hello"')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(
                          expression(
                            expression(identifier('A')),
                            '.',
                            identifier('Hello')
                          ),
                          '.',
                          identifier('ToString')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('x')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('x')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('x')),
                        '.',
                        identifier('Equals')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('y')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('x')),
                        '.',
                        identifier('Equals')
                      ),
                      '(',
                      argument_list(argument(expression(literal('0')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('et'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('x')),
                              '.',
                              identifier('GetType')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('z'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Enum')),
                              '.',
                              identifier('ToObject')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('et'))),
                              ',',
                              argument(expression(
                                  expression(identifier('Int64')),
                                  '.',
                                  identifier('MaxValue')
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('z'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'unary_operator'('-'),
                        expression(literal('1'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('z')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Enum')),
                          '.',
                          identifier('ToObject')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('et'))),
                          ',',
                          argument(expression(literal('0')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('x')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('z')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('z')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Enum')),
                          '.',
                          identifier('ToObject')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('et'))),
                          ',',
                          argument(expression(literal('1')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('y')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('z')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('z')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Enum')),
                          '.',
                          identifier('Parse')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('et'))),
                          ',',
                          argument(expression(literal('"Bye"')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('y')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('z')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('z')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('Enum')),
                                '.',
                                identifier('Parse')
                              ),
                              '(',
                              argument_list(
                                argument(expression(identifier('et'))),
                                ',',
                                argument(expression(literal('"bye"')))
                              ),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(general_catch_clause(
                        'catch',
                        block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('z')),
                                assignment_operator('='),
                                expression(literal('null'))
                              ),
                              ';'
                            )),
                          '}'
                        )
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('z')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('z')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Enum')),
                          '.',
                          identifier('Parse')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('et'))),
                          ',',
                          argument(expression(literal('"bye"'))),
                          ',',
                          argument(expression(literal('true')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('y')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('z')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)