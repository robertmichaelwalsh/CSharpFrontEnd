compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('B'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type(predefined_type(integral_type('int'))),
            identifier('vmethod'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('T'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('B')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type(predefined_type(integral_type('int'))),
            identifier('vmethod'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('stuff'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('stuff'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('char'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('t'),
                        '=',
                        variable_initializer(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('T'))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('B'))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('T'))),
                      variable_declarator(
                        identifier('obj'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('T'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('Type'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('char_types'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Type'))),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']',
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(
                                    'typeof',
                                    '(',
                                    type(predefined_type(integral_type('char'))),
                                    ')'
                                  ))),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('Type'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('int_types'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Type'))),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']',
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(
                                    'typeof',
                                    '(',
                                    type(predefined_type(integral_type('int'))),
                                    ')'
                                  ))),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('int_args'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('object')),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']',
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(literal('1')))),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('char_args'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('object')),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']',
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(
                                    '(',
                                    type(predefined_type(integral_type('char'))),
                                    ')',
                                    expression(literal('1'))
                                  ))),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodBase'))),
                      variable_declarator(identifier('m1')),
                      ',',
                      variable_declarator(identifier('m2'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('bool')),
                      variable_declarator(
                        identifier('ok'),
                        '=',
                        variable_initializer(expression(literal('false')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('m1')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('t')),
                                '.',
                                identifier('GetMethod')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"stuff"'))),
                                ',',
                                argument(expression(
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('Static')
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('BindingFlags')),
                                      '.',
                                      identifier('NonPublic')
                                    )
                                  ))
                              ),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('AmbiguousMatchException')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('ok')),
                                  assignment_operator('='),
                                  expression(literal('true'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(identifier('ok'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('m1')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('t')),
                          '.',
                          identifier('GetMethod')
                        ),
                        '(',
                        argument_list(
                          argument(expression(literal('"stuff"'))),
                          ',',
                          argument(expression(
                              expression(
                                expression(identifier('BindingFlags')),
                                '.',
                                identifier('Static')
                              ),
                              '|',
                              expression(
                                expression(identifier('BindingFlags')),
                                '.',
                                identifier('NonPublic')
                              )
                            )),
                          ',',
                          argument(expression(literal('null'))),
                          ',',
                          argument(expression(identifier('char_types'))),
                          ',',
                          argument(expression(literal('null')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"m1: {0}"'))),
                        ',',
                        argument(expression(identifier('m1')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('m1')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('m1res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('m1')),
                              '.',
                              identifier('Invoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(identifier('char_args')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"m1 invoke: {0}"'))),
                        ',',
                        argument(expression(identifier('m1res')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('m1res'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('ok')),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('m1res')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('m1')),
                                '.',
                                identifier('Invoke')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('null'))),
                                ',',
                                argument(expression(identifier('int_args')))
                              ),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ArgumentException')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('ok')),
                                  assignment_operator('='),
                                  expression(literal('true'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(identifier('ok'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('m2')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('b')),
                          '.',
                          identifier('GetMethod')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"vmethod"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"m2: {0}, declaring: {1}, reflected: {2}"'))),
                        ',',
                        argument(expression(identifier('m2'))),
                        ',',
                        argument(expression(
                            expression(identifier('m2')),
                            '.',
                            identifier('DeclaringType')
                          )),
                        ',',
                        argument(expression(
                            expression(identifier('m2')),
                            '.',
                            identifier('ReflectedType')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('m2res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('m2')),
                              '.',
                              identifier('Invoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('obj'))),
                              ',',
                              argument(expression(literal('null')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('m1res'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)