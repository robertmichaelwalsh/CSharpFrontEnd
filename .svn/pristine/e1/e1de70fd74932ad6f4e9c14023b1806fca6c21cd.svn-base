compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('private'),
            'modifier'('static'),
            type(qualified_identifier(identifier('IntPtr'))),
            variable_declarators(variable_declarator(
                identifier('i'),
                '=',
                variable_initializer(expression(
                    expression(identifier('IntPtr')),
                    '.',
                    identifier('Zero')
                  ))
              )),
            ';'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('IntPtr'))),
            identifier('nati'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(
                            expression(identifier('IntPtr')),
                            '.',
                            identifier('Zero')
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('i')),
                                  assignment_operator('='),
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('IntPtr'))),
                                    ')',
                                    expression(literal('10001'))
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(identifier('i')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(
                            expression(identifier('IntPtr')),
                            '.',
                            identifier('Zero')
                          )
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('i')),
                                  assignment_operator('='),
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('IntPtr'))),
                                    ')',
                                    expression(literal('10001'))
                                  )
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(identifier('i')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('IntPtr'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('nati'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('IntPtr'))),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('nati')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(
                        expression(identifier('Test')),
                        '.',
                        identifier('nati')
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"nati [0] "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('nati')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)