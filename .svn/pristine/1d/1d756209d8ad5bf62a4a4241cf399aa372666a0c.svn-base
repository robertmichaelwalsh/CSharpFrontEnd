compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Obj')),
      '{',
      namespace_member_declaration(type_declaration(interface_declaration(
            'interface',
            identifier('Bah'),
            '{',
            interface_member_declaration(
              type(predefined_type(integral_type('int'))),
              identifier('H'),
              '(',
              ')',
              ';'
            ),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('A'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Bah')))
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('F'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('virtual'),
                type(predefined_type(integral_type('int'))),
                identifier('G'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('2')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('H'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('10')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('B'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('A')))
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('new'),
                type(predefined_type(integral_type('int'))),
                identifier('F'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('3')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('override'),
                type(predefined_type(integral_type('int'))),
                identifier('G'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('4')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('new'),
                type(predefined_type(integral_type('int'))),
                identifier('H'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('11')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('static'),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('result'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('B'))),
                          variable_declarator(
                            identifier('b'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('B'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('A'))),
                          variable_declarator(
                            identifier('a'),
                            '=',
                            variable_initializer(expression(identifier('b')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('F')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('0'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('F')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('1'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('G')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('4'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('2'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('G')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('4'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('3'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('H')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('10'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('4'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('H')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('11'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('5'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            'expression'(
                              'expression'(
                                '(',
                                expression(
                                  '(',
                                  type(qualified_identifier(identifier('A'))),
                                  ')',
                                  expression(identifier('b'))
                                ),
                                ')'
                              ),
                              '.',
                              identifier('H')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('10'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('6'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            'expression'(
                              'expression'(
                                '(',
                                expression(
                                  '(',
                                  type(qualified_identifier(identifier('B'))),
                                  ')',
                                  expression(identifier('a'))
                                ),
                                ')'
                              ),
                              '.',
                              identifier('H')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('11'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('result')),
                            assignment_operator('|='),
                            expression(
                              expression(literal('1')),
                              'binary_operator'('overloadable_binary_operator'('<<')),
                              expression(literal('7'))
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(identifier('result')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}',
            ';'
          ))),
      '}',
      ';'
    ))
)