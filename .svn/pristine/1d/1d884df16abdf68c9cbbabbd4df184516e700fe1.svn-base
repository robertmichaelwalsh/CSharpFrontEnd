compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Security'),
    '.',
    identifier('Policy'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Serialization'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Container'),
        '{',
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('c2'),
              ':',
              interface_type_list(qualified_identifier(identifier('ISerializable'))),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('s1'))),
                  ';'
                )),
              member_declaration(constructor_declaration(
                  constructor_modifier('private'),
                  identifier('c2'),
                  '(',
                  formal_parameter_list(
                    fixed_parameter(
                      type(qualified_identifier(identifier('SerializationInfo'))),
                      identifier('info')
                    ),
                    ',',
                    fixed_parameter(
                      type(qualified_identifier(identifier('StreamingContext'))),
                      identifier('context')
                    )
                  ),
                  ')',
                  body(block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('a')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('info')),
                                '.',
                                identifier('GetInt32')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"a"')))),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('s1')),
                            assignment_operator('='),
                            expression(
                              expression(
                                expression(identifier('info')),
                                '.',
                                identifier('GetString')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"s1"')))),
                              ')'
                            )
                          ),
                          ';'
                        )),
                      '}'
                    ))
                )),
              member_declaration(method_declaration(
                  'modifier'('public'),
                  'type'('void'),
                  identifier('GetObjectData'),
                  '(',
                  formal_parameter_list(
                    fixed_parameter(
                      type(qualified_identifier(identifier('SerializationInfo'))),
                      identifier('info')
                    ),
                    ',',
                    fixed_parameter(
                      type(qualified_identifier(identifier('StreamingContext'))),
                      identifier('context')
                    )
                  ),
                  ')',
                  body(block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('info')),
                              '.',
                              identifier('AddValue')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"a"'))),
                              ',',
                              argument(expression(identifier('a')))
                            ),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'if',
                          '(',
                          expression(
                            expression(identifier('s1')),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('null'))
                          ),
                          ')',
                          embedded_statement(
                            expression(
                              expression(
                                expression(identifier('info')),
                                '.',
                                identifier('AddValue')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"s1"'))),
                                ',',
                                argument(expression(identifier('s1')))
                              ),
                              ')'
                            ),
                            ';'
                          ),
                          'else',
                          embedded_statement(
                            expression(
                              expression(
                                expression(identifier('info')),
                                '.',
                                identifier('AddValue')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"s1"'))),
                                ',',
                                argument(expression(literal('"(null)"')))
                              ),
                              ')'
                            ),
                            ';'
                          )
                        )),
                      '}'
                    ))
                )),
              '}'
            ))),
        member_declaration(type_declaration(class_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
                ']'
              ),
              'modifier'('public'),
              'class',
              identifier('c1'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(
                      identifier('a'),
                      '=',
                      variable_initializer(expression(literal('1')))
                    )),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(
                      identifier('b'),
                      '=',
                      variable_initializer(expression(literal('2')))
                    )),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(
                      identifier('s1'),
                      '=',
                      variable_initializer(expression(literal('"TEST1"')))
                    )),
                  ';'
                )),
              member_declaration(field_declaration(
                  attribute_section(
                    '[',
                    attribute_list(attribute(qualified_identifier(identifier('NonSerialized')))),
                    ']'
                  ),
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(
                      identifier('s2'),
                      '=',
                      variable_initializer(expression(literal('"TEST2"')))
                    )),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(qualified_identifier(identifier('c2'))),
                  variable_declarators(variable_declarator(identifier('e1'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Friendly name: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(
                                expression(identifier('AppDomain')),
                                '.',
                                identifier('CurrentDomain')
                              ),
                              '.',
                              identifier('FriendlyName')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomainSetup'))),
                      variable_declarator(
                        identifier('setup'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AppDomainSetup'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('setup')),
                        '.',
                        identifier('ApplicationBase')
                      ),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Directory')),
                          '.',
                          identifier('GetCurrentDirectory')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('newDomain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"NewDomain"'))),
                              ',',
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(identifier('setup')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('c1'))),
                      variable_declarator(
                        identifier('a1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('c1'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '.',
                          identifier('e1')
                        ),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('3'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '.',
                          identifier('e1')
                        ),
                        '.',
                        identifier('s1')
                      ),
                      assignment_operator('='),
                      expression(literal('"SS"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"TEST"'))),
                        ',',
                        argument(expression(identifier('a1')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('c1'))),
                      variable_declarator(
                        identifier('r1'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('c1'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('newDomain')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"TEST"')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r1')),
                          '.',
                          identifier('a')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('1'))
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('r1')),
                          '.',
                          identifier('b')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('2'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('r1')),
                        '.',
                        identifier('s1')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"TEST1"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('r1')),
                        '.',
                        identifier('s2')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r1')),
                          '.',
                          identifier('e1')
                        ),
                        '.',
                        identifier('a')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r1')),
                          '.',
                          identifier('e1')
                        ),
                        '.',
                        identifier('s1')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"SS"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"test-ok"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)