compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('DumpTest'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Ansi')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('CharSet'),
                          '=',
                          expression(
                            expression(identifier('CharSet')),
                            '.',
                            identifier('Ansi')
                          )
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('HexDump'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('data')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"HexDump"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"HexDump"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"HexDump"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('HexDump2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('data')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('CharSet'),
                          '=',
                          expression(
                            expression(identifier('CharSet')),
                            '.',
                            identifier('Unicode')
                          )
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('HexDump1'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('data')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('HexDump')),
                        '(',
                        argument_list(argument(expression(literal('"First test"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('res')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('100769'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('HexDump2')),
                        '(',
                        argument_list(argument(expression(literal('"First test"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('res')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('404'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('HexDump1')),
                        '(',
                        argument_list(argument(expression(literal('"First test"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('res')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1000404'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)