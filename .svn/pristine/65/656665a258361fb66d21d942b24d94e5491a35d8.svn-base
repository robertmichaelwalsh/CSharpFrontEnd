compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Diagnostics'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Modules'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('Run'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Process'))),
                      variable_declarator(
                        identifier('proc'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Process'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('bool')),
                      variable_declarator(identifier('ret'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StartInfo')
                        ),
                        '.',
                        identifier('FileName')
                      ),
                      assignment_operator('='),
                      expression(literal('"wibble-redir"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StartInfo')
                        ),
                        '.',
                        identifier('Arguments')
                      ),
                      assignment_operator('='),
                      expression(literal('"arg1    arg2\targ3 \"arg4a arg4b\""'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StartInfo')
                        ),
                        '.',
                        identifier('UseShellExecute')
                      ),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StartInfo')
                        ),
                        '.',
                        identifier('RedirectStandardInput')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('ret')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('Start')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Start returns "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('ret'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Process is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(
                                expression(identifier('proc')),
                                '.',
                                identifier('ToString')
                              ),
                              '(',
                              ')'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Pid is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('Id')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Handle is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('Handle')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"HandleCount is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('HandleCount')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Writing [foo bar]"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StandardInput')
                        ),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"foo bar"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('System')),
                            '.',
                            identifier('Threading')
                          ),
                          '.',
                          identifier('Thread')
                        ),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('1000')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Writing [wibble wobble]"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StandardInput')
                        ),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"wibble wobble"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('System')),
                            '.',
                            identifier('Threading')
                          ),
                          '.',
                          identifier('Thread')
                        ),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('1000')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Closing stdin"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('proc')),
                          '.',
                          identifier('StandardInput')
                        ),
                        '.',
                        identifier('Close')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Waiting for exit..."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('proc')),
                        '.',
                        identifier('WaitForExit')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Wait returned"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Exit code is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('ExitCode')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Process started at "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('StartTime')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Process ended at "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('proc')),
                              '.',
                              identifier('ExitTime')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('Run')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)