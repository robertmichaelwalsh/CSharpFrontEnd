compilation_unit(namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(enum_declaration(
            'modifier'('public'),
            'enum',
            identifier('YaddaYadda'),
            '{',
            enum_member_declarations(
              enum_member_declaration(identifier('buba')),
              ',',
              enum_member_declaration(identifier('birba')),
              ',',
              enum_member_declaration(identifier('dadoom'))
            ),
            ',',
            '}',
            ';'
          ))),
      namespace_member_declaration(type_declaration(enum_declaration(
            'modifier'('public'),
            'enum',
            identifier('byteenum'),
            ':',
            predefined_type(integral_type('byte')),
            '{',
            enum_member_declarations(
              enum_member_declaration(identifier('zero')),
              ',',
              enum_member_declaration(identifier('one')),
              ',',
              enum_member_declaration(identifier('two')),
              ',',
              enum_member_declaration(identifier('three'))
            ),
            '}'
          ))),
      namespace_member_declaration(type_declaration(enum_declaration(
            'modifier'('public'),
            'enum',
            identifier('longenum'),
            ':',
            predefined_type(integral_type('long')),
            '{',
            enum_member_declarations(
              enum_member_declaration(
                identifier('s0'),
                '=',
                expression(literal('0'))
              ),
              ',',
              enum_member_declaration(
                identifier('s1'),
                '=',
                expression(literal('1'))
              )
            ),
            '}'
          ))),
      namespace_member_declaration(type_declaration(enum_declaration(
            'modifier'('public'),
            'enum',
            identifier('sbyteenum'),
            ':',
            predefined_type(integral_type('sbyte')),
            '{',
            enum_member_declarations(
              enum_member_declaration(identifier('d0')),
              ',',
              enum_member_declaration(identifier('d1'))
            ),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('YaddaYadda'))),
                          variable_declarator(
                            identifier('val'),
                            '=',
                            variable_initializer(expression(
                                expression(identifier('YaddaYadda')),
                                '.',
                                identifier('dadoom')
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('byteenum'))),
                          variable_declarator(
                            identifier('be'),
                            '=',
                            variable_initializer(expression(
                                expression(identifier('byteenum')),
                                '.',
                                identifier('one')
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('val')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(
                            expression(identifier('YaddaYadda')),
                            '.',
                            identifier('dadoom')
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('be')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            '(',
                            type(qualified_identifier(identifier('byteenum'))),
                            ')',
                            expression(literal('1'))
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('2')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    )))