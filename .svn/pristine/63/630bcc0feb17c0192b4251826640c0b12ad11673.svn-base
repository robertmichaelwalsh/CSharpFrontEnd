compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('MutexTest'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(array_type(
                type(qualified_identifier(identifier('Mutex'))),
                rank_specifier(
                  '[',
                  ']'
                )
              )),
            variable_declarators(variable_declarator(identifier('m'))),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('ThreadMethod_A'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[Thread A] - Started....."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(literal('"[Thread A] - Trying to lock mutex "')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('i'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"..."'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('m')),
                                  '[',
                                  expression_list(expression(identifier('i'))),
                                  ']'
                                ),
                                '.',
                                identifier('WaitOne')
                              ),
                              '(',
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(literal('"[Thread A] - m["')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('i'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"] Locked!"'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(literal('"[Thread A] - Now using  mutex ["')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('i'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"]"'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('2000')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('m')),
                                  '[',
                                  expression_list(expression(identifier('i'))),
                                  ']'
                                ),
                                '.',
                                identifier('ReleaseMutex')
                              ),
                              '(',
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(literal('"[Thread A] - Unlocked the mutex ["')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('i'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"]"'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[Thread A] - exiting....."')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('ThreadMethod_B'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[Thread B] - Started....."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('h'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('h')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('h')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(predefined_type(integral_type('int'))),
                              variable_declarator(
                                identifier('i'),
                                '=',
                                variable_initializer(expression(literal('5')))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(literal('"[Thread B] - Trying to lock mutex "')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('" for "'))
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('h'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('" time..."'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('m')),
                                  '[',
                                  expression_list(expression(identifier('i'))),
                                  ']'
                                ),
                                '.',
                                identifier('WaitOne')
                              ),
                              '(',
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(literal('"[Thread B] - m["')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('"] Locked recursively ["'))
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('h'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"] times!"'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('4500')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('h'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('h')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('h')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(predefined_type(integral_type('int'))),
                              variable_declarator(
                                identifier('i'),
                                '=',
                                variable_initializer(expression(literal('5')))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(
                                  expression(identifier('m')),
                                  '[',
                                  expression_list(expression(identifier('i'))),
                                  ']'
                                ),
                                '.',
                                identifier('ReleaseMutex')
                              ),
                              '(',
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(literal('"[Thread B] - Unlocked the mutex ["')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('"] for ["'))
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(identifier('h'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(literal('"] times"'))
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[Thread B] - Finished....."')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('m')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('Mutex'))),
                        '[',
                        expression_list(expression(literal('10'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('m')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(
                          'new',
                          type(qualified_identifier(identifier('Mutex'))),
                          '(',
                          ')'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[  Main  ] - Creating first thread.."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ThreadStart'))),
                      variable_declarator(
                        identifier('Thread_1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('ThreadStart'))),
                            '(',
                            argument_list(argument(expression(identifier('ThreadMethod_A')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[  Main  ] - Creating second thread.."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ThreadStart'))),
                      variable_declarator(
                        identifier('Thread_2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('ThreadStart'))),
                            '(',
                            argument_list(argument(expression(identifier('ThreadMethod_B')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('A'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Thread'))),
                            '(',
                            argument_list(argument(expression(identifier('Thread_1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('B'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Thread'))),
                            '(',
                            argument_list(argument(expression(identifier('Thread_2')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('A')),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('B')),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('500')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"[  Main  ] - Test Ended"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)