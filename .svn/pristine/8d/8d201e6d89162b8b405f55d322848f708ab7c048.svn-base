compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Security'),
    '.',
    identifier('Policy'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Container'),
        '{',
        member_declaration(type_declaration(class_declaration(
              'class',
              identifier('MBRTest'),
              class_base(
                ':',
                interface_type_list(qualified_identifier(identifier('MarshalByRefObject')))
              ),
              '{',
              member_declaration(property_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  identifier('Int'),
                  '{',
                  accessor_declarations(
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type(predefined_type(integral_type('int'))),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_integer"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    ),
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type(predefined_type(integral_type('int'))),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_integer"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  ),
                  '}'
                )),
              member_declaration(property_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  identifier('Str'),
                  '{',
                  accessor_declarations(
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type('predefined_type'('string')),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_string"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    ),
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type('predefined_type'('string')),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_string"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  ),
                  '}'
                )),
              member_declaration(property_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  identifier('Bool'),
                  '{',
                  accessor_declarations(
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type('predefined_type'('bool')),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_bool"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    ),
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type('predefined_type'('bool')),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_bool"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  ),
                  '}'
                )),
              member_declaration(property_declaration(
                  'modifier'('public'),
                  type(array_type(
                      type(predefined_type(integral_type('int'))),
                      rank_specifier(
                        '[',
                        ']'
                      )
                    )),
                  identifier('Arr'),
                  '{',
                  accessor_declarations(
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type(array_type(
                                    type(predefined_type(integral_type('int'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  )),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_array"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    ),
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                type(array_type(
                                    type(predefined_type(integral_type('int'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  )),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CurrentDomain')
                                    ),
                                    '.',
                                    identifier('GetData')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"test_array"')))),
                                  ')'
                                )
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  ),
                  '}'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Friendly name: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(
                                expression(identifier('AppDomain')),
                                '.',
                                identifier('CurrentDomain')
                              ),
                              '.',
                              identifier('FriendlyName')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('newDomain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"NewDomain"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('RemotingServices')),
                          '.',
                          identifier('IsTransparentProxy')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('newDomain')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"test_string"'))),
                        ',',
                        argument(expression(literal('"a"')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('t'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('newDomain')),
                              '.',
                              identifier('GetData')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"test_string"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('t')),
                          '.',
                          identifier('GetType')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'typeof',
                        '(',
                        type('predefined_type'('string')),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type('predefined_type'('string')),
                        ')',
                        expression(
                          expression(
                            expression(identifier('newDomain')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test_string"')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"a"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"test_integer"'))),
                        ',',
                        argument(expression(literal('1')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(
                          expression(
                            expression(identifier('newDomain')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test_integer"')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"test_bool"'))),
                        ',',
                        argument(expression(literal('true')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type('predefined_type'('bool')),
                        ')',
                        expression(
                          expression(
                            expression(identifier('newDomain')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test_bool"')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('true'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"test_bool"'))),
                        ',',
                        argument(expression(literal('false')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        type('predefined_type'('bool')),
                        ')',
                        expression(
                          expression(
                            expression(identifier('newDomain')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test_bool"')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('false'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ta'),
                        '=',
                        variable_initializer(array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal('1'))),
                              ',',
                              variable_initializer(expression(literal('2'))),
                              ',',
                              variable_initializer(expression(literal('3')))
                            ),
                            '}'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('newDomain')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"test_array"'))),
                        ',',
                        argument(expression(identifier('ta')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ca'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(array_type(
                                type(predefined_type(integral_type('int'))),
                                rank_specifier(
                                  '[',
                                  ']'
                                )
                              )),
                            ')',
                            expression(
                              expression(
                                expression(identifier('newDomain')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"test_array"')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('ca')),
                            '[',
                            expression_list(expression(literal('0'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('ca')),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('2'))
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('ca')),
                          '[',
                          expression_list(expression(literal('2'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('3'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('7')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MBRTest'))),
                      variable_declarator(
                        identifier('test'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('MBRTest'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('newDomain')),
                                '.',
                                identifier('CreateInstanceAndUnwrap')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'expression'(
                                      'expression'(
                                        'typeof',
                                        '(',
                                        type(qualified_identifier(identifier('MBRTest'))),
                                        ')'
                                      ),
                                      '.',
                                      identifier('Assembly')
                                    ),
                                    '.',
                                    identifier('FullName')
                                  )),
                                ',',
                                argument(expression(
                                    'expression'(
                                      'typeof',
                                      '(',
                                      type(qualified_identifier(identifier('MBRTest'))),
                                      ')'
                                    ),
                                    '.',
                                    identifier('FullName')
                                  ))
                              ),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('RemotingServices')),
                          '.',
                          identifier('IsTransparentProxy')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('test')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('8')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test')),
                        '.',
                        identifier('Int')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('9')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test')),
                        '.',
                        identifier('Str')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"a"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('10')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test')),
                        '.',
                        identifier('Bool')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('false'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('11')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('ca')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('test')),
                        '.',
                        identifier('Arr')
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('ca')),
                            '[',
                            expression_list(expression(literal('0'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('ca')),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('2'))
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('ca')),
                          '[',
                          expression_list(expression(literal('2'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('3'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('12')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"test-ok"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)