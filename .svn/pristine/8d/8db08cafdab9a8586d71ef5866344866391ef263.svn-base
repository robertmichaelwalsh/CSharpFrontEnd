compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    '.',
    identifier('Emit'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Testing'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Method'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('value')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"Method( {0} )"'))),
                        ',',
                        argument(expression(identifier('value')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('internal'),
              'struct',
              identifier('DelegateList'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('internal'),
                  type(qualified_identifier(identifier('Delegate'))),
                  variable_declarators(variable_declarator(identifier('del'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AssemblyName'))),
                      variable_declarator(
                        identifier('asmName'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AssemblyName'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('asmName')),
                        '.',
                        identifier('Name')
                      ),
                      assignment_operator('='),
                      expression(literal('"DynamicAssembly"'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AssemblyBuilder'))),
                      variable_declarator(
                        identifier('asmBuilder'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(
                                expression(identifier('AppDomain')),
                                '.',
                                identifier('CurrentDomain')
                              ),
                              '.',
                              identifier('DefineDynamicAssembly')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('asmName'))),
                              ',',
                              argument(expression(
                                  expression(identifier('AssemblyBuilderAccess')),
                                  '.',
                                  identifier('Run')
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ModuleBuilder'))),
                      variable_declarator(
                        identifier('modBuilder'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('asmBuilder')),
                              '.',
                              identifier('DefineDynamicModule')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"DynamicModule"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('TypeBuilder'))),
                      variable_declarator(
                        identifier('typeBuilder'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('modBuilder')),
                              '.',
                              identifier('DefineType')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"MyType"'))),
                              ',',
                              argument(expression(
                                  expression(
                                    expression(
                                      expression(identifier('TypeAttributes')),
                                      '.',
                                      identifier('Public')
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('TypeAttributes')),
                                      '.',
                                      identifier('Class')
                                    )
                                  ),
                                  '|',
                                  expression(
                                    expression(identifier('TypeAttributes')),
                                    '.',
                                    identifier('Sealed')
                                  )
                                )),
                              ',',
                              argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(
                                      identifier('System'),
                                      '.',
                                      identifier('MulticastDelegate')
                                    )),
                                  ')'
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ConstructorBuilder'))),
                      variable_declarator(
                        identifier('cb'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('typeBuilder')),
                              '.',
                              identifier('DefineConstructor')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('MethodAttributes')),
                                        '.',
                                        identifier('Public')
                                      ),
                                      '|',
                                      expression(
                                        expression(identifier('MethodAttributes')),
                                        '.',
                                        identifier('HideBySig')
                                      )
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('MethodAttributes')),
                                      '.',
                                      identifier('RTSpecialName')
                                    )
                                  ),
                                  '|',
                                  expression(
                                    expression(identifier('MethodAttributes')),
                                    '.',
                                    identifier('SpecialName')
                                  )
                                )),
                              ',',
                              argument(expression(
                                  expression(identifier('CallingConventions')),
                                  '.',
                                  identifier('Standard')
                                )),
                              ',',
                              argument(expression(
                                  'new',
                                  array_type(
                                    type(qualified_identifier(identifier('Type'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  ),
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(
                                          'typeof',
                                          '(',
                                          type(qualified_identifier(identifier('Object'))),
                                          ')'
                                        )),
                                      ',',
                                      variable_initializer(expression(
                                          'typeof',
                                          '(',
                                          type(qualified_identifier(identifier('IntPtr'))),
                                          ')'
                                        ))
                                    ),
                                    '}'
                                  )
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('cb')),
                        '.',
                        identifier('SetImplementationFlags')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(identifier('MethodImplAttributes')),
                              '.',
                              identifier('Runtime')
                            ),
                            '|',
                            expression(
                              expression(identifier('MethodImplAttributes')),
                              '.',
                              identifier('Managed')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodBuilder'))),
                      variable_declarator(
                        identifier('mb'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('typeBuilder')),
                              '.',
                              identifier('DefineMethod')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('"Invoke"'))),
                              ',',
                              argument(expression(
                                  expression(
                                    expression(
                                      expression(identifier('MethodAttributes')),
                                      '.',
                                      identifier('Public')
                                    ),
                                    '|',
                                    expression(
                                      expression(identifier('MethodAttributes')),
                                      '.',
                                      identifier('Virtual')
                                    )
                                  ),
                                  '|',
                                  expression(
                                    expression(identifier('MethodAttributes')),
                                    '.',
                                    identifier('HideBySig')
                                  )
                                )),
                              ',',
                              argument(expression(
                                  'typeof',
                                  '(',
                                  'type'('void'),
                                  ')'
                                )),
                              ',',
                              argument(expression(
                                  'new',
                                  array_type(
                                    type(qualified_identifier(identifier('Type'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  ),
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(variable_initializer(expression(
                                          'typeof',
                                          '(',
                                          type(predefined_type(integral_type('int'))),
                                          ')'
                                        ))),
                                    '}'
                                  )
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('mb')),
                        '.',
                        identifier('SetImplementationFlags')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(identifier('MethodImplAttributes')),
                              '.',
                              identifier('Runtime')
                            ),
                            '|',
                            expression(
                              expression(identifier('MethodImplAttributes')),
                              '.',
                              identifier('Managed')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ParameterBuilder'))),
                      variable_declarator(
                        identifier('pb'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('mb')),
                              '.',
                              identifier('DefineParameter')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('1'))),
                              ',',
                              argument(expression(
                                  expression(identifier('ParameterAttributes')),
                                  '.',
                                  identifier('HasFieldMarshal')
                                )),
                              ',',
                              argument(expression(literal('"foo"')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('pb')),
                        '.',
                        identifier('SetMarshal')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(identifier('UnmanagedMarshal')),
                              '.',
                              identifier('DefineUnmanagedMarshal')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(identifier('UnmanagedType')),
                                  '.',
                                  identifier('I2')
                                ))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Type'))),
                      variable_declarator(
                        identifier('myDelegateType'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('typeBuilder')),
                              '.',
                              identifier('CreateType')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Delegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Delegate')),
                              '.',
                              identifier('CreateDelegate')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('myDelegateType'))),
                              ',',
                              argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('Testing'))),
                                  ')'
                                )),
                              ',',
                              argument(expression(literal('"Method"')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('d')),
                        '.',
                        identifier('DynamicInvoke')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'new',
                            array_type(
                              type('predefined_type'('object')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(variable_initializer(expression(literal('8')))),
                              '}'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('DelegateList'))),
                      variable_declarator(
                        identifier('delegateList'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('DelegateList'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('delegateList')),
                        '.',
                        identifier('del')
                      ),
                      assignment_operator('='),
                      expression(identifier('d'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IntPtr'))),
                      variable_declarator(
                        identifier('ptr'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('AllocHGlobal')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('Marshal')),
                                    '.',
                                    identifier('SizeOf')
                                  ),
                                  '(',
                                  argument_list(argument(expression(identifier('delegateList')))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Marshal')),
                        '.',
                        identifier('StructureToPtr')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('delegateList'))),
                        ',',
                        argument(expression(identifier('ptr'))),
                        ',',
                        argument(expression(literal('false')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)