compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('X'),
        '{',
        member_declaration(static_constructor_declaration(
            static_constructor_modifiers('static'),
            identifier('X'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('test')),
                        '.',
                        identifier('global')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Y'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('X')))
        ),
        '{',
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Z'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Y')))
        ),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('Z'),
            '(',
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('global'))),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Z'))),
                      variable_declarator(
                        identifier('z'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Z'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('global')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Error"')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('1')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Ok"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)