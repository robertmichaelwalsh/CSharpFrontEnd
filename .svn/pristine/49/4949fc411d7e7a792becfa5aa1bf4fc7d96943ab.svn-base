compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('ArrayList'))),
                          variable_declarator(
                            identifier('a'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('ArrayList'))),
                                '(',
                                argument_list(argument(expression(literal('10')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('i'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('a')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(literal('0')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('a')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(literal('1')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('a')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(literal('2')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('a')),
                            '.',
                            identifier('Add')
                          ),
                          '(',
                          argument_list(argument(expression(literal('3')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type(predefined_type(integral_type('int'))),
                        identifier('elem'),
                        'in',
                        expression(identifier('a')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('elem')),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(
                                    expression(identifier('i')),
                                    'unary_assignment_operator'('++')
                                  )
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(identifier('i')),
                                  ';'
                                )
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)