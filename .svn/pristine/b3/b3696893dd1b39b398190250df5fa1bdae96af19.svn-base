compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(struct_declaration(
        'struct',
        identifier('A1'),
        '{',
        member_declaration(field_declaration(
            type(predefined_type(integral_type('int'))),
            variable_declarators(
              variable_declarator(identifier('i')),
              ',',
              variable_declarator(identifier('j')),
              ',',
              variable_declarator(identifier('k')),
              ',',
              variable_declarator(identifier('l')),
              ',',
              variable_declarator(identifier('m')),
              ',',
              variable_declarator(identifier('n')),
              ',',
              variable_declarator(identifier('o')),
              ',',
              variable_declarator(identifier('p'))
            ),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        'struct',
        identifier('A2'),
        '{',
        member_declaration(field_declaration(
            type(qualified_identifier(identifier('A1'))),
            variable_declarators(
              variable_declarator(identifier('a')),
              ',',
              variable_declarator(identifier('b')),
              ',',
              variable_declarator(identifier('c')),
              ',',
              variable_declarator(identifier('d')),
              ',',
              variable_declarator(identifier('e')),
              ',',
              variable_declarator(identifier('f'))
            ),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('g'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('crash'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(qualified_identifier(identifier('A2'))),
            identifier('get_a2'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('A2'))),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('i'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('j'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('j')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('100000'))
                    ),
                    ';',
                    'expression'(
                      'unary_assignment_operator'('++'),
                      expression(identifier('j'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('i')),
                              assignment_operator('='),
                              expression(
                                expression(
                                  expression(identifier('get_a2')),
                                  '(',
                                  ')'
                                ),
                                '.',
                                identifier('g')
                              )
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                '}'
              ))
          )),
        '}'
      )))
)