compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('MultiThreadExceptionTest'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('result'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('ThreadStart1'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"{0} started"'))),
                        ',',
                        argument(expression(
                            expression(
                              expression(identifier('Thread')),
                              '.',
                              identifier('CurrentThread')
                            ),
                            '.',
                            identifier('Name')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          'try',
                          block(
                            '{',
                            statement(declaration_statement(
                                local_variable_declaration(
                                  type(predefined_type(integral_type('int'))),
                                  variable_declarator(
                                    identifier('i'),
                                    '=',
                                    variable_initializer(expression(literal('0')))
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'try',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      'while',
                                      '(',
                                      expression(literal('true')),
                                      ')',
                                      embedded_statement(block(
                                          '{',
                                          statement(embedded_statement(
                                              expression(
                                                expression(
                                                  expression(identifier('Console')),
                                                  '.',
                                                  identifier('WriteLine')
                                                ),
                                                '(',
                                                argument_list(argument(expression(
                                                      expression(literal('"Count: "')),
                                                      'binary_operator'('overloadable_binary_operator'('+')),
                                                      expression(
                                                        expression(identifier('i')),
                                                        'unary_assignment_operator'('++')
                                                      )
                                                    ))),
                                                ')'
                                              ),
                                              ';'
                                            )),
                                          statement(embedded_statement(
                                              expression(
                                                expression(
                                                  expression(identifier('Thread')),
                                                  '.',
                                                  identifier('Sleep')
                                                ),
                                                '(',
                                                argument_list(argument(expression(literal('100')))),
                                                ')'
                                              ),
                                              ';'
                                            )),
                                          '}'
                                        ))
                                    )),
                                  '}'
                                ),
                                catch_clauses(specific_catch_clauses(specific_catch_clause(
                                      'catch',
                                      '(',
                                      qualified_identifier(identifier('ThreadAbortException')),
                                      identifier('e'),
                                      ')',
                                      block(
                                        '{',
                                        statement(embedded_statement(
                                            expression(
                                              expression(
                                                expression(identifier('Console')),
                                                '.',
                                                identifier('WriteLine')
                                              ),
                                              '(',
                                              argument_list(argument(expression(
                                                    expression(literal('"cought exception level 2 "')),
                                                    'binary_operator'('overloadable_binary_operator'('+')),
                                                    expression(
                                                      expression(identifier('e')),
                                                      '.',
                                                      identifier('ExceptionState')
                                                    )
                                                  ))),
                                              ')'
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(
                                                expression(identifier('Console')),
                                                '.',
                                                identifier('WriteLine')
                                              ),
                                              '(',
                                              argument_list(argument(expression(identifier('e')))),
                                              ')'
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            'if',
                                            '(',
                                            expression(
                                              'expression'(
                                                '(',
                                                type('predefined_type'('string')),
                                                ')',
                                                expression(
                                                  expression(identifier('e')),
                                                  '.',
                                                  identifier('ExceptionState')
                                                )
                                              ),
                                              'binary_operator'('overloadable_binary_operator'('==')),
                                              expression(literal('"STATETEST"'))
                                            ),
                                            ')',
                                            embedded_statement(
                                              expression(
                                                expression(identifier('result')),
                                                assignment_operator('|='),
                                                expression(literal('1'))
                                              ),
                                              ';'
                                            )
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(
                                                expression(identifier('Thread')),
                                                '.',
                                                identifier('ResetAbort')
                                              ),
                                              '(',
                                              ')'
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            'throw',
                                            expression(identifier('e')),
                                            ';'
                                          )),
                                        '}'
                                      )
                                    )))
                              )),
                            '}'
                          ),
                          catch_clauses(specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('ThreadAbortException')),
                                identifier('e'),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('Console')),
                                          '.',
                                          identifier('WriteLine')
                                        ),
                                        '(',
                                        argument_list(argument(expression(
                                              expression(literal('"cought exception level 1 "')),
                                              'binary_operator'('overloadable_binary_operator'('+')),
                                              expression(
                                                expression(identifier('e')),
                                                '.',
                                                identifier('ExceptionState')
                                              )
                                            ))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('Console')),
                                          '.',
                                          identifier('WriteLine')
                                        ),
                                        '(',
                                        argument_list(argument(expression(identifier('e')))),
                                        ')'
                                      ),
                                      ';'
                                    )),
                                  statement(embedded_statement(
                                      'if',
                                      '(',
                                      expression(
                                        expression(
                                          expression(identifier('e')),
                                          '.',
                                          identifier('ExceptionState')
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('==')),
                                        expression(literal('null'))
                                      ),
                                      ')',
                                      embedded_statement(
                                        expression(
                                          expression(identifier('result')),
                                          assignment_operator('|='),
                                          expression(literal('2'))
                                        ),
                                        ';'
                                      )
                                    )),
                                  '}'
                                )
                              )))
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('e'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"cought exception level 0"')))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(identifier('e')))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('result')),
                                  assignment_operator('|='),
                                  expression(literal('4'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Thread')),
                              '.',
                              identifier('ResetAbort')
                            ),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(
                            identifier('System'),
                            '.',
                            identifier('Threading'),
                            '.',
                            identifier('ThreadStateException')
                          ),
                          identifier('e'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('result')),
                                  assignment_operator('|='),
                                  expression(literal('8'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"end"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('result')),
                      assignment_operator('|='),
                      expression(literal('16'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('t1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Thread'))),
                            '(',
                            argument_list(argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('ThreadStart'))),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(identifier('MultiThreadExceptionTest')),
                                        '.',
                                        identifier('ThreadStart1')
                                      ))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('t1')),
                        '.',
                        identifier('Name')
                      ),
                      assignment_operator('='),
                      expression(literal('"Thread 1"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('100')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('t1')),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('200')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('t1')),
                        '.',
                        identifier('Abort')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"STATETEST"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('t1')),
                        '.',
                        identifier('Join')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Result: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('result'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('result')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('27'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)