compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('BinaryWrTest'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MemoryStream'))),
                      variable_declarator(
                        identifier('mr'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('MemoryStream'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('BinaryWriter'))),
                      variable_declarator(
                        identifier('wr'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('BinaryWriter'))),
                            '(',
                            argument_list(argument(expression(identifier('mr')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('wr')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(
                            '(',
                            type(predefined_type(integral_type('byte'))),
                            ')',
                            expression(literal('1'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('wr')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            expression(literal('1'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('wr')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            'expression'(
                              'unary_operator'('-'),
                              expression(literal('1'))
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('byte'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('arr'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('mr')),
                              '.',
                              identifier('ToArray')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Array (should be: 1 1 0 0 0 ff ff ff ff): "')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('a'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(identifier('arr')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('a')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Console')),
                          '.',
                          identifier('Write')
                        ),
                        '(',
                        argument_list(argument(expression(
                              expression(
                                expression(
                                  expression(
                                    expression(identifier('arr')),
                                    '[',
                                    expression_list(expression(identifier('a'))),
                                    ']'
                                  ),
                                  '.',
                                  identifier('ToString')
                                ),
                                '(',
                                argument_list(argument(expression(literal('"x"')))),
                                ')'
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('" "'))
                            ))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('arr')),
                        '.',
                        identifier('Length')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('9'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('arr')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(
                              expression(identifier('arr')),
                              '[',
                              expression_list(expression(literal('1'))),
                              ']'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('1'))
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('arr')),
                              '[',
                              expression_list(expression(literal('2'))),
                              ']'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0'))
                          )
                        ),
                        'binary_operator'('&&'),
                        expression(
                          expression(
                            expression(identifier('arr')),
                            '[',
                            expression_list(expression(literal('3'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0'))
                        )
                      ),
                      'binary_operator'('&&'),
                      expression(
                        expression(
                          expression(identifier('arr')),
                          '[',
                          expression_list(expression(literal('4'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('0'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(
                              expression(identifier('arr')),
                              '[',
                              expression_list(expression(literal('5'))),
                              ']'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0xff'))
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('arr')),
                              '[',
                              expression_list(expression(literal('6'))),
                              ']'
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('0xff'))
                          )
                        ),
                        'binary_operator'('&&'),
                        expression(
                          expression(
                            expression(identifier('arr')),
                            '[',
                            expression_list(expression(literal('7'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0xff'))
                        )
                      ),
                      'binary_operator'('&&'),
                      expression(
                        expression(
                          expression(identifier('arr')),
                          '[',
                          expression_list(expression(literal('8'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('0xff'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"test-ok"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)