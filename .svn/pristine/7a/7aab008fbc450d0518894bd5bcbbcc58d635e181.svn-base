compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('CompilerServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type('predefined_type'('object')),
            identifier('MyClone'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('null')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('T')))
        ),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MethodImplAttribute')),
                  attribute_arguments(
                    '(',
                    expression(
                      expression(identifier('MethodImplOptions')),
                      '.',
                      identifier('InternalCall')
                    ),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('override'),
            'modifier'('extern'),
            type('predefined_type'('object')),
            identifier('MyClone'),
            '(',
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('MyDelegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type('predefined_type'('string')),
                  identifier('name')
                )),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_puts_static"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_puts_static"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('puts_static'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('name')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts_static')),
                      '(',
                      argument_list(argument(expression(literal('"A simple Test for PInvoke 1"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MyDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('MyDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('puts_static')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d')),
                      '(',
                      argument_list(argument(expression(literal('"A simple Test for PInvoke 2"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('args'),
                        '=',
                        variable_initializer(array_initializer(
                            '{',
                            variable_initializer_list(variable_initializer(expression(literal('"A simple Test for PInvoke 3"')))),
                            '}'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('d')),
                        '.',
                        identifier('DynamicInvoke')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('args')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('noimpl'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(qualified_identifier(identifier('Test'))),
                            variable_declarator(
                              identifier('X'),
                              '=',
                              variable_initializer(expression(
                                  'new',
                                  type(qualified_identifier(identifier('Test'))),
                                  '(',
                                  ')'
                                ))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('X')),
                              '.',
                              identifier('MyClone')
                            ),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(general_catch_clause(
                        'catch',
                        block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('noimpl')),
                                assignment_operator('='),
                                expression(literal('1'))
                              ),
                              ';'
                            )),
                          '}'
                        )
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('noimpl')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)