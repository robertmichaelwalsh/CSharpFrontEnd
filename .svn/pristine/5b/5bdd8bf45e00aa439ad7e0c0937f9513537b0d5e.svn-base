compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Hello'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"test"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_string_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"test"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_string_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('static'),
            'modifier'('extern'),
            'type'('void'),
            identifier('printhello'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('array')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('printhello')),
                      '(',
                      argument_list(argument(expression(literal('null')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)