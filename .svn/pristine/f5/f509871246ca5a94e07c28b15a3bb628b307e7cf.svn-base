compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('defaultn'),
                            '=',
                            variable_initializer(expression(literal('"System.Reflection.ParameterAttributes"')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('name'),
                            '=',
                            variable_initializer(expression(identifier('defaultn')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('verbose'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type('predefined_type'('string')),
                        identifier('arg'),
                        'in',
                        expression(identifier('args')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(identifier('arg')),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(literal('"-v"'))
                                ),
                                ')',
                                embedded_statement(
                                  expression(
                                    expression(identifier('verbose')),
                                    assignment_operator('='),
                                    expression(literal('1'))
                                  ),
                                  ';'
                                ),
                                'else',
                                embedded_statement(
                                  expression(
                                    expression(identifier('name')),
                                    assignment_operator('='),
                                    expression(identifier('arg'))
                                  ),
                                  ';'
                                )
                              )),
                            '}'
                          ))
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Type'))),
                          variable_declarator(
                            identifier('t'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('Type')),
                                  '.',
                                  identifier('GetType')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('name')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Array'))),
                          variable_declarator(
                            identifier('values'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('Enum')),
                                  '.',
                                  identifier('GetValues')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('t')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('string')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('names'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('Enum')),
                                  '.',
                                  identifier('GetNames')
                                ),
                                '(',
                                argument_list(argument(expression(identifier('t')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(identifier('i'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('verbose')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(literal('"Enum "')),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(identifier('t')),
                                          '.',
                                          identifier('Name')
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'for',
                                '(',
                                for_initializer(expression(
                                    expression(identifier('i')),
                                    assignment_operator('='),
                                    expression(literal('0'))
                                  )),
                                ';',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('<')),
                                  expression(
                                    expression(identifier('names')),
                                    '.',
                                    identifier('Length')
                                  )
                                ),
                                ';',
                                'expression'(
                                  'unary_assignment_operator'('++'),
                                  expression(identifier('i'))
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        expression(
                                          expression(
                                            expression(identifier('Console')),
                                            '.',
                                            identifier('WriteLine')
                                          ),
                                          '(',
                                          argument_list(
                                            argument(expression(literal('"{0} = {1} (ToString: {2})"'))),
                                            ',',
                                            argument(expression(
                                                expression(identifier('names')),
                                                '[',
                                                expression_list(expression(identifier('i'))),
                                                ']'
                                              )),
                                            ',',
                                            argument(expression(
                                                'expression'(
                                                  'expression'(
                                                    '(',
                                                    expression(
                                                      '(',
                                                      type(predefined_type(integral_type('int'))),
                                                      ')',
                                                      expression(
                                                        expression(
                                                          expression(identifier('values')),
                                                          '.',
                                                          identifier('GetValue')
                                                        ),
                                                        '(',
                                                        argument_list(argument(expression(identifier('i')))),
                                                        ')'
                                                      )
                                                    ),
                                                    ')'
                                                  ),
                                                  '.',
                                                  identifier('ToString')
                                                ),
                                                '(',
                                                ')'
                                              )),
                                            ',',
                                            argument(expression(
                                                expression(
                                                  expression(identifier('values')),
                                                  '.',
                                                  identifier('GetValue')
                                                ),
                                                '(',
                                                argument_list(argument(expression(identifier('i')))),
                                                ')'
                                              ))
                                          ),
                                          ')'
                                        ),
                                        ';'
                                      )),
                                    '}'
                                  ))
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('name')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(identifier('defaultn'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(declaration_statement(
                                local_variable_declaration(
                                  type(array_type(
                                      type('predefined_type'('string')),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    )),
                                  variable_declarator(
                                    identifier('truenames'),
                                    '=',
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('"None"'))),
                                          ',',
                                          variable_initializer(expression(literal('"In"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Out"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Lcid"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Retval"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Optional"'))),
                                          ',',
                                          variable_initializer(expression(literal('"HasDefault"'))),
                                          ',',
                                          variable_initializer(expression(literal('"HasFieldMarshal"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Reserved3"'))),
                                          ',',
                                          variable_initializer(expression(literal('"Reserved4"'))),
                                          ',',
                                          variable_initializer(expression(literal('"ReservedMask"')))
                                        ),
                                        '}'
                                      ))
                                  )
                                ),
                                ';'
                              )),
                            statement(declaration_statement(
                                local_variable_declaration(
                                  type(array_type(
                                      type(predefined_type(integral_type('int'))),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    )),
                                  variable_declarator(
                                    identifier('truevalues'),
                                    '=',
                                    variable_initializer(array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(literal('0'))),
                                          ',',
                                          variable_initializer(expression(literal('1'))),
                                          ',',
                                          variable_initializer(expression(literal('2'))),
                                          ',',
                                          variable_initializer(expression(literal('4'))),
                                          ',',
                                          variable_initializer(expression(literal('8'))),
                                          ',',
                                          variable_initializer(expression(literal('16'))),
                                          ',',
                                          variable_initializer(expression(literal('4096'))),
                                          ',',
                                          variable_initializer(expression(literal('8192'))),
                                          ',',
                                          variable_initializer(expression(literal('16384'))),
                                          ',',
                                          variable_initializer(expression(literal('32768'))),
                                          ',',
                                          variable_initializer(expression(literal('61440')))
                                        ),
                                        '}'
                                      ))
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'for',
                                '(',
                                for_initializer(expression(
                                    expression(identifier('i')),
                                    assignment_operator('='),
                                    expression(literal('0'))
                                  )),
                                ';',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('<')),
                                  expression(
                                    expression(identifier('names')),
                                    '.',
                                    identifier('Length')
                                  )
                                ),
                                ';',
                                'expression'(
                                  'unary_assignment_operator'('++'),
                                  expression(identifier('i'))
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        'if',
                                        '(',
                                        expression(
                                          expression(
                                            expression(identifier('names')),
                                            '[',
                                            expression_list(expression(identifier('i'))),
                                            ']'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('!=')),
                                          expression(
                                            expression(identifier('truenames')),
                                            '[',
                                            expression_list(expression(identifier('i'))),
                                            ']'
                                          )
                                        ),
                                        ')',
                                        embedded_statement(
                                          'return',
                                          expression(
                                            expression(literal('1')),
                                            'binary_operator'('overloadable_binary_operator'('+')),
                                            expression(identifier('i'))
                                          ),
                                          ';'
                                        )
                                      )),
                                    statement(embedded_statement(
                                        'if',
                                        '(',
                                        expression(
                                          'expression'(
                                            '(',
                                            type(predefined_type(integral_type('int'))),
                                            ')',
                                            expression(
                                              expression(
                                                expression(identifier('values')),
                                                '.',
                                                identifier('GetValue')
                                              ),
                                              '(',
                                              argument_list(argument(expression(identifier('i')))),
                                              ')'
                                            )
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('!=')),
                                          expression(
                                            expression(identifier('truevalues')),
                                            '[',
                                            expression_list(expression(identifier('i'))),
                                            ']'
                                          )
                                        ),
                                        ')',
                                        embedded_statement(
                                          'return',
                                          expression(
                                            expression(
                                              expression(literal('1')),
                                              'binary_operator'('overloadable_binary_operator'('+')),
                                              expression(
                                                expression(identifier('names')),
                                                '.',
                                                identifier('Length')
                                              )
                                            ),
                                            'binary_operator'('overloadable_binary_operator'('+')),
                                            expression(identifier('i'))
                                          ),
                                          ';'
                                        )
                                      )),
                                    '}'
                                  ))
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)