compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('extern'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('marshal_test_ref_bool'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        '(',
                        expression(
                          expression(identifier('UnmanagedType')),
                          '.',
                          identifier('I1')
                        ),
                        ')'
                      )
                    )),
                  ']'
                ),
                'ref',
                type('predefined_type'('bool')),
                identifier('b1')
              ),
              ',',
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        '(',
                        expression(
                          expression(identifier('UnmanagedType')),
                          '.',
                          identifier('VariantBool')
                        ),
                        ')'
                      )
                    )),
                  ']'
                ),
                'ref',
                type('predefined_type'('bool')),
                identifier('b2')
              ),
              ',',
              fixed_parameter(
                'ref',
                type('predefined_type'('bool')),
                identifier('b3')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(struct_declaration(
              'struct',
              identifier('BoolStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('i'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  attribute_section(
                    '[',
                    attribute_list(attribute(
                        qualified_identifier(identifier('MarshalAs')),
                        attribute_arguments(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('I1')
                          ),
                          ')'
                        )
                      )),
                    ']'
                  ),
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b1'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  attribute_section(
                    '[',
                    attribute_list(attribute(
                        qualified_identifier(identifier('MarshalAs')),
                        attribute_arguments(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('VariantBool')
                          ),
                          ')'
                        )
                      )),
                    ']'
                  ),
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b2'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b3'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('extern'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('marshal_test_bool_struct'),
            '(',
            formal_parameter_list(fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('BoolStruct'))),
                identifier('s')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('8'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type('predefined_type'('bool')),
                              variable_declarator(
                                identifier('b1'),
                                '=',
                                variable_initializer(expression(
                                    'expression'(
                                      '(',
                                      expression(
                                        expression(identifier('i')),
                                        'binary_operator'('overloadable_binary_operator'('&')),
                                        expression(literal('4'))
                                      ),
                                      ')'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('!=')),
                                    expression(literal('0'))
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(declaration_statement(
                            local_variable_declaration(
                              type('predefined_type'('bool')),
                              variable_declarator(
                                identifier('b2'),
                                '=',
                                variable_initializer(expression(
                                    'expression'(
                                      '(',
                                      expression(
                                        expression(identifier('i')),
                                        'binary_operator'('overloadable_binary_operator'('&')),
                                        expression(literal('2'))
                                      ),
                                      ')'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('!=')),
                                    expression(literal('0'))
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(declaration_statement(
                            local_variable_declaration(
                              type('predefined_type'('bool')),
                              variable_declarator(
                                identifier('b3'),
                                '=',
                                variable_initializer(expression(
                                    'expression'(
                                      '(',
                                      expression(
                                        expression(identifier('i')),
                                        'binary_operator'('overloadable_binary_operator'('&')),
                                        expression(literal('1'))
                                      ),
                                      ')'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('!=')),
                                    expression(literal('0'))
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(declaration_statement(
                            local_variable_declaration(
                              type('predefined_type'('bool')),
                              variable_declarator(
                                identifier('orig_b1'),
                                '=',
                                variable_initializer(expression(identifier('b1')))
                              ),
                              ',',
                              variable_declarator(
                                identifier('orig_b2'),
                                '=',
                                variable_initializer(expression(identifier('b2')))
                              ),
                              ',',
                              variable_declarator(
                                identifier('orig_b3'),
                                '=',
                                variable_initializer(expression(identifier('b3')))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('marshal_test_ref_bool')),
                                '(',
                                argument_list(
                                  argument(expression(identifier('i'))),
                                  ',',
                                  argument(
                                    'ref',
                                    expression(identifier('b1'))
                                  ),
                                  ',',
                                  argument(
                                    'ref',
                                    expression(identifier('b2'))
                                  ),
                                  ',',
                                  argument(
                                    'ref',
                                    expression(identifier('b3'))
                                  )
                                ),
                                ')'
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('1'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('b1')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(identifier('orig_b1'))
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('2'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('b2')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(identifier('orig_b2'))
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('3'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('b3')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(identifier('orig_b3'))
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('4'))
                              ),
                              ';'
                            )
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('8'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('BoolStruct'))),
                              variable_declarator(
                                identifier('s'),
                                '=',
                                variable_initializer(expression(
                                    'new',
                                    type(qualified_identifier(identifier('BoolStruct'))),
                                    '(',
                                    ')'
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('i')
                              ),
                              assignment_operator('='),
                              expression(identifier('i'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b1')
                              ),
                              assignment_operator('='),
                              expression(
                                'expression'(
                                  '(',
                                  expression(
                                    expression(identifier('i')),
                                    'binary_operator'('overloadable_binary_operator'('&')),
                                    expression(literal('4'))
                                  ),
                                  ')'
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b2')
                              ),
                              assignment_operator('='),
                              expression(
                                'expression'(
                                  '(',
                                  expression(
                                    expression(identifier('i')),
                                    'binary_operator'('overloadable_binary_operator'('&')),
                                    expression(literal('2'))
                                  ),
                                  ')'
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b3')
                              ),
                              assignment_operator('='),
                              expression(
                                'expression'(
                                  '(',
                                  expression(
                                    expression(identifier('i')),
                                    'binary_operator'('overloadable_binary_operator'('&')),
                                    expression(literal('1'))
                                  ),
                                  ')'
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              )
                            ),
                            ';'
                          )),
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('BoolStruct'))),
                              variable_declarator(
                                identifier('orig'),
                                '=',
                                variable_initializer(expression(identifier('s')))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('marshal_test_bool_struct')),
                                '(',
                                argument_list(argument(
                                    'ref',
                                    expression(identifier('s'))
                                  )),
                                ')'
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('33'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b1')
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(
                                  expression(identifier('orig')),
                                  '.',
                                  identifier('b1')
                                )
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('34'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b2')
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(
                                  expression(identifier('orig')),
                                  '.',
                                  identifier('b2')
                                )
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('35'))
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('s')),
                                '.',
                                identifier('b3')
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              'expression'(
                                'unary_operator'('!'),
                                expression(
                                  expression(identifier('orig')),
                                  '.',
                                  identifier('b3')
                                )
                              )
                            ),
                            ')',
                            embedded_statement(
                              'return',
                              expression(
                                expression(
                                  expression(literal('4')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('i'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('36'))
                              ),
                              ';'
                            )
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Success"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)