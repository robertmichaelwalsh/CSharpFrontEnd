compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('Foo'),
        '{',
        member_declaration(destructor_declaration(
            '~',
            identifier('Foo'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"FINALIZING IN DOMAIN "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(identifier('AppDomain')),
                                    '.',
                                    identifier('CurrentDomain')
                                  ),
                                  '.',
                                  identifier('FriendlyName')
                                )
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('": "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(
                                expression(
                                  expression(identifier('AppDomain')),
                                  '.',
                                  identifier('CurrentDomain')
                                ),
                                '.',
                                identifier('IsFinalizingForUnload')
                              ),
                              '(',
                              ')'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('SlowFinalize'),
        '{',
        member_declaration(destructor_declaration(
            '~',
            identifier('SlowFinalize'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"FINALIZE1."')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('Thread')),
                              '.',
                              identifier('Sleep')
                            ),
                            '(',
                            argument_list(argument(expression(literal('500')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(literal('"A: "')),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(identifier('ex'))
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"FINALIZE2."')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('AThread'),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('AThread'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'(
                          'new',
                          type(qualified_identifier(identifier('Thread'))),
                          '(',
                          argument_list(argument(expression(
                                'new',
                                type(qualified_identifier(identifier('ThreadStart'))),
                                '(',
                                argument_list(argument(expression(identifier('Run')))),
                                ')'
                              ))),
                          ')'
                        ),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('Run'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          'while',
                          '(',
                          expression(literal('true')),
                          ')',
                          embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('100')))),
                              ')'
                            ),
                            ';'
                          )
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ThreadAbortException')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"Thread aborted correctly."')))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(qualified_identifier(identifier('Serializable')))),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('BThread'),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('BThread'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'(
                          'new',
                          type(qualified_identifier(identifier('Thread'))),
                          '(',
                          argument_list(argument(expression(
                                'new',
                                type(qualified_identifier(identifier('ThreadStart'))),
                                '(',
                                argument_list(argument(expression(identifier('Run')))),
                                ')'
                              ))),
                          ')'
                        ),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('Run'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          'while',
                          '(',
                          expression(literal('true')),
                          ')',
                          embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('100')))),
                              ')'
                            ),
                            ';'
                          )
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ThreadAbortException')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Thread')),
                                    '.',
                                    identifier('Sleep')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('1000000000')))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('UnloadThread'),
        '{',
        member_declaration(field_declaration(
            type(qualified_identifier(identifier('AppDomain'))),
            variable_declarators(variable_declarator(identifier('domain'))),
            ';'
          )),
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('UnloadThread'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('AppDomain'))),
                identifier('domain')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'('this'),
                        '.',
                        identifier('domain')
                      ),
                      assignment_operator('='),
                      expression(identifier('domain'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('Run'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"UNLOAD1"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('AppDomain')),
                        '.',
                        identifier('Unload')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('domain')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"UNLOAD2"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Tests'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('TestDriver')),
                        '.',
                        identifier('RunTests')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Tests'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_unload'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    'expression'(
                      'unary_assignment_operator'('++'),
                      expression(identifier('i'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('AppDomain'))),
                              variable_declarator(
                                identifier('appDomain'),
                                '=',
                                variable_initializer(expression(
                                    expression(
                                      expression(identifier('AppDomain')),
                                      '.',
                                      identifier('CreateDomain')
                                    ),
                                    '(',
                                    argument_list(argument(expression(
                                          expression(literal('"Test-unload"')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ))),
                                    ')'
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('AppDomain')),
                                '.',
                                identifier('Unload')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('appDomain')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_unload_default'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('Unload')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(
                                    expression(identifier('Thread')),
                                    '.',
                                    identifier('GetDomain')
                                  ),
                                  '(',
                                  ')'
                                ))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('CannotUnloadAppDomainException')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'return',
                                expression(literal('0')),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_unload_after_unload'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('domain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test2"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('AppDomain')),
                        '.',
                        identifier('Unload')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('domain')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('Unload')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('domain')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'return',
                                expression(literal('0')),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_is_finalizing'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('domain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test-is-finalizing"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('domain')),
                              '.',
                              identifier('CreateInstanceFromAndUnwrap')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'expression'(
                                    'expression'(
                                      'typeof',
                                      '(',
                                      type(qualified_identifier(identifier('Tests'))),
                                      ')'
                                    ),
                                    '.',
                                    identifier('Assembly')
                                  ),
                                  '.',
                                  identifier('Location')
                                )),
                              ',',
                              argument(expression(literal('"Foo"')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('domain')),
                        '.',
                        identifier('IsFinalizingForUnload')
                      ),
                      '(',
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('AppDomain')),
                        '.',
                        identifier('Unload')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('domain')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_unload_with_active_threads'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('domain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test3"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('domain')),
                              '.',
                              identifier('CreateInstanceFromAndUnwrap')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'expression'(
                                    'expression'(
                                      'typeof',
                                      '(',
                                      type(qualified_identifier(identifier('Tests'))),
                                      ')'
                                    ),
                                    '.',
                                    identifier('Assembly')
                                  ),
                                  '.',
                                  identifier('Location')
                                )),
                              ',',
                              argument(expression(literal('"AThread"')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('100')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('AppDomain')),
                        '.',
                        identifier('Unload')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('domain')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_unload_with_active_threads_timeout'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AppDomain'))),
                      variable_declarator(
                        identifier('domain'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('CreateDomain')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"Test4"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('object')),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('domain')),
                              '.',
                              identifier('CreateInstanceFromAndUnwrap')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'expression'(
                                    'expression'(
                                      'typeof',
                                      '(',
                                      type(qualified_identifier(identifier('Tests'))),
                                      ')'
                                    ),
                                    '.',
                                    identifier('Assembly')
                                  ),
                                  '.',
                                  identifier('Location')
                                )),
                              ',',
                              argument(expression(literal('"BThread"')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('100')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('AppDomain')),
                              '.',
                              identifier('Unload')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('domain')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'return',
                                expression(literal('0')),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)