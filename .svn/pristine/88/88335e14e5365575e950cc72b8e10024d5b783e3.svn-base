compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(enum_declaration(
            'enum',
            identifier('TestingEnum'),
            '{',
            enum_member_declarations(
              enum_member_declaration(identifier('This')),
              ',',
              enum_member_declaration(identifier('Is')),
              ',',
              enum_member_declaration(identifier('A')),
              ',',
              enum_member_declaration(identifier('Test'))
            ),
            '}',
            ';'
          ))),
      namespace_member_declaration(type_declaration(enum_declaration(
            'enum',
            identifier('TestingEnum2'),
            '{',
            enum_member_declarations(
              enum_member_declaration(identifier('This')),
              ',',
              enum_member_declaration(identifier('Is')),
              ',',
              enum_member_declaration(identifier('A')),
              ',',
              enum_member_declaration(identifier('Test'))
            ),
            '}',
            ';'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('num'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Enum'))),
                          variable_declarator(
                            identifier('e1'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('TestingEnum'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Enum'))),
                          variable_declarator(
                            identifier('e2'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('TestingEnum'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Enum'))),
                          variable_declarator(
                            identifier('e3'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('TestingEnum2'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('num'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(
                            expression(
                              expression(identifier('e1')),
                              '.',
                              identifier('Equals')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('e2')))),
                            ')'
                          )
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('num'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('e1')),
                            '.',
                            identifier('Equals')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('e3')))),
                          ')'
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('num'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('TestingEnum')),
                              '.',
                              identifier('Test')
                            ),
                            '.',
                            identifier('Equals')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('TestingEnum2')),
                                '.',
                                identifier('Test')
                              ))),
                          ')'
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(identifier('num')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)