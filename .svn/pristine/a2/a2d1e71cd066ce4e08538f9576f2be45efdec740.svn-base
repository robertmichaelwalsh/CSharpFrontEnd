compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('char'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('chars'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            array_type(
                              type(predefined_type(integral_type('char'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal(''0''))),
                                ',',
                                variable_initializer(expression(literal(''F''))),
                                ',',
                                variable_initializer(expression(literal(''f''))),
                                ',',
                                variable_initializer(expression(literal(''x''))),
                                ',',
                                variable_initializer(expression(literal(''1''))),
                                ',',
                                variable_initializer(expression(literal(''n''))),
                                ',',
                                variable_initializer(expression(literal(''a'')))
                              ),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('bool')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('results'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            array_type(
                              type('predefined_type'('bool')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('true'))),
                                ',',
                                variable_initializer(expression(literal('false'))),
                                ',',
                                variable_initializer(expression(literal('false'))),
                                ',',
                                variable_initializer(expression(literal('false'))),
                                ',',
                                variable_initializer(expression(literal('true'))),
                                ',',
                                variable_initializer(expression(literal('false'))),
                                ',',
                                variable_initializer(expression(literal('false')))
                              ),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('chars')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    'expression'(
                      'unary_assignment_operator'('++'),
                      expression(identifier('i'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(
                                  expression(identifier('Char')),
                                  '.',
                                  identifier('IsNumber')
                                ),
                                '(',
                                argument_list(argument(expression(
                                      expression(identifier('chars')),
                                      '[',
                                      expression_list(expression(identifier('i'))),
                                      ']'
                                    ))),
                                ')'
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(
                                expression(identifier('results')),
                                '[',
                                expression_list(expression(identifier('i'))),
                                ']'
                              )
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('Console')),
                                        '.',
                                        identifier('WriteLine')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(expression(literal('"Char '{0}' failed"'))),
                                        ',',
                                        argument(expression(
                                            expression(identifier('chars')),
                                            '[',
                                            expression_list(expression(identifier('i'))),
                                            ']'
                                          ))
                                      ),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    'return',
                                    expression(literal('1')),
                                    ';'
                                  )),
                                '}'
                              ))
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)