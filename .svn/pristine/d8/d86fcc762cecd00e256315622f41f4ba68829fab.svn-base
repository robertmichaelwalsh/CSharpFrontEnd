compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"cygwin1.dll"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"puts"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Ansi')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"cygwin1.dll"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"puts"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Ansi')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"cygwin1.dll"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"puts"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Ansi')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('puts'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('name')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_many_int_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_many_int_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_many_int_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('j')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_many_short_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_many_short_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_many_short_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('short'))),
                identifier('j')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_many_byte_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_many_byte_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_many_byte_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('byte'))),
                identifier('j')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_many_float_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_many_float_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type('predefined_type'('float')),
            identifier('mono_test_many_float_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('j')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_many_double_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_many_double_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type('predefined_type'('double')),
            identifier('mono_test_many_double_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('j')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_split_double_arguments"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_split_double_arguments"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type('predefined_type'('double')),
            identifier('mono_test_split_double_arguments'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('float')),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('e')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('puts')),
                            '(',
                            argument_list(argument(expression(literal('"A simple Test for PInvoke"')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('DllNotFoundException')),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Math')),
                          '.',
                          identifier('Cos')
                        ),
                        '(',
                        argument_list(argument(expression(
                              expression(identifier('Math')),
                              '.',
                              identifier('PI')
                            ))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'unary_operator'('-'),
                        expression(literal('1'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Math')),
                          '.',
                          identifier('Acos')
                        ),
                        '(',
                        argument_list(argument(expression(literal('1')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_many_int_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_many_short_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('2'))),
                          ',',
                          argument(expression(literal('3'))),
                          ',',
                          argument(expression(literal('4'))),
                          ',',
                          argument(expression(literal('5'))),
                          ',',
                          argument(expression(literal('6'))),
                          ',',
                          argument(expression(literal('7'))),
                          ',',
                          argument(expression(literal('8'))),
                          ',',
                          argument(expression(literal('9'))),
                          ',',
                          argument(expression(literal('10')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('55'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_many_byte_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('2'))),
                          ',',
                          argument(expression(literal('3'))),
                          ',',
                          argument(expression(literal('4'))),
                          ',',
                          argument(expression(literal('5'))),
                          ',',
                          argument(expression(literal('6'))),
                          ',',
                          argument(expression(literal('7'))),
                          ',',
                          argument(expression(literal('8'))),
                          ',',
                          argument(expression(literal('9'))),
                          ',',
                          argument(expression(literal('10')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('55'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_many_float_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1.0f'))),
                          ',',
                          argument(expression(literal('2.0f'))),
                          ',',
                          argument(expression(literal('3.0f'))),
                          ',',
                          argument(expression(literal('4.0f'))),
                          ',',
                          argument(expression(literal('5.0f'))),
                          ',',
                          argument(expression(literal('6.0f'))),
                          ',',
                          argument(expression(literal('7.0f'))),
                          ',',
                          argument(expression(literal('8.0f'))),
                          ',',
                          argument(expression(literal('9.0f'))),
                          ',',
                          argument(expression(literal('10.0f')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('55.0f'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_many_double_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1.0'))),
                          ',',
                          argument(expression(literal('2.0'))),
                          ',',
                          argument(expression(literal('3.0'))),
                          ',',
                          argument(expression(literal('4.0'))),
                          ',',
                          argument(expression(literal('5.0'))),
                          ',',
                          argument(expression(literal('6.0'))),
                          ',',
                          argument(expression(literal('7.0'))),
                          ',',
                          argument(expression(literal('8.0'))),
                          ',',
                          argument(expression(literal('9.0'))),
                          ',',
                          argument(expression(literal('10.0')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('55.0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('7')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_split_double_arguments')),
                        '(',
                        argument_list(
                          argument(expression(literal('1.0'))),
                          ',',
                          argument(expression(literal('2.0'))),
                          ',',
                          argument(expression(literal('3.0f'))),
                          ',',
                          argument(expression(literal('4.0'))),
                          ',',
                          argument(expression(literal('5.0')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('15.0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('8')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)