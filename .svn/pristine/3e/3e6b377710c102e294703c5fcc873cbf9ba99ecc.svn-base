compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('sum'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('async_callback'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IAsyncResult'))),
                identifier('ar')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('byte'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('buf'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(array_type(
                                type(predefined_type(integral_type('byte'))),
                                rank_specifier(
                                  '[',
                                  ']'
                                )
                              )),
                            ')',
                            expression(
                              expression(identifier('ar')),
                              '.',
                              identifier('AsyncState')
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('sum')),
                      assignment_operator('+='),
                      expression(
                        expression(identifier('buf')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('byte'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('buf'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('byte'))),
                            '[',
                            expression_list(expression(literal('1'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AsyncCallback'))),
                      variable_declarator(
                        identifier('ac'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AsyncCallback'))),
                            '(',
                            argument_list(argument(expression(identifier('async_callback')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(identifier('ar'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('sum0'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('FileStream'))),
                      variable_declarator(
                        identifier('s'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('FileStream'))),
                            '(',
                            argument_list(
                              argument(expression(literal('"async_read.cs"'))),
                              ',',
                              argument(expression(
                                  expression(identifier('FileMode')),
                                  '.',
                                  identifier('Open')
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('Position')
                      ),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('sum0')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('s')),
                          '.',
                          identifier('Read')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('buf'))),
                          ',',
                          argument(expression(literal('0'))),
                          ',',
                          argument(expression(literal('1')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('sum0')),
                        assignment_operator('+='),
                        expression(
                          expression(identifier('buf')),
                          '[',
                          expression_list(expression(literal('0'))),
                          ']'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('Position')
                      ),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'do',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('ar')),
                              assignment_operator('='),
                              expression(
                                expression(
                                  expression(identifier('s')),
                                  '.',
                                  identifier('BeginRead')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(identifier('buf'))),
                                  ',',
                                  argument(expression(literal('0'))),
                                  ',',
                                  argument(expression(literal('1'))),
                                  ',',
                                  argument(expression(identifier('ac'))),
                                  ',',
                                  argument(expression(identifier('buf')))
                                ),
                                ')'
                              )
                            ),
                            ';'
                          )),
                        '}'
                      )),
                    'while',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('s')),
                          '.',
                          identifier('EndRead')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('ar')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('1'))
                    ),
                    ')',
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('sum')),
                      assignment_operator('-='),
                      expression(
                        expression(identifier('buf')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('100')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('Close')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"CSUM: "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('sum'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('" "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('sum0'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('sum')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('sum0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)