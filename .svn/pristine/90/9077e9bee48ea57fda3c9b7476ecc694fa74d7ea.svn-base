compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('tester'),
            '{',
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('tester'),
                '(',
                ')',
                body(block(
                    '{',
                    '}'
                  ))
              )),
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('float')),
                          variable_declarator(
                            identifier('a'),
                            '=',
                            variable_initializer(expression(literal('1e20f')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('i'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('uint'))),
                          variable_declarator(
                            identifier('ui'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('bool')),
                          variable_declarator(
                            identifier('exception'),
                            '=',
                            variable_initializer(expression(literal('false')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(
                                  identifier('b'),
                                  '=',
                                  variable_initializer(expression(
                                      '(',
                                      type(predefined_type(integral_type('int'))),
                                      ')',
                                      expression(identifier('a'))
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'checked',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('i')),
                                      assignment_operator('='),
                                      expression(
                                        '(',
                                        type(predefined_type(integral_type('int'))),
                                        ')',
                                        expression(identifier('a'))
                                      )
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(
                            specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('OverflowException')),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(identifier('exception')),
                                        assignment_operator('='),
                                        expression(literal('true'))
                                      ),
                                      ';'
                                    )),
                                  '}'
                                )
                              )),
                            specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('Exception')),
                              ')',
                              block(
                                '{',
                                '}'
                              )
                            )
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(identifier('exception'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(
                            'unary_operator'('-'),
                            expression(literal('1'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('exception')),
                          assignment_operator('='),
                          expression(literal('false'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('a')),
                          assignment_operator('='),
                          expression(literal('1e5f'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(
                                  identifier('b'),
                                  '=',
                                  variable_initializer(expression(
                                      '(',
                                      type(predefined_type(integral_type('int'))),
                                      ')',
                                      expression(identifier('a'))
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'checked',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('i')),
                                      assignment_operator('='),
                                      expression(
                                        '(',
                                        type(predefined_type(integral_type('int'))),
                                        ')',
                                        expression(identifier('a'))
                                      )
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('Exception')),
                              ')',
                              block(
                                '{',
                                statement(embedded_statement(
                                    'return',
                                    expression(
                                      'unary_operator'('-'),
                                      expression(literal('2'))
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('100000'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(
                            'unary_operator'('-'),
                            expression(literal('3'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('exception')),
                          assignment_operator('='),
                          expression(literal('false'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('a')),
                          assignment_operator('='),
                          expression(
                            'unary_operator'('-'),
                            expression(literal('1e30f'))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(
                                  identifier('b'),
                                  '=',
                                  variable_initializer(expression(
                                      '(',
                                      type(predefined_type(integral_type('int'))),
                                      ')',
                                      expression(identifier('a'))
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'checked',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('i')),
                                      assignment_operator('='),
                                      expression(
                                        '(',
                                        type(predefined_type(integral_type('int'))),
                                        ')',
                                        expression(identifier('a'))
                                      )
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(
                            specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('OverflowException')),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(identifier('exception')),
                                        assignment_operator('='),
                                        expression(literal('true'))
                                      ),
                                      ';'
                                    )),
                                  '}'
                                )
                              )),
                            specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('Exception')),
                              ')',
                              block(
                                '{',
                                '}'
                              )
                            )
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('exception')),
                          assignment_operator('='),
                          expression(literal('false'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('a')),
                          assignment_operator('='),
                          expression(
                            'unary_operator'('-'),
                            expression(literal('1e30f'))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('uint'))),
                                variable_declarator(
                                  identifier('b'),
                                  '=',
                                  variable_initializer(expression(
                                      '(',
                                      type(predefined_type(integral_type('uint'))),
                                      ')',
                                      expression(identifier('a'))
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'checked',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('ui')),
                                      assignment_operator('='),
                                      expression(
                                        '(',
                                        type(predefined_type(integral_type('uint'))),
                                        ')',
                                        expression(identifier('a'))
                                      )
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('WriteLine')
                                ),
                                '(',
                                argument_list(argument(expression(literal('"No Exception"')))),
                                ')'
                              ),
                              ';'
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(
                            specific_catch_clauses(specific_catch_clause(
                                'catch',
                                '(',
                                qualified_identifier(identifier('OverflowException')),
                                ')',
                                block(
                                  '{',
                                  statement(embedded_statement(
                                      expression(
                                        expression(identifier('exception')),
                                        assignment_operator('='),
                                        expression(literal('true'))
                                      ),
                                      ';'
                                    )),
                                  '}'
                                )
                              )),
                            specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('Exception')),
                              ')',
                              block(
                                '{',
                                '}'
                              )
                            )
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'unary_operator'('!'),
                          expression(identifier('exception'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(
                            'unary_operator'('-'),
                            expression(literal('4'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('a')),
                          assignment_operator('='),
                          expression(literal('1e5f'))
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'try',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('uint'))),
                                variable_declarator(
                                  identifier('b'),
                                  '=',
                                  variable_initializer(expression(
                                      '(',
                                      type(predefined_type(integral_type('uint'))),
                                      ')',
                                      expression(identifier('a'))
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'checked',
                              block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(identifier('ui')),
                                      assignment_operator('='),
                                      expression(
                                        '(',
                                        type(predefined_type(integral_type('uint'))),
                                        ')',
                                        expression(identifier('a'))
                                      )
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )),
                          '}'
                        ),
                        catch_clauses(specific_catch_clauses(specific_catch_clause(
                              'catch',
                              '(',
                              qualified_identifier(identifier('Exception')),
                              ')',
                              block(
                                '{',
                                statement(embedded_statement(
                                    'return',
                                    expression(
                                      'unary_operator'('-'),
                                      expression(literal('5'))
                                    ),
                                    ';'
                                  )),
                                '}'
                              )
                            )))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('ui')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('100000'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(
                            'unary_operator'('-'),
                            expression(literal('6'))
                          ),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'checked',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(identifier('l'))
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(identifier('m'))
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(array_type(
                                    ambig(
                                      type(array_type(
                                          type(predefined_type(integral_type('int'))),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        )),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    ),
                                    ambig(
                                      type(predefined_type(integral_type('int'))),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      ),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    )
                                  )),
                                variable_declarator(
                                  identifier('cases'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      array_type(
                                        ambig(
                                          type(array_type(
                                              type(predefined_type(integral_type('int'))),
                                              rank_specifier(
                                                '[',
                                                ']'
                                              )
                                            )),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        ),
                                        ambig(
                                          type(predefined_type(integral_type('int'))),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          ),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        )
                                      ),
                                      array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('3'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('15'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('3'))),
                                                  ',',
                                                  variable_initializer(expression(literal('5'))),
                                                  ',',
                                                  variable_initializer(expression(literal('15')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('3'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('15')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('3'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('5'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('15'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('1'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('32767'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('32767'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('int'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('32767'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('1'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('32767'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            ))
                                        ),
                                        '}'
                                      )
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'for',
                              '(',
                              for_initializer(local_variable_declaration(
                                  type(predefined_type(integral_type('int'))),
                                  variable_declarator(
                                    identifier('j'),
                                    '=',
                                    variable_initializer(expression(literal('0')))
                                  )
                                )),
                              ';',
                              expression(
                                expression(identifier('j')),
                                'binary_operator'('overloadable_binary_operator'('<')),
                                expression(
                                  expression(identifier('cases')),
                                  '.',
                                  identifier('Length')
                                )
                              ),
                              ';',
                              'expression'(
                                'unary_assignment_operator'('++'),
                                expression(identifier('j'))
                              ),
                              ')',
                              embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('cases')),
                                        '[',
                                        expression_list(expression(identifier('j'))),
                                        ']'
                                      ),
                                      '[',
                                      expression_list(expression(literal('0'))),
                                      ']'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('*')),
                                    expression(
                                      expression(
                                        expression(identifier('cases')),
                                        '[',
                                        expression_list(expression(identifier('j'))),
                                        ']'
                                      ),
                                      '[',
                                      expression_list(expression(literal('1'))),
                                      ']'
                                    )
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(
                                    expression(
                                      expression(identifier('cases')),
                                      '[',
                                      expression_list(expression(identifier('j'))),
                                      ']'
                                    ),
                                    '[',
                                    expression_list(expression(literal('2'))),
                                    ']'
                                  )
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(
                                    'expression'(
                                      'unary_operator'('-'),
                                      expression(literal('7'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('-')),
                                    expression(identifier('j'))
                                  ),
                                  ';'
                                )
                              )
                            )),
                          '}'
                        )
                      )),
                    statement(embedded_statement(
                        'checked',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(identifier('j'))
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(identifier('k'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(
                                  expression(identifier('k')),
                                  assignment_operator('='),
                                  expression(literal('0'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('7'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('5'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(literal('0'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('8'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(literal('0'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('5'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('0'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('9'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(literal('3'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('5'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                'expression'(
                                  'unary_operator'('-'),
                                  expression(literal('15'))
                                )
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('10'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(literal('3'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(literal('5'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('15'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('11'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('3'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('5'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                expression(literal('15'))
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('12'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('3'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(literal('5'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                'expression'(
                                  'unary_operator'('-'),
                                  expression(literal('15'))
                                )
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('13'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('1'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(literal('32767'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                'expression'(
                                  'unary_operator'('-'),
                                  expression(literal('32767'))
                                )
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('14'))
                                ),
                                ';'
                              )
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('j')),
                                assignment_operator('='),
                                expression(literal('32767'))
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              expression(
                                expression(identifier('k')),
                                assignment_operator('='),
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('1'))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'if',
                              '(',
                              expression(
                                expression(
                                  expression(identifier('j')),
                                  'binary_operator'('overloadable_binary_operator'('*')),
                                  expression(identifier('k'))
                                ),
                                'binary_operator'('overloadable_binary_operator'('!=')),
                                'expression'(
                                  'unary_operator'('-'),
                                  expression(literal('32767'))
                                )
                              ),
                              ')',
                              embedded_statement(
                                'return',
                                expression(
                                  'unary_operator'('-'),
                                  expression(literal('15'))
                                ),
                                ';'
                              )
                            )),
                          '}'
                        )
                      )),
                    statement(embedded_statement(
                        'checked',
                        block(
                          '{',
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('long'))),
                                variable_declarator(identifier('l'))
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(predefined_type(integral_type('long'))),
                                variable_declarator(identifier('m'))
                              ),
                              ';'
                            )),
                          statement(declaration_statement(
                              local_variable_declaration(
                                type(array_type(
                                    ambig(
                                      type(array_type(
                                          type(predefined_type(integral_type('long'))),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        )),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    ),
                                    ambig(
                                      type(predefined_type(integral_type('long'))),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      ),
                                      rank_specifier(
                                        '[',
                                        ']'
                                      )
                                    )
                                  )),
                                variable_declarator(
                                  identifier('cases'),
                                  '=',
                                  variable_initializer(expression(
                                      'new',
                                      array_type(
                                        ambig(
                                          type(array_type(
                                              type(predefined_type(integral_type('long'))),
                                              rank_specifier(
                                                '[',
                                                ']'
                                              )
                                            )),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        ),
                                        ambig(
                                          type(predefined_type(integral_type('long'))),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          ),
                                          rank_specifier(
                                            '[',
                                            ']'
                                          )
                                        )
                                      ),
                                      array_initializer(
                                        '{',
                                        variable_initializer_list(
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('0'))),
                                                  ',',
                                                  variable_initializer(expression(literal('0')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('3'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('15'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('3'))),
                                                  ',',
                                                  variable_initializer(expression(literal('5'))),
                                                  ',',
                                                  variable_initializer(expression(literal('15')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('3'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('5'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('15')))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('3'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('5'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('15'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('1'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(literal('2147483647'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('2147483647'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            )),
                                          ',',
                                          variable_initializer(expression(
                                              'new',
                                              array_type(
                                                type(predefined_type(integral_type('long'))),
                                                rank_specifier(
                                                  '[',
                                                  ']'
                                                )
                                              ),
                                              array_initializer(
                                                '{',
                                                variable_initializer_list(
                                                  variable_initializer(expression(literal('2147483647'))),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('1'))
                                                    )),
                                                  ',',
                                                  variable_initializer(expression(
                                                      'unary_operator'('-'),
                                                      expression(literal('2147483647'))
                                                    ))
                                                ),
                                                '}'
                                              )
                                            ))
                                        ),
                                        '}'
                                      )
                                    ))
                                )
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'for',
                              '(',
                              for_initializer(local_variable_declaration(
                                  type(predefined_type(integral_type('int'))),
                                  variable_declarator(
                                    identifier('j'),
                                    '=',
                                    variable_initializer(expression(literal('0')))
                                  )
                                )),
                              ';',
                              expression(
                                expression(identifier('j')),
                                'binary_operator'('overloadable_binary_operator'('<')),
                                expression(
                                  expression(identifier('cases')),
                                  '.',
                                  identifier('Length')
                                )
                              ),
                              ';',
                              'expression'(
                                'unary_assignment_operator'('++'),
                                expression(identifier('j'))
                              ),
                              ')',
                              embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(identifier('cases')),
                                        '[',
                                        expression_list(expression(identifier('j'))),
                                        ']'
                                      ),
                                      '[',
                                      expression_list(expression(literal('0'))),
                                      ']'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('*')),
                                    expression(
                                      expression(
                                        expression(identifier('cases')),
                                        '[',
                                        expression_list(expression(identifier('j'))),
                                        ']'
                                      ),
                                      '[',
                                      expression_list(expression(literal('1'))),
                                      ']'
                                    )
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('!=')),
                                  expression(
                                    expression(
                                      expression(identifier('cases')),
                                      '[',
                                      expression_list(expression(identifier('j'))),
                                      ']'
                                    ),
                                    '[',
                                    expression_list(expression(literal('2'))),
                                    ']'
                                  )
                                ),
                                ')',
                                embedded_statement(
                                  'return',
                                  expression(
                                    'expression'(
                                      'unary_operator'('-'),
                                      expression(literal('15'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('-')),
                                    expression(identifier('j'))
                                  ),
                                  ';'
                                )
                              )
                            )),
                          '}'
                        )
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"test-ok"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)