compilation_unit(namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('GenRandom'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('last'),
                '=',
                variable_initializer(expression(literal('42')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type('predefined_type'('double')),
            identifier('gen_random'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('double')),
                identifier('max')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('last')),
                      assignment_operator('='),
                      expression(
                        'expression'(
                          '(',
                          expression(
                            expression(
                              expression(identifier('last')),
                              'binary_operator'('overloadable_binary_operator'('*')),
                              expression(literal('3877'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(literal('29573'))
                          ),
                          ')'
                        ),
                        'binary_operator'('overloadable_binary_operator'('%')),
                        expression(literal('139968'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(
                        expression(
                          expression(identifier('max')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('last'))
                        ),
                        'binary_operator'('overloadable_binary_operator'('/')),
                        expression(literal('139968'))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('N'),
                        '=',
                        variable_initializer(expression(literal('900000')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('result'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(
                      expression(
                        expression(identifier('N')),
                        'unary_assignment_operator'('--')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('result')),
                              assignment_operator('='),
                              expression(
                                expression(identifier('gen_random')),
                                '(',
                                argument_list(argument(expression(literal('100.0')))),
                                ')'
                              )
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(literal('0')),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))))