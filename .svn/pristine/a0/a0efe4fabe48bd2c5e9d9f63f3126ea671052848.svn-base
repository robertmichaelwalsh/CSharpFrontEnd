compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Messaging'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Proxies'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('MyProxy'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('RealProxy')))
        ),
        '{',
        member_declaration(field_declaration(
            'modifier'('readonly'),
            type(qualified_identifier(identifier('MarshalByRefObject'))),
            variable_declarators(variable_declarator(identifier('target'))),
            ';'
          )),
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('MyProxy'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('MarshalByRefObject'))),
                identifier('target')
              )),
            ')',
            constructor_initializer(
              ':',
              'base',
              '(',
              argument_list(argument(expression(
                    expression(
                      expression(identifier('target')),
                      '.',
                      identifier('GetType')
                    ),
                    '(',
                    ')'
                  ))),
              ')'
            ),
            body(block(
                '{',
                statement(embedded_statement(
                    'expression'(
                      'expression'(
                        'expression'('this'),
                        '.',
                        identifier('target')
                      ),
                      assignment_operator('='),
                      expression(identifier('target'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type(qualified_identifier(identifier('IMessage'))),
            identifier('Invoke'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IMessage'))),
                identifier('request')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IMethodCallMessage'))),
                      variable_declarator(
                        identifier('call'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('IMethodCallMessage'))),
                            ')',
                            expression(identifier('request'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Invoke "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('call')),
                              '.',
                              identifier('MethodName')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"ARGS("')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('call')),
                        '.',
                        identifier('ArgCount')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('Write')
                                ),
                                '(',
                                argument_list(argument(expression(literal('", "')))),
                                ')'
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('Write')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(identifier('call')),
                                          '.',
                                          identifier('GetArgName')
                                        ),
                                        '(',
                                        argument_list(argument(expression(identifier('i')))),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('" "'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(
                                        expression(identifier('call')),
                                        '.',
                                        identifier('GetArg')
                                      ),
                                      '(',
                                      argument_list(argument(expression(identifier('i')))),
                                      ')'
                                    )
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('")"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"INARGS("')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('call')),
                        '.',
                        identifier('InArgCount')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('Write')
                                ),
                                '(',
                                argument_list(argument(expression(literal('", "')))),
                                ')'
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('Write')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(identifier('call')),
                                          '.',
                                          identifier('GetInArgName')
                                        ),
                                        '(',
                                        argument_list(argument(expression(identifier('i')))),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('" "'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(
                                        expression(identifier('call')),
                                        '.',
                                        identifier('GetInArg')
                                      ),
                                      '(',
                                      argument_list(argument(expression(identifier('i')))),
                                      ')'
                                    )
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('")"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IMethodReturnMessage'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('RemotingServices')),
                              '.',
                              identifier('ExecuteMessage')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('target'))),
                              ',',
                              argument(expression(identifier('call')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"RESARGS("')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('ArgCount')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('Write')
                                ),
                                '(',
                                argument_list(argument(expression(literal('", "')))),
                                ')'
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('Write')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(identifier('res')),
                                          '.',
                                          identifier('GetArgName')
                                        ),
                                        '(',
                                        argument_list(argument(expression(identifier('i')))),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('" "'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(
                                        expression(identifier('res')),
                                        '.',
                                        identifier('GetArg')
                                      ),
                                      '(',
                                      argument_list(argument(expression(identifier('i')))),
                                      ')'
                                    )
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('")"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('Write')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"RESOUTARGS("')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('OutArgCount')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('0'))
                            ),
                            ')',
                            embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('Write')
                                ),
                                '(',
                                argument_list(argument(expression(literal('", "')))),
                                ')'
                              ),
                              ';'
                            )
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('Write')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(identifier('res')),
                                          '.',
                                          identifier('GetOutArgName')
                                        ),
                                        '(',
                                        argument_list(argument(expression(identifier('i')))),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('" "'))
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(
                                      expression(
                                        expression(identifier('res')),
                                        '.',
                                        identifier('GetOutArg')
                                      ),
                                      '(',
                                      argument_list(argument(expression(identifier('i')))),
                                      ')'
                                    )
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('")"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        'modifier'('public'),
        'struct',
        identifier('MyStruct'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('a'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('b'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('c'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('R1'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('MarshalByRefObject')))
        ),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('test_field'),
                '=',
                variable_initializer(expression(literal('5')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type(qualified_identifier(identifier('MyStruct'))),
            identifier('Add'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'out',
                type(predefined_type(integral_type('int'))),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"ADD"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('c')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('a')),
                        'binary_operator'('overloadable_binary_operator'('+')),
                        expression(identifier('b'))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MyStruct'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('MyStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(identifier('a'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(identifier('c'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('long'))),
            identifier('nonvirtual_Add'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"nonvirtual_Add"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              type(predefined_type(integral_type('long'))),
              identifier('RemoteDelegate2'),
              '(',
              formal_parameter_list(
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                ),
                ',',
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('b')
                )
              ),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('R1'))),
                      variable_declarator(
                        identifier('myobj'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('R1'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('long'))),
                      variable_declarator(identifier('lres'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MyProxy'))),
                      variable_declarator(
                        identifier('real_proxy'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('MyProxy'))),
                            '(',
                            argument_list(argument(expression(identifier('myobj')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('R1'))),
                      variable_declarator(
                        identifier('o'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('R1'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('real_proxy')),
                                '.',
                                identifier('GetTransparentProxy')
                              ),
                              '(',
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('RemoteDelegate2'))),
                      variable_declarator(
                        identifier('d2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('RemoteDelegate2'))),
                            '(',
                            argument_list(argument(expression(
                                  expression(identifier('o')),
                                  '.',
                                  identifier('nonvirtual_Add')
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d2')),
                      '(',
                      argument_list(
                        argument(expression(literal('6'))),
                        ',',
                        argument(expression(literal('7')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar1'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d2')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('2'))),
                              ',',
                              argument(expression(literal('4'))),
                              ',',
                              argument(expression(literal('null'))),
                              ',',
                              argument(expression(literal('null')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('lres')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('d2')),
                          '.',
                          identifier('EndInvoke')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('ar1')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('lres')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('6'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)