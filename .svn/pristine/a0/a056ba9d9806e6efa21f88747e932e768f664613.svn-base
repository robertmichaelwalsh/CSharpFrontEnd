compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('string')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('names'),
                            '=',
                            variable_initializer(array_initializer(
                                '{',
                                variable_initializer_list(
                                  variable_initializer(expression(literal('"one"'))),
                                  ',',
                                  variable_initializer(expression(literal('"two"'))),
                                  ',',
                                  variable_initializer(expression(literal('"three"'))),
                                  ',',
                                  variable_initializer(expression(literal('"four"')))
                                ),
                                '}'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Hashtable'))),
                          variable_declarator(
                            identifier('hash'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Hashtable'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('names')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('i'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('hash')),
                                    '.',
                                    identifier('Add')
                                  ),
                                  '(',
                                  argument_list(
                                    argument(expression(
                                        expression(identifier('names')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      )),
                                    ',',
                                    argument(expression(identifier('i')))
                                  ),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            expression(
                              expression(identifier('hash')),
                              '[',
                              expression_list(expression(literal('"one"'))),
                              ']'
                            )
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            expression(
                              expression(identifier('hash')),
                              '[',
                              expression_list(expression(literal('"two"'))),
                              ']'
                            )
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('1'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('2')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            expression(
                              expression(identifier('hash')),
                              '[',
                              expression_list(expression(literal('"three"'))),
                              ']'
                            )
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('2'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('3')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          'expression'(
                            '(',
                            type(predefined_type(integral_type('int'))),
                            ')',
                            expression(
                              expression(identifier('hash')),
                              '[',
                              expression_list(expression(literal('"four"'))),
                              ']'
                            )
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('4')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('hash')),
                            '.',
                            identifier('Contains')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"urka"')))),
                          ')'
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('5')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)