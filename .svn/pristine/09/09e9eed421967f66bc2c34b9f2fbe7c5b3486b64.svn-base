compilation_unit(namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('NUM'),
                        '=',
                        variable_initializer(expression(literal('300')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('byte'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('flags'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('byte'))),
                            '[',
                            expression_list(expression(
                                expression(literal('8192')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('1'))
                              )),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('i')),
                      ',',
                      variable_declarator(identifier('k'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('count'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(
                      expression(
                        expression(identifier('NUM')),
                        'unary_assignment_operator'('--')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('count')),
                              assignment_operator('='),
                              expression(literal('0'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'for',
                            '(',
                            for_initializer(expression(
                                expression(identifier('i')),
                                assignment_operator('='),
                                expression(literal('2'))
                              )),
                            ';',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('<=')),
                              expression(literal('8192'))
                            ),
                            ';',
                            expression(
                              expression(identifier('i')),
                              'unary_assignment_operator'('++')
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('flags')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      ),
                                      assignment_operator('='),
                                      expression(literal('1'))
                                    ),
                                    ';'
                                  )),
                                '}'
                              ))
                          )),
                        statement(embedded_statement(
                            'for',
                            '(',
                            for_initializer(expression(
                                expression(identifier('i')),
                                assignment_operator('='),
                                expression(literal('2'))
                              )),
                            ';',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('<=')),
                              expression(literal('8192'))
                            ),
                            ';',
                            expression(
                              expression(identifier('i')),
                              'unary_assignment_operator'('++')
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    'if',
                                    '(',
                                    expression(
                                      expression(
                                        expression(identifier('flags')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('!=')),
                                      expression(literal('0'))
                                    ),
                                    ')',
                                    embedded_statement(block(
                                        '{',
                                        statement(embedded_statement(
                                            'for',
                                            '(',
                                            for_initializer(expression(
                                                expression(identifier('k')),
                                                assignment_operator('='),
                                                expression(
                                                  expression(identifier('i')),
                                                  'binary_operator'('overloadable_binary_operator'('+')),
                                                  expression(identifier('i'))
                                                )
                                              )),
                                            ';',
                                            expression(
                                              expression(identifier('k')),
                                              'binary_operator'('overloadable_binary_operator'('<=')),
                                              expression(literal('8192'))
                                            ),
                                            ';',
                                            expression(
                                              expression(identifier('k')),
                                              assignment_operator('+='),
                                              expression(identifier('i'))
                                            ),
                                            ')',
                                            embedded_statement(block(
                                                '{',
                                                statement(embedded_statement(
                                                    expression(
                                                      expression(
                                                        expression(identifier('flags')),
                                                        '[',
                                                        expression_list(expression(identifier('k'))),
                                                        ']'
                                                      ),
                                                      assignment_operator('='),
                                                      expression(literal('0'))
                                                    ),
                                                    ';'
                                                  )),
                                                '}'
                                              ))
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(identifier('count')),
                                              'unary_assignment_operator'('++')
                                            ),
                                            ';'
                                          )),
                                        '}'
                                      ))
                                  )),
                                '}'
                              ))
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('System')),
                          '.',
                          identifier('Console')
                        ),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"Count: {0}\n"'))),
                        ',',
                        argument(expression(identifier('count')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(literal('0')),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))))