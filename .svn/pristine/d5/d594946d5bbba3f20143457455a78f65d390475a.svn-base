compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                )),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('F'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Test.F from delegate: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('a'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('200')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('a')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('async_callback'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IAsyncResult'))),
                identifier('ar')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Async Callback "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar')),
                              '.',
                              identifier('AsyncState')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('F')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AsyncCallback'))),
                      variable_declarator(
                        identifier('ac'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AsyncCallback'))),
                            '(',
                            argument_list(argument(expression(identifier('async_callback')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('state1'),
                        '=',
                        variable_initializer(expression(literal('"STATE1"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('state2'),
                        '=',
                        variable_initializer(expression(literal('"STATE2"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('state3'),
                        '=',
                        variable_initializer(expression(literal('"STATE3"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('state4'),
                        '=',
                        variable_initializer(expression(literal('"STATE4"')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('fin'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar1'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('1'))),
                              ',',
                              argument(expression(identifier('ac'))),
                              ',',
                              argument(expression(identifier('state1')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar2'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('2'))),
                              ',',
                              argument(expression(identifier('ac'))),
                              ',',
                              argument(expression(identifier('state2')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar3'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('3'))),
                              ',',
                              argument(expression(identifier('ac'))),
                              ',',
                              argument(expression(identifier('state3')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar4'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(literal('4'))),
                              ',',
                              argument(expression(identifier('ac'))),
                              ',',
                              argument(expression(identifier('state4')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('EndInvoke')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('ar1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Result = "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('res'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('EndInvoke')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('ar1')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('InvalidOperationException')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"cant execute EndInvoke twice ... OK"')))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('ar1')),
                          '.',
                          identifier('AsyncWaitHandle')
                        ),
                        '.',
                        identifier('WaitOne')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ar1')),
                      '.',
                      identifier('IsCompleted')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('fin')),
                        'unary_assignment_operator'('++')
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"completed1: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar1')),
                              '.',
                              identifier('IsCompleted')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('ar2')),
                          '.',
                          identifier('AsyncWaitHandle')
                        ),
                        '.',
                        identifier('WaitOne')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ar2')),
                      '.',
                      identifier('IsCompleted')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('fin')),
                        'unary_assignment_operator'('++')
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"completed2: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar2')),
                              '.',
                              identifier('IsCompleted')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('ar3')),
                          '.',
                          identifier('AsyncWaitHandle')
                        ),
                        '.',
                        identifier('WaitOne')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ar3')),
                      '.',
                      identifier('IsCompleted')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('fin')),
                        'unary_assignment_operator'('++')
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"completed3: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar3')),
                              '.',
                              identifier('IsCompleted')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('ar4')),
                          '.',
                          identifier('AsyncWaitHandle')
                        ),
                        '.',
                        identifier('WaitOne')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ar4')),
                      '.',
                      identifier('IsCompleted')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('fin')),
                        'unary_assignment_operator'('++')
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"completed4: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar4')),
                              '.',
                              identifier('IsCompleted')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('fin')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)