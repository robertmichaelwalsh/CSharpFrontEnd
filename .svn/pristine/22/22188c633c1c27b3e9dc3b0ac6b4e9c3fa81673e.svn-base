compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('ss'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('i1'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Explicit')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('su'),
        '{',
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('0')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('i1'))),
            ';'
          )),
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('0')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('i2'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('cs'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type('predefined_type'('bool')),
            variable_declarators(variable_declarator(identifier('b1'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('i1'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(qualified_identifier(identifier('su'))),
            variable_declarators(variable_declarator(identifier('u1'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('sc1'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c0'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('sc3'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c0'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c1'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c2'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('sc5'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c0'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c1'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c2'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c3'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('c4'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_union_test_1'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('cs'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_return_int'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_int_ss"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_int_ss"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_return_int_ss'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('ss'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_ss"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_ss"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('ss'))),
            identifier('mono_return_ss'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('ss'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_sc1"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_sc1"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('sc1'))),
            identifier('mono_return_sc1'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('sc1'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_sc3"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_sc3"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('sc3'))),
            identifier('mono_return_sc3'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('sc3'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_sc5"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_sc5"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('sc5'))),
            identifier('mono_return_sc5'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('sc5'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_return_int_su"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_return_int_su"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_return_int_su'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('su'))),
                identifier('a')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_return_int')),
                        '(',
                        argument_list(argument(expression(literal('5')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ss'))),
                      variable_declarator(identifier('s1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s1')),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('4'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_return_int_ss')),
                        '(',
                        argument_list(argument(expression(identifier('s1')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('s1')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('mono_return_ss')),
                        '(',
                        argument_list(argument(expression(identifier('s1')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('s1')),
                        '.',
                        identifier('i1')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('su'))),
                      variable_declarator(identifier('s2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s2')),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s2')),
                        '.',
                        identifier('i2')
                      ),
                      assignment_operator('='),
                      expression(literal('3'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_return_int_su')),
                        '(',
                        argument_list(argument(expression(identifier('s2')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s2')),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_return_int_su')),
                        '(',
                        argument_list(argument(expression(identifier('s2')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('cs'))),
                      variable_declarator(identifier('s3'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s3')),
                        '.',
                        identifier('b1')
                      ),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s3')),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('12'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('s3')),
                          '.',
                          identifier('u1')
                        ),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('s3')),
                          '.',
                          identifier('u1')
                        ),
                        '.',
                        identifier('i2')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_union_test_1')),
                        '(',
                        argument_list(argument(expression(identifier('s3')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('13'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('s3')),
                          '.',
                          identifier('u1')
                        ),
                        '.',
                        identifier('i1')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_union_test_1')),
                        '(',
                        argument_list(argument(expression(identifier('s3')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('14'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('7')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s3')),
                        '.',
                        identifier('b1')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_union_test_1')),
                        '(',
                        argument_list(argument(expression(identifier('s3')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('15'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('8')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('sc1'))),
                      variable_declarator(identifier('s4'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s4')),
                        '.',
                        identifier('c0')
                      ),
                      assignment_operator('='),
                      expression(literal('3'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('s4')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('mono_return_sc1')),
                        '(',
                        argument_list(argument(expression(identifier('s4')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('s4')),
                        '.',
                        identifier('c0')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('9')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('sc3'))),
                      variable_declarator(identifier('s5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s5')),
                        '.',
                        identifier('c0')
                      ),
                      assignment_operator('='),
                      expression(literal('4'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s5')),
                        '.',
                        identifier('c1')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s5')),
                        '.',
                        identifier('c2')
                      ),
                      assignment_operator('='),
                      expression(literal('6'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('s5')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('mono_return_sc3')),
                        '(',
                        argument_list(argument(expression(identifier('s5')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(identifier('s5')),
                            '.',
                            identifier('c0')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('5'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('s5')),
                            '.',
                            identifier('c1')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('7'))
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('s5')),
                          '.',
                          identifier('c2')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('9'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('10')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('sc5'))),
                      variable_declarator(identifier('s6'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s6')),
                        '.',
                        identifier('c0')
                      ),
                      assignment_operator('='),
                      expression(literal('4'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s6')),
                        '.',
                        identifier('c1')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s6')),
                        '.',
                        identifier('c2')
                      ),
                      assignment_operator('='),
                      expression(literal('6'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s6')),
                        '.',
                        identifier('c3')
                      ),
                      assignment_operator('='),
                      expression(literal('7'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s6')),
                        '.',
                        identifier('c4')
                      ),
                      assignment_operator('='),
                      expression(literal('8'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('s6')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('mono_return_sc5')),
                        '(',
                        argument_list(argument(expression(identifier('s6')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(identifier('s6')),
                                '.',
                                identifier('c0')
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('5'))
                            ),
                            'binary_operator'('||'),
                            expression(
                              expression(
                                expression(identifier('s6')),
                                '.',
                                identifier('c1')
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('7'))
                            )
                          ),
                          'binary_operator'('||'),
                          expression(
                            expression(
                              expression(identifier('s6')),
                              '.',
                              identifier('c2')
                            ),
                            'binary_operator'('overloadable_binary_operator'('!=')),
                            expression(literal('9'))
                          )
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('s6')),
                            '.',
                            identifier('c3')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('11'))
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('s6')),
                          '.',
                          identifier('c4')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('13'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('11')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)