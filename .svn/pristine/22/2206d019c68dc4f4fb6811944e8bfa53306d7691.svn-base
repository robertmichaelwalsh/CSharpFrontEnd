compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('internal'),
            'class',
            identifier('CM'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('IComparer')))
            ),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('Compare'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type('predefined_type'('object')),
                    identifier('x')
                  ),
                  ',',
                  fixed_parameter(
                    type('predefined_type'('object')),
                    identifier('y')
                  )
                ),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(
                          'expression'(
                            'expression'(
                              'expression'(
                                '(',
                                expression(
                                  '(',
                                  type(qualified_identifier(identifier('MethodInfo'))),
                                  ')',
                                  expression(identifier('x'))
                                ),
                                ')'
                              ),
                              '.',
                              identifier('Name')
                            ),
                            '.',
                            identifier('CompareTo')
                          ),
                          '(',
                          argument_list(argument(expression(
                                'expression'(
                                  '(',
                                  expression(
                                    '(',
                                    type(qualified_identifier(identifier('MethodInfo'))),
                                    ')',
                                    expression(identifier('y'))
                                  ),
                                  ')'
                                ),
                                '.',
                                identifier('Name')
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type(array_type(
                        type('predefined_type'('string')),
                        rank_specifier(
                          '[',
                          ']'
                        )
                      )),
                    identifier('args')
                  )),
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('string')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('names'),
                            '=',
                            variable_initializer(array_initializer(
                                '{',
                                variable_initializer_list(
                                  variable_initializer(expression(literal('"Equals"'))),
                                  ',',
                                  variable_initializer(expression(literal('"Equals"'))),
                                  ',',
                                  variable_initializer(expression(literal('"GetHashCode"'))),
                                  ',',
                                  variable_initializer(expression(literal('"GetType"'))),
                                  ',',
                                  variable_initializer(expression(literal('"ReferenceEquals"'))),
                                  ',',
                                  variable_initializer(expression(literal('"ToString"')))
                                ),
                                '}'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(identifier('i'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('string')),
                          variable_declarator(
                            identifier('name'),
                            '=',
                            variable_initializer(expression(literal('"System.Object"')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('args')),
                            '.',
                            identifier('Length')
                          ),
                          'binary_operator'('overloadable_binary_operator'('>')),
                          expression(literal('0'))
                        ),
                        ')',
                        embedded_statement(
                          expression(
                            expression(identifier('name')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('args')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            )
                          ),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('Type'))),
                          variable_declarator(
                            identifier('t'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('Type')),
                                  '.',
                                  identifier('GetType')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(identifier('name'))),
                                  ',',
                                  argument(expression(literal('true')))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('MethodInfo'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('ms'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('t')),
                                  '.',
                                  identifier('GetMethods')
                                ),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Array')),
                            '.',
                            identifier('Sort')
                          ),
                          '(',
                          argument_list(
                            argument(expression(identifier('ms'))),
                            ',',
                            argument(expression(
                                'new',
                                type(qualified_identifier(identifier('CM'))),
                                '(',
                                ')'
                              ))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'foreach',
                        '(',
                        type(qualified_identifier(identifier('MethodInfo'))),
                        identifier('m'),
                        'in',
                        expression(identifier('ms')),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(identifier('Console')),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(
                                          expression(
                                            expression(
                                              expression(identifier('m')),
                                              '.',
                                              identifier('ReturnType')
                                            ),
                                            '.',
                                            identifier('Name')
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(literal('" "'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(identifier('m')),
                                          '.',
                                          identifier('Name')
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('name')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('"System.Object"'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'for',
                                '(',
                                for_initializer(expression(
                                    expression(identifier('i')),
                                    assignment_operator('='),
                                    expression(literal('0'))
                                  )),
                                ';',
                                expression(
                                  expression(identifier('i')),
                                  'binary_operator'('overloadable_binary_operator'('<')),
                                  expression(
                                    expression(identifier('names')),
                                    '.',
                                    identifier('Length')
                                  )
                                ),
                                ';',
                                'expression'(
                                  'unary_assignment_operator'('++'),
                                  expression(identifier('i'))
                                ),
                                ')',
                                embedded_statement(
                                  'if',
                                  '(',
                                  expression(
                                    expression(
                                      expression(identifier('names')),
                                      '[',
                                      expression_list(expression(identifier('i'))),
                                      ']'
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('!=')),
                                    expression(
                                      expression(
                                        expression(identifier('ms')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      ),
                                      '.',
                                      identifier('Name')
                                    )
                                  ),
                                  ')',
                                  embedded_statement(
                                    'return',
                                    expression(
                                      expression(identifier('i')),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(literal('1'))
                                    ),
                                    ';'
                                  )
                                )
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)