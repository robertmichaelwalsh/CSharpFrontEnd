compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'class',
        identifier('OSVersionInfo'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('a'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('b'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Sequential')
                ),
                ')'
              )
            )),
          ']'
        ),
        'modifier'('public'),
        'struct',
        identifier('OSVersionInfo2'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('a'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('b'))),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('LibWrap'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('GetVersionEx'),
            '(',
            formal_parameter_list(fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(
                    attribute(qualified_identifier(identifier('In'))),
                    ',',
                    attribute(qualified_identifier(identifier('Out')))
                  ),
                  ']'
                ),
                type(qualified_identifier(identifier('OSVersionInfo'))),
                identifier('osvi')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('BugGetVersionEx'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('c')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('e')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('f')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('g')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('h')
              ),
              ',',
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(
                    attribute(qualified_identifier(identifier('In'))),
                    ',',
                    attribute(qualified_identifier(identifier('Out')))
                  ),
                  ']'
                ),
                type(qualified_identifier(identifier('OSVersionInfo'))),
                identifier('osvi')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"GetVersionEx"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"GetVersionEx"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('GetVersionEx2'),
            '(',
            formal_parameter_list(fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('OSVersionInfo2'))),
                identifier('osvi')
              )),
            ')',
            'body'(';')
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"\nPassing OSVersionInfo as class"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('OSVersionInfo'))),
                      variable_declarator(
                        identifier('osvi'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('OSVersionInfo'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('LibWrap')),
                          '.',
                          identifier('GetVersionEx')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('osvi')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi')),
                        '.',
                        identifier('a')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi')),
                        '.',
                        identifier('b')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"A: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi')),
                            '.',
                            identifier('a')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"B: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi')),
                            '.',
                            identifier('b')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"\nPassing OSVersionInfo as struct"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('OSVersionInfo2'))),
                      variable_declarator(
                        identifier('osvi2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('OSVersionInfo2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi2')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('LibWrap')),
                          '.',
                          identifier('GetVersionEx2')
                        ),
                        '(',
                        argument_list(argument(
                            'ref',
                            expression(identifier('osvi2'))
                          )),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi2')),
                        '.',
                        identifier('a')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi2')),
                        '.',
                        identifier('b')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"A: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi2')),
                            '.',
                            identifier('a')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"B: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi2')),
                            '.',
                            identifier('b')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Testing with extra parameters at the beginning"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('OSVersionInfo'))),
                      variable_declarator(
                        identifier('osvi3'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('OSVersionInfo'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi3')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('osvi3')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('LibWrap')),
                          '.',
                          identifier('BugGetVersionEx')
                        ),
                        '(',
                        argument_list(
                          argument(expression(literal('10'))),
                          ',',
                          argument(expression(literal('10'))),
                          ',',
                          argument(expression(literal('10'))),
                          ',',
                          argument(expression(literal('10'))),
                          ',',
                          argument(expression(literal('20'))),
                          ',',
                          argument(expression(literal('20'))),
                          ',',
                          argument(expression(literal('20'))),
                          ',',
                          argument(expression(literal('20'))),
                          ',',
                          argument(expression(identifier('osvi3')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('7')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi3')),
                        '.',
                        identifier('a')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('8')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('osvi3')),
                        '.',
                        identifier('b')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('9')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"A: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi')),
                            '.',
                            identifier('a')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"B: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('osvi')),
                            '.',
                            identifier('b')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"\nPassing OSVersionInfo as struct"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)