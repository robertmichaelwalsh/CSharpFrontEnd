compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('My')),
              attribute_arguments(
                ambig(
                  '(',
                  expression(
                    expression(identifier('val')),
                    assignment_operator('='),
                    expression(literal('2'))
                  ),
                  ',',
                  expression(
                    expression(identifier('sval')),
                    assignment_operator('='),
                    expression(literal('"str"'))
                  ),
                  ',',
                  expression(
                    expression(identifier('bb')),
                    assignment_operator('='),
                    expression(literal('0'))
                  ),
                  ',',
                  expression(
                    expression(identifier('S')),
                    assignment_operator('='),
                    expression(literal('"Buh"'))
                  ),
                  ',',
                  expression(
                    expression(identifier('P')),
                    assignment_operator('='),
                    expression(literal('4'))
                  ),
                  ')'
                ),
                ambig(
                  ambig(
                    '(',
                    expression(
                      expression(identifier('val')),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ',',
                    named_argument_list(
                      named_argument(
                        identifier('sval'),
                        '=',
                        expression(literal('"str"'))
                      ),
                      ',',
                      named_argument(
                        identifier('bb'),
                        '=',
                        expression(literal('0'))
                      ),
                      ',',
                      named_argument(
                        identifier('S'),
                        '=',
                        expression(literal('"Buh"'))
                      ),
                      ',',
                      named_argument(
                        identifier('P'),
                        '=',
                        expression(literal('4'))
                      )
                    )
                  ),
                  ambig(
                    '(',
                    expression(
                      expression(identifier('val')),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ',',
                    expression(
                      expression(identifier('sval')),
                      assignment_operator('='),
                      expression(literal('"str"'))
                    ),
                    ',',
                    expression(
                      expression(identifier('bb')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ',',
                    expression(
                      expression(identifier('S')),
                      assignment_operator('='),
                      expression(literal('"Buh"'))
                    ),
                    ',',
                    named_argument_list(named_argument(
                        identifier('P'),
                        '=',
                        expression(literal('4'))
                      ))
                  ),
                  ambig(
                    '(',
                    expression(
                      expression(identifier('val')),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ',',
                    expression(
                      expression(identifier('sval')),
                      assignment_operator('='),
                      expression(literal('"str"'))
                    ),
                    ',',
                    expression(
                      expression(identifier('bb')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ',',
                    named_argument_list(
                      named_argument(
                        identifier('S'),
                        '=',
                        expression(literal('"Buh"'))
                      ),
                      ',',
                      named_argument(
                        identifier('P'),
                        '=',
                        expression(literal('4'))
                      )
                    )
                  ),
                  ambig(
                    '(',
                    expression(
                      expression(identifier('val')),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ',',
                    expression(
                      expression(identifier('sval')),
                      assignment_operator('='),
                      expression(literal('"str"'))
                    ),
                    ',',
                    named_argument_list(
                      named_argument(
                        identifier('bb'),
                        '=',
                        expression(literal('0'))
                      ),
                      ',',
                      named_argument(
                        identifier('S'),
                        '=',
                        expression(literal('"Buh"'))
                      ),
                      ',',
                      named_argument(
                        identifier('P'),
                        '=',
                        expression(literal('4'))
                      )
                    )
                  ),
                  ')'
                ),
                ambig(
                  '(',
                  named_argument_list(
                    named_argument(
                      identifier('val'),
                      '=',
                      expression(literal('2'))
                    ),
                    ',',
                    named_argument(
                      identifier('sval'),
                      '=',
                      expression(literal('"str"'))
                    ),
                    ',',
                    named_argument(
                      identifier('bb'),
                      '=',
                      expression(literal('0'))
                    ),
                    ',',
                    named_argument(
                      identifier('S'),
                      '=',
                      expression(literal('"Buh"'))
                    ),
                    ',',
                    named_argument(
                      identifier('P'),
                      '=',
                      expression(literal('4'))
                    )
                  ),
                  ')'
                )
              )
            )),
          ']'
        ),
        'class',
        identifier('T'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('object')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Attribute')),
                              '.',
                              identifier('GetCustomAttributes')
                            ),
                            '(',
                            argument_list(
                              argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('T'))),
                                  ')'
                                )),
                              ',',
                              argument(expression(literal('true')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('My'))),
                      variable_declarator(
                        identifier('attr'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('My'))),
                            ')',
                            expression(
                              expression(identifier('a')),
                              '[',
                              expression_list(expression(literal('0'))),
                              ']'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('attr')),
                        '.',
                        identifier('val')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('attr')),
                        '.',
                        identifier('P')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('attr')),
                        '.',
                        identifier('S')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"Buh"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('My'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Attribute')))
        ),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('val'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('uint'))),
            variable_declarators(variable_declarator(identifier('prop'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type('predefined_type'('string')),
            variable_declarators(variable_declarator(identifier('s'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type('predefined_type'('string')),
            variable_declarators(variable_declarator(identifier('sval'))),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('bb'))),
            ';'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('uint'))),
            identifier('P'),
            '{',
            accessor_declarations(
              ambig(
                'set',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('prop')),
                          assignment_operator('='),
                          expression(identifier('value'))
                        ),
                        ';'
                      )),
                    '}'
                  )),
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(identifier('prop')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'set',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('prop')),
                          assignment_operator('='),
                          expression(identifier('value'))
                        ),
                        ';'
                      )),
                    '}'
                  )),
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(identifier('prop')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            type('predefined_type'('string')),
            identifier('S'),
            '{',
            accessor_declarations(
              ambig(
                'set',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('s')),
                          assignment_operator('='),
                          expression(identifier('value'))
                        ),
                        ';'
                      )),
                    '}'
                  )),
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(identifier('s')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'set',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(identifier('s')),
                          assignment_operator('='),
                          expression(identifier('value'))
                        ),
                        ';'
                      )),
                    '}'
                  )),
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(identifier('s')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        '}'
      )))
)