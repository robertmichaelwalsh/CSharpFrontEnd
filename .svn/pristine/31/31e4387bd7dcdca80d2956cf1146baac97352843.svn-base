compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(qualified_identifier(identifier('LocalDataStoreSlot'))),
            variable_declarators(variable_declarator(identifier('slot'))),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('private'),
            'type'('void'),
            identifier('Thread_func'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('LocalDataStoreSlot'))),
                      variable_declarator(
                        identifier('namedslot'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Thread')),
                              '.',
                              identifier('GetNamedDataSlot')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"data-slot"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"In a thread!"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('thr'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('CurrentThread')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Found thread!"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('thr')),
                        '.',
                        identifier('Name')
                      ),
                      assignment_operator('='),
                      expression(literal('"wobble"'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('otherthr'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('CurrentThread')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Other subthread is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('otherthr')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('slot'))),
                        ',',
                        argument(expression(identifier('thr')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('storedthr'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('Thread'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('slot')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Stored subthread is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('storedthr')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('namedslot'))),
                        ',',
                        argument(expression(identifier('thr')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('storedthr')),
                      assignment_operator('='),
                      expression(
                        '(',
                        type(qualified_identifier(identifier('Thread'))),
                        ')',
                        expression(
                          expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('namedslot')))),
                          ')'
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Stored subthread is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('storedthr')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Locking thr for 1.5s"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'lock',
                    '(',
                    expression(identifier('thr')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('1500')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Waiting for signal"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'lock',
                    '(',
                    expression(identifier('thr')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Monitor')),
                                '.',
                                identifier('Wait')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('thr')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Thread signalled!"')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Sleeping for 10s"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('10000')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('storedthr2'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('Thread'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('slot')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Stored subthread is still "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('storedthr2')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Hello, World!"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('slot')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Thread')),
                          '.',
                          identifier('AllocateDataSlot')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('LocalDataStoreSlot'))),
                      variable_declarator(
                        identifier('namedslot'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Thread')),
                              '.',
                              identifier('AllocateNamedDataSlot')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"data-slot"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Test'))),
                      variable_declarator(
                        identifier('test'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Test'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('thr'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Thread'))),
                            '(',
                            argument_list(argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('ThreadStart'))),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(identifier('test')),
                                        '.',
                                        identifier('Thread_func')
                                      ))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('thr')),
                        '.',
                        identifier('Start')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('1000')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('main'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('CurrentThread')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('main')),
                        '.',
                        identifier('Name')
                      ),
                      assignment_operator('='),
                      expression(literal('"wibble"'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('othermain'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('CurrentThread')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Other name "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('othermain')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('0')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"In the main line!"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Trying to enter lock"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Monitor')),
                          '.',
                          identifier('TryEnter')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('thr'))),
                          ',',
                          argument(expression(literal('100')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('true'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Returned lock"')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Monitor')),
                                '.',
                                identifier('Exit')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('thr')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      )),
                    'else',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Didn't get lock"')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('slot'))),
                        ',',
                        argument(expression(identifier('main')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Thread'))),
                      variable_declarator(
                        identifier('storedthr'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('Thread'))),
                            ')',
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('slot')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Stored subthread is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('storedthr')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('namedslot'))),
                        ',',
                        argument(expression(identifier('main')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('storedthr')),
                      assignment_operator('='),
                      expression(
                        '(',
                        type(qualified_identifier(identifier('Thread'))),
                        ')',
                        expression(
                          expression(
                            expression(identifier('Thread')),
                            '.',
                            identifier('GetData')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('namedslot')))),
                          ')'
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Stored subthread is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('storedthr')),
                              '.',
                              identifier('Name')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('thr')),
                        '.',
                        identifier('Join')
                      ),
                      '(',
                      argument_list(argument(expression(literal('5000')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Joined thread"')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      )),
                    'else',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Didn't join thread"')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'lock',
                    '(',
                    expression(identifier('thr')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Monitor')),
                                '.',
                                identifier('Pulse')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('thr')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Signalled thread"')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('thr')),
                        '.',
                        identifier('Join')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)