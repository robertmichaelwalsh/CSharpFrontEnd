compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('csum'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('test_callback'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('state')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('workerThreads'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('completionPortThreads'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ThreadPool')),
                        '.',
                        identifier('GetAvailableThreads')
                      ),
                      '(',
                      argument_list(
                        argument(
                          'out',
                          expression(identifier('workerThreads'))
                        ),
                        ',',
                        argument(
                          'out',
                          expression(identifier('completionPortThreads'))
                        )
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"test_casllback:"')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('state'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('"ATH: "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('workerThreads'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('Sleep')
                      ),
                      '(',
                      argument_list(argument(expression(literal('10')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Interlocked')),
                        '.',
                        identifier('Increment')
                      ),
                      '(',
                      argument_list(argument(
                          'ref',
                          expression(identifier('csum'))
                        )),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('workerThreads'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('completionPortThreads'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('runs'),
                        '=',
                        variable_initializer(expression(literal('10')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ThreadPool')),
                        '.',
                        identifier('GetMaxThreads')
                      ),
                      '(',
                      argument_list(
                        argument(
                          'out',
                          expression(identifier('workerThreads'))
                        ),
                        ',',
                        argument(
                          'out',
                          expression(identifier('completionPortThreads'))
                        )
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"workerThreads: {0} completionPortThreads: {1}"'))),
                        ',',
                        argument(expression(identifier('workerThreads'))),
                        ',',
                        argument(expression(identifier('completionPortThreads')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ThreadPool')),
                        '.',
                        identifier('GetAvailableThreads')
                      ),
                      '(',
                      argument_list(
                        argument(
                          'out',
                          expression(identifier('workerThreads'))
                        ),
                        ',',
                        argument(
                          'out',
                          expression(identifier('completionPortThreads'))
                        )
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"workerThreads: {0} completionPortThreads: {1}"'))),
                        ',',
                        argument(expression(identifier('workerThreads'))),
                        ',',
                        argument(expression(identifier('completionPortThreads')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(identifier('runs'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('QueueUserWorkItem')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WaitCallback'))),
                                    '(',
                                    argument_list(argument(expression(identifier('test_callback')))),
                                    ')'
                                  )),
                                ',',
                                argument(expression(
                                    expression(literal('"TEST1 "')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(identifier('i'))
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('QueueUserWorkItem')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WaitCallback'))),
                                    '(',
                                    argument_list(argument(expression(identifier('test_callback')))),
                                    ')'
                                  )),
                                ',',
                                argument(expression(
                                    expression(literal('"TEST2 "')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(identifier('i'))
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('QueueUserWorkItem')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WaitCallback'))),
                                    '(',
                                    argument_list(argument(expression(identifier('test_callback')))),
                                    ')'
                                  )),
                                ',',
                                argument(expression(
                                    expression(literal('"TEST3 "')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(identifier('i'))
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('QueueUserWorkItem')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WaitCallback'))),
                                    '(',
                                    argument_list(argument(expression(identifier('test_callback')))),
                                    ')'
                                  )),
                                ',',
                                argument(expression(
                                    expression(literal('"TEST4 "')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(identifier('i'))
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('QueueUserWorkItem')
                              ),
                              '(',
                              argument_list(
                                argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WaitCallback'))),
                                    '(',
                                    argument_list(argument(expression(identifier('test_callback')))),
                                    ')'
                                  )),
                                ',',
                                argument(expression(
                                    expression(literal('"TEST5 "')),
                                    'binary_operator'('overloadable_binary_operator'('+')),
                                    expression(identifier('i'))
                                  ))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'do',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    expression(
                                      expression(
                                        expression(identifier('ThreadPool')),
                                        '.',
                                        identifier('GetAvailableThreads')
                                      ),
                                      '(',
                                      argument_list(
                                        argument(
                                          'out',
                                          expression(identifier('workerThreads'))
                                        ),
                                        ',',
                                        argument(
                                          'out',
                                          expression(identifier('completionPortThreads'))
                                        )
                                      ),
                                      ')'
                                    ),
                                    ';'
                                  )),
                                statement(embedded_statement(
                                    'if',
                                    '(',
                                    expression(
                                      expression(identifier('workerThreads')),
                                      'binary_operator'('overloadable_binary_operator'('==')),
                                      expression(literal('0'))
                                    ),
                                    ')',
                                    embedded_statement(
                                      expression(
                                        expression(
                                          expression(identifier('Thread')),
                                          '.',
                                          identifier('Sleep')
                                        ),
                                        '(',
                                        argument_list(argument(expression(literal('100')))),
                                        ')'
                                      ),
                                      ';'
                                    )
                                  )),
                                '}'
                              )),
                            'while',
                            '(',
                            expression(
                              expression(identifier('workerThreads')),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(literal('0'))
                            ),
                            ')',
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ThreadPool')),
                                '.',
                                identifier('GetAvailableThreads')
                              ),
                              '(',
                              argument_list(
                                argument(
                                  'out',
                                  expression(identifier('workerThreads'))
                                ),
                                ',',
                                argument(
                                  'out',
                                  expression(identifier('completionPortThreads'))
                                )
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(
                                argument(expression(literal('"workerThreads: {0} completionPortThreads: {1}"'))),
                                ',',
                                argument(expression(identifier('workerThreads'))),
                                ',',
                                argument(expression(identifier('completionPortThreads')))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(
                      expression(identifier('csum')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('runs')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(literal('5'))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('Sleep')
                              ),
                              '(',
                              argument_list(argument(expression(literal('100')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"CSUM: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('csum'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('csum')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('runs')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(literal('5'))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)