compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Tests'),
        '{',
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              'type'('void'),
              identifier('SimpleDelegate'),
              '(',
              ')',
              ';'
            ))),
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('v'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('F1'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('+='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test.F1"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('F2'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('+='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test.F2"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('F3'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('+='),
                      expression(literal('4'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"Test.F3"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('TestDriver')),
                        '.',
                        identifier('RunTests')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Tests'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_test'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(identifier('t'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('F1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('F2')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d3'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('F3')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d12'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('d1')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('d2'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d13'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('d1')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('d3'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d23'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('d2')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('d3'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d123'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d1')),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(identifier('d2'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('d3'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d123')),
                        'binary_operator'('overloadable_binary_operator'('-')),
                        expression(identifier('d13'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('v')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('7'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d123')),
                        'binary_operator'('overloadable_binary_operator'('-')),
                        expression(identifier('d12'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('v')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('v')),
                      assignment_operator('='),
                      expression(literal('0'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('d123')),
                        'binary_operator'('overloadable_binary_operator'('-')),
                        expression(identifier('d23'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('t')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('v')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_delegate_equality'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'new',
                        type(qualified_identifier(identifier('SimpleDelegate'))),
                        '(',
                        argument_list(argument(expression(identifier('F1')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      'expression'(
                        'new',
                        type(qualified_identifier(identifier('SimpleDelegate'))),
                        '(',
                        argument_list(argument(expression(identifier('F1')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('0')),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        '}'
      )))
)