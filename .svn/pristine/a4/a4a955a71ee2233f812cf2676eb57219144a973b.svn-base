compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Foo'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('i'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Bar'),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('j'))),
            ';'
          )),
        member_declaration(static_constructor_declaration(
            static_constructor_modifiers('static'),
            identifier('Bar'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('j')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('Foo')),
                        '.',
                        identifier('i')
                      )
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Bug'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Foo')),
                        '.',
                        identifier('i')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('Bar')),
                        '.',
                        identifier('j')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)