compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(predefined_type(integral_type('byte'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(identifier('rep'))
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('double')),
                          variable_declarator(
                            identifier('d'),
                            '=',
                            variable_initializer(expression(literal('5.0')))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('rep')),
                          assignment_operator('='),
                          expression(
                            expression(
                              expression(identifier('BitConverter')),
                              '.',
                              identifier('GetBytes')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('d')))),
                            ')'
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('double')),
                          variable_declarator(
                            identifier('res'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('BitConverter')),
                                  '.',
                                  identifier('ToDouble')
                                ),
                                '(',
                                argument_list(
                                  argument(expression(identifier('rep'))),
                                  ',',
                                  argument(expression(literal('0')))
                                ),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(
                            argument(expression(literal('"{0} {1} {2} {3} {4} {5} {6} {7}"'))),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('0'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('1'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('2'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('3'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('4'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('5'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('6'))),
                                ']'
                              )),
                            ',',
                            argument(expression(
                                expression(identifier('rep')),
                                '[',
                                expression_list(expression(literal('7'))),
                                ']'
                              ))
                          ),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('d')),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(identifier('res'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)