compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type(qualified_identifier(identifier('Attribute'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('attr_array'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('Attribute'))),
                                '[',
                                expression_list(expression(literal('1'))),
                                ']'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type('predefined_type'('object')),
                          variable_declarator(
                            identifier('obj'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type('predefined_type'('object')),
                                ')',
                                expression(identifier('attr_array'))
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('object')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('obj_array'),
                            '=',
                            variable_initializer(expression(
                                '(',
                                type(array_type(
                                    type('predefined_type'('object')),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  )),
                                ')',
                                expression(identifier('obj'))
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('obj_array')),
                          assignment_operator('='),
                          expression(
                            expression(identifier('obj')),
                            'as',
                            type(array_type(
                                type('predefined_type'('object')),
                                rank_specifier(
                                  '[',
                                  ']'
                                )
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(identifier('obj_array')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)