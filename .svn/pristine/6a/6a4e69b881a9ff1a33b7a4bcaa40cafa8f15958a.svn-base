compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Messaging'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(type_declaration(delegate_declaration(
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                )),
              ')',
              ';'
            ))),
        member_declaration(field_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('cb_state'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('F'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Test.F from delegate: "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('a'))
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'throw',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('NotImplementedException'))),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('async_callback'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IAsyncResult'))),
                identifier('ar')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AsyncResult'))),
                      variable_declarator(
                        identifier('ares'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('AsyncResult'))),
                            ')',
                            expression(identifier('ar'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AsyncCallback'))),
                      variable_declarator(
                        identifier('ac'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AsyncCallback'))),
                            '(',
                            argument_list(argument(expression(identifier('async_callback')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"Async Callback "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('ar')),
                              '.',
                              identifier('AsyncState')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('cb_state')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            ')',
                            expression(
                              expression(identifier('ares')),
                              '.',
                              identifier('AsyncDelegate')
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('cb_state')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('d')),
                          '.',
                          identifier('BeginInvoke')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('cb_state'))),
                          ',',
                          argument(expression(identifier('ac'))),
                          ',',
                          argument(expression(identifier('cb_state')))
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('F')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('AsyncCallback'))),
                      variable_declarator(
                        identifier('ac'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('AsyncCallback'))),
                            '(',
                            argument_list(argument(expression(identifier('async_callback')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IAsyncResult'))),
                      variable_declarator(
                        identifier('ar1'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('d')),
                              '.',
                              identifier('BeginInvoke')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('cb_state'))),
                              ',',
                              argument(expression(identifier('ac'))),
                              ',',
                              argument(expression(identifier('cb_state')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('ar1')),
                          '.',
                          identifier('AsyncWaitHandle')
                        ),
                        '.',
                        identifier('WaitOne')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(
                      expression(identifier('cb_state')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Thread')),
                          '.',
                          identifier('Sleep')
                        ),
                        '(',
                        argument_list(argument(expression(literal('200')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)