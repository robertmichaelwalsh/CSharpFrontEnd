package uk.ac.rhul.csle.tooling.trees;

import java.util.HashMap;

import uk.ac.rhul.csle.gll.GLLSupport;
import uk.ac.rhul.csle.gll.GLLVisitor;

/**
 * A class which extends <code>GLLVisitor</code> providing an interface for ART
 * functions to construct a derivation structure from an ESPPF generated by an
 * ART parser.
 * 
 * @author Robert Michael Walsh
 *
 */
public class GIFTVisitor extends GLLVisitor {

  /**
   * The root of this derivation structure
   */
  private GIFTNode root;

  /**
   * Returns the root node constructed by this <code>GIFTVisitor</code>
   * 
   * @return The constructed root node
   */
  public GIFTNode getRoot() {
    return root;
  }

  /**
   * A mapping used to keep track of the relations between the constructed nodes
   * and the original ART nodes
   */
  private final HashMap<Integer, GIFTNode> nodeMatrix;

  /**
   * Constructs a new <code>GIFTVisitor</code> with the given ART generated
   * parser context
   * 
   * @param parser
   *          The ART generated parser context
   */
  public GIFTVisitor(GLLSupport parser) {
    super(parser);
    nodeMatrix = new HashMap<Integer, GIFTNode>();
  }

  /**
   * @see GLLVisitor#visit(int, int, int, int, int, int)
   */
  @Override
  public void visit(int level, int nodeNumber, int parentNodeNumber, int leftExtent, int rightExtent, int label) {
    if (parentNodeNumber == -1) {
      root = new GIFTNode(parser, label, leftExtent, rightExtent);
      nodeMatrix.put(nodeNumber, root);
    } else {
      nodeMatrix.put(nodeNumber,
              new GIFTNode(parser, label, leftExtent, rightExtent, nodeMatrix.get(parentNodeNumber)));

      nodeMatrix.get(parentNodeNumber).addChild(nodeMatrix.get(nodeNumber));
    }
  }
}
