compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('Test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('MyAttribute'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Attribute')))
            ),
            '{',
            member_declaration(field_declaration(
                'modifier'('public'),
                type('predefined_type'('string')),
                variable_declarators(variable_declarator(identifier('val'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('MyAttribute'),
                '(',
                formal_parameter_list(fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('stuff')
                  )),
                ')',
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(
                              expression(identifier('System')),
                              '.',
                              identifier('Console')
                            ),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('stuff')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('val')),
                          assignment_operator('='),
                          expression(identifier('stuff'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('My2Attribute'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('MyAttribute')))
            ),
            '{',
            member_declaration(field_declaration(
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                variable_declarators(variable_declarator(identifier('ival'))),
                ';'
              )),
            member_declaration(constructor_declaration(
                constructor_modifier('public'),
                identifier('My2Attribute'),
                '(',
                formal_parameter_list(
                  fixed_parameter(
                    type('predefined_type'('string')),
                    identifier('stuff')
                  ),
                  ',',
                  fixed_parameter(
                    type(predefined_type(integral_type('int'))),
                    identifier('blah')
                  )
                ),
                ')',
                constructor_initializer(
                  ':',
                  'base',
                  '(',
                  argument_list(argument(expression(identifier('stuff')))),
                  ')'
                ),
                body(block(
                    '{',
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(
                              expression(identifier('System')),
                              '.',
                              identifier('Console')
                            ),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"ctor with int val"')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('stuff'))
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(identifier('ival')),
                          assignment_operator('='),
                          expression(identifier('blah'))
                        ),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('My3Attribute'),
            class_base(
              ':',
              interface_type_list(qualified_identifier(identifier('Attribute')))
            ),
            '{',
            member_declaration(field_declaration(
                type(array_type(
                    type(predefined_type(integral_type('char'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                variable_declarators(variable_declarator(identifier('array_val'))),
                ';'
              )),
            member_declaration(property_declaration(
                'modifier'('public'),
                type(array_type(
                    type(predefined_type(integral_type('char'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('Prop'),
                '{',
                accessor_declarations(
                  ambig(
                    'get',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(identifier('array_val')),
                            ';'
                          )),
                        '}'
                      )),
                    'set',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('array_val')),
                              assignment_operator('='),
                              expression(identifier('value'))
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  ),
                  ambig(
                    'get',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            'return',
                            expression(identifier('array_val')),
                            ';'
                          )),
                        '}'
                      )),
                    'set',
                    body(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(identifier('array_val')),
                              assignment_operator('='),
                              expression(identifier('value'))
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )
                ),
                '}'
              )),
            member_declaration(field_declaration(
                'modifier'('public'),
                type(array_type(
                    type(predefined_type(integral_type('char'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                variable_declarators(variable_declarator(identifier('Prop2'))),
                ';'
              )),
            '}'
          ))),
      namespace_member_declaration(type_declaration(class_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('My')),
                  attribute_arguments(
                    '(',
                    expression(literal('"testclass"')),
                    ')'
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('My2')),
                  attribute_arguments(
                    '(',
                    expression(literal('"testclass"')),
                    ',',
                    expression(literal('22')),
                    ')'
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('My3')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(
                        expression(identifier('Prop')),
                        assignment_operator('='),
                        expression(
                          'new',
                          array_type(
                            type(predefined_type(integral_type('char'))),
                            rank_specifier(
                              '[',
                              ']'
                            )
                          ),
                          array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal(''A''))),
                              ',',
                              variable_initializer(expression(literal(''B''))),
                              ',',
                              variable_initializer(expression(literal(''C''))),
                              ',',
                              variable_initializer(expression(literal(''D'')))
                            ),
                            '}'
                          )
                        )
                      ),
                      ',',
                      expression(
                        expression(identifier('Prop2')),
                        assignment_operator('='),
                        expression(
                          'new',
                          array_type(
                            type(predefined_type(integral_type('char'))),
                            rank_specifier(
                              '[',
                              ']'
                            )
                          ),
                          array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal(''A''))),
                              ',',
                              variable_initializer(expression(literal(''D'')))
                            ),
                            '}'
                          )
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(
                        expression(identifier('Prop')),
                        assignment_operator('='),
                        expression(
                          'new',
                          array_type(
                            type(predefined_type(integral_type('char'))),
                            rank_specifier(
                              '[',
                              ']'
                            )
                          ),
                          array_initializer(
                            '{',
                            variable_initializer_list(
                              variable_initializer(expression(literal(''A''))),
                              ',',
                              variable_initializer(expression(literal(''B''))),
                              ',',
                              variable_initializer(expression(literal(''C''))),
                              ',',
                              variable_initializer(expression(literal(''D'')))
                            ),
                            '}'
                          )
                        )
                      ),
                      ',',
                      named_argument_list(named_argument(
                          identifier('Prop2'),
                          '=',
                          expression(
                            'new',
                            array_type(
                              type(predefined_type(integral_type('char'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal(''A''))),
                                ',',
                                variable_initializer(expression(literal(''D'')))
                              ),
                              '}'
                            )
                          )
                        )),
                      ')'
                    ),
                    ambig(
                      '(',
                      named_argument_list(
                        named_argument(
                          identifier('Prop'),
                          '=',
                          expression(
                            'new',
                            array_type(
                              type(predefined_type(integral_type('char'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal(''A''))),
                                ',',
                                variable_initializer(expression(literal(''B''))),
                                ',',
                                variable_initializer(expression(literal(''C''))),
                                ',',
                                variable_initializer(expression(literal(''D'')))
                              ),
                              '}'
                            )
                          )
                        ),
                        ',',
                        named_argument(
                          identifier('Prop2'),
                          '=',
                          expression(
                            'new',
                            array_type(
                              type(predefined_type(integral_type('char'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal(''A''))),
                                ',',
                                variable_initializer(expression(literal(''D'')))
                              ),
                              '}'
                            )
                          )
                        )
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('static'),
                'modifier'('public'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(
                              identifier('System'),
                              '.',
                              identifier('Reflection'),
                              '.',
                              identifier('MemberInfo')
                            )),
                          variable_declarator(
                            identifier('info'),
                            '=',
                            variable_initializer(expression(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('Test'))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(array_type(
                              type('predefined_type'('object')),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            )),
                          variable_declarator(
                            identifier('attributes'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('info')),
                                  '.',
                                  identifier('GetCustomAttributes')
                                ),
                                '(',
                                argument_list(argument(expression(literal('false')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('attributes')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'unary_assignment_operator'('++')
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('System')),
                                      '.',
                                      identifier('Console')
                                    ),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(identifier('attributes')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('attributes')),
                            '.',
                            identifier('Length')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('3'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'for',
                        '(',
                        for_initializer(local_variable_declaration(
                            type(predefined_type(integral_type('int'))),
                            variable_declarator(
                              identifier('i'),
                              '=',
                              variable_initializer(expression(literal('0')))
                            )
                          )),
                        ';',
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(
                            expression(identifier('attributes')),
                            '.',
                            identifier('Length')
                          )
                        ),
                        ';',
                        'expression'(
                          'unary_assignment_operator'('++'),
                          expression(identifier('i'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(identifier('attributes')),
                                    '[',
                                    expression_list(expression(identifier('i'))),
                                    ']'
                                  ),
                                  'is',
                                  type(qualified_identifier(identifier('MyAttribute')))
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        'if',
                                        '(',
                                        expression(
                                          'expression'(
                                            'expression'(
                                              '(',
                                              expression(
                                                '(',
                                                type(qualified_identifier(identifier('MyAttribute'))),
                                                ')',
                                                expression(
                                                  expression(identifier('attributes')),
                                                  '[',
                                                  expression_list(expression(identifier('i'))),
                                                  ']'
                                                )
                                              ),
                                              ')'
                                            ),
                                            '.',
                                            identifier('val')
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('!=')),
                                          expression(literal('"testclass"'))
                                        ),
                                        ')',
                                        embedded_statement(
                                          'return',
                                          expression(literal('2')),
                                          ';'
                                        )
                                      )),
                                    '}'
                                  ))
                              )),
                            statement(embedded_statement(
                                'if',
                                '(',
                                expression(
                                  expression(
                                    expression(identifier('attributes')),
                                    '[',
                                    expression_list(expression(identifier('i'))),
                                    ']'
                                  ),
                                  'is',
                                  type(qualified_identifier(identifier('My3Attribute')))
                                ),
                                ')',
                                embedded_statement(block(
                                    '{',
                                    statement(embedded_statement(
                                        'if',
                                        '(',
                                        expression(
                                          'expression'(
                                            'new',
                                            type(qualified_identifier(identifier('String'))),
                                            '(',
                                            argument_list(argument(expression(
                                                  'expression'(
                                                    '(',
                                                    expression(
                                                      '(',
                                                      type(qualified_identifier(identifier('My3Attribute'))),
                                                      ')',
                                                      expression(
                                                        expression(identifier('attributes')),
                                                        '[',
                                                        expression_list(expression(identifier('i'))),
                                                        ']'
                                                      )
                                                    ),
                                                    ')'
                                                  ),
                                                  '.',
                                                  identifier('Prop')
                                                ))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('!=')),
                                          expression(literal('"ABCD"'))
                                        ),
                                        ')',
                                        embedded_statement(block(
                                            '{',
                                            statement(embedded_statement(
                                                expression(
                                                  expression(
                                                    expression(identifier('Console')),
                                                    '.',
                                                    identifier('WriteLine')
                                                  ),
                                                  '(',
                                                  argument_list(argument(expression(
                                                        'new',
                                                        type(qualified_identifier(identifier('String'))),
                                                        '(',
                                                        argument_list(argument(expression(
                                                              'expression'(
                                                                '(',
                                                                expression(
                                                                  '(',
                                                                  type(qualified_identifier(identifier('My3Attribute'))),
                                                                  ')',
                                                                  expression(
                                                                    expression(identifier('attributes')),
                                                                    '[',
                                                                    expression_list(expression(identifier('i'))),
                                                                    ']'
                                                                  )
                                                                ),
                                                                ')'
                                                              ),
                                                              '.',
                                                              identifier('Prop')
                                                            ))),
                                                        ')'
                                                      ))),
                                                  ')'
                                                ),
                                                ';'
                                              )),
                                            statement(embedded_statement(
                                                'return',
                                                expression(literal('3')),
                                                ';'
                                              )),
                                            '}'
                                          ))
                                      )),
                                    statement(embedded_statement(
                                        'if',
                                        '(',
                                        expression(
                                          'expression'(
                                            'new',
                                            type(qualified_identifier(identifier('String'))),
                                            '(',
                                            argument_list(argument(expression(
                                                  'expression'(
                                                    '(',
                                                    expression(
                                                      '(',
                                                      type(qualified_identifier(identifier('My3Attribute'))),
                                                      ')',
                                                      expression(
                                                        expression(identifier('attributes')),
                                                        '[',
                                                        expression_list(expression(identifier('i'))),
                                                        ']'
                                                      )
                                                    ),
                                                    ')'
                                                  ),
                                                  '.',
                                                  identifier('Prop2')
                                                ))),
                                            ')'
                                          ),
                                          'binary_operator'('overloadable_binary_operator'('!=')),
                                          expression(literal('"AD"'))
                                        ),
                                        ')',
                                        embedded_statement(block(
                                            '{',
                                            statement(embedded_statement(
                                                expression(
                                                  expression(
                                                    expression(identifier('Console')),
                                                    '.',
                                                    identifier('WriteLine')
                                                  ),
                                                  '(',
                                                  argument_list(argument(expression(
                                                        'new',
                                                        type(qualified_identifier(identifier('String'))),
                                                        '(',
                                                        argument_list(argument(expression(
                                                              'expression'(
                                                                '(',
                                                                expression(
                                                                  '(',
                                                                  type(qualified_identifier(identifier('My3Attribute'))),
                                                                  ')',
                                                                  expression(
                                                                    expression(identifier('attributes')),
                                                                    '[',
                                                                    expression_list(expression(identifier('i'))),
                                                                    ']'
                                                                  )
                                                                ),
                                                                ')'
                                                              ),
                                                              '.',
                                                              identifier('Prop2')
                                                            ))),
                                                        ')'
                                                      ))),
                                                  ')'
                                                ),
                                                ';'
                                              )),
                                            statement(embedded_statement(
                                                'return',
                                                expression(literal('4')),
                                                ';'
                                              )),
                                            '}'
                                          ))
                                      )),
                                    '}'
                                  ))
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)