compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Text'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('test')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('Test'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('StringBuilder'))),
                          variable_declarator(
                            identifier('b'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('StringBuilder'))),
                                '(',
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('b')),
                            '.',
                            identifier('Append')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"Abr"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"Abr"'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('System')),
                                      '.',
                                      identifier('Console')
                                    ),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(literal('"Got: "')),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('b')),
                                            '.',
                                            identifier('ToString')
                                          ),
                                          '(',
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'return',
                                expression(literal('1')),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('b')),
                            '.',
                            identifier('Append')
                          ),
                          '(',
                          argument_list(argument(expression(literal(''a'')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('b')),
                            '.',
                            identifier('Append')
                          ),
                          '(',
                          argument_list(argument(expression(literal('"cadabra"')))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('b')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"Abracadabra"'))
                        ),
                        ')',
                        embedded_statement(block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('System')),
                                      '.',
                                      identifier('Console')
                                    ),
                                    '.',
                                    identifier('WriteLine')
                                  ),
                                  '(',
                                  argument_list(argument(expression(
                                        expression(literal('"Got: "')),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(
                                          expression(
                                            expression(identifier('b')),
                                            '.',
                                            identifier('ToString')
                                          ),
                                          '(',
                                          ')'
                                        )
                                      ))),
                                  ')'
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'return',
                                expression(literal('2')),
                                ';'
                              )),
                            '}'
                          ))
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)