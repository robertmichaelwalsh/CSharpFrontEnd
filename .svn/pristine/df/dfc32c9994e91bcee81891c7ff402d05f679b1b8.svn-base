compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Collections'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Threading'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('foo'),
        '{',
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('LocalDataStoreSlot'))),
            variable_declarators(variable_declarator(
                identifier('dataslot'),
                '=',
                variable_initializer(expression(
                    expression(
                      expression(identifier('Thread')),
                      '.',
                      identifier('AllocateDataSlot')
                    ),
                    '(',
                    ')'
                  ))
              )),
            ';'
          )),
        member_declaration(field_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('final_count'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(destructor_declaration(
            '~',
            identifier('foo'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('ID'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type('predefined_type'('string')),
                            ')',
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('dataslot')))),
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ID')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Console')),
                                '.',
                                identifier('WriteLine')
                              ),
                              '(',
                              argument_list(argument(expression(literal('"Set ID: foo"')))),
                              ')'
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('SetData')
                              ),
                              '(',
                              argument_list(
                                argument(expression(identifier('dataslot'))),
                                ',',
                                argument(expression(literal('"foo"')))
                              ),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('final_count')),
                        'unary_assignment_operator'('++')
                      ),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('Environment')),
                                '.',
                                identifier('Exit')
                              ),
                              '(',
                              argument_list(argument(expression(literal('42')))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"finalizer thread ID: {0}"'))),
                        ',',
                        argument(expression(
                            '(',
                            type('predefined_type'('string')),
                            ')',
                            expression(
                              expression(
                                expression(identifier('Thread')),
                                '.',
                                identifier('GetData')
                              ),
                              '(',
                              argument_list(argument(expression(identifier('dataslot')))),
                              ')'
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'throw',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('SystemException'))),
                      '(',
                      argument_list(argument(expression(literal('"wibble"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ArrayList'))),
                      variable_declarator(
                        identifier('list'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('ArrayList'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Thread')),
                        '.',
                        identifier('SetData')
                      ),
                      '(',
                      argument_list(
                        argument(expression(identifier('dataslot'))),
                        ',',
                        argument(expression(literal('"ID is wibble"')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'while',
                    '(',
                    expression(literal('true')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(declaration_statement(
                            local_variable_declaration(
                              type(qualified_identifier(identifier('foo'))),
                              variable_declarator(
                                identifier('instance'),
                                '=',
                                variable_initializer(expression(
                                    'new',
                                    type(qualified_identifier(identifier('foo'))),
                                    '(',
                                    ')'
                                  ))
                              )
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('list')),
                                '.',
                                identifier('Add')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    'new',
                                    type(qualified_identifier(identifier('WeakReference'))),
                                    '(',
                                    argument_list(argument(expression(identifier('instance')))),
                                    ')'
                                  ))),
                              ')'
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                '}'
              ))
          )),
        '}'
      )))
)