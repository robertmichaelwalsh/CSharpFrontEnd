compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Net'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Net'),
    '.',
    identifier('Sockets'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('IO'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(namespace_declaration(
      'namespace',
      qualified_identifier(identifier('T')),
      '{',
      namespace_member_declaration(type_declaration(class_declaration(
            'modifier'('public'),
            'class',
            identifier('T'),
            '{',
            member_declaration(method_declaration(
                'modifier'('public'),
                'modifier'('static'),
                type(predefined_type(integral_type('int'))),
                identifier('Main'),
                '(',
                ')',
                body(block(
                    '{',
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('IPAddress'))),
                          variable_declarator(
                            identifier('testadd'),
                            '=',
                            variable_initializer(expression(
                                expression(
                                  expression(identifier('IPAddress')),
                                  '.',
                                  identifier('Parse')
                                ),
                                '(',
                                argument_list(argument(expression(literal('"127.0.0.1"')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"address is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('testadd')),
                                      '.',
                                      identifier('Address')
                                    ),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  argument_list(argument(expression(literal('"X"')))),
                                  ')'
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(identifier('testadd')),
                            '.',
                            identifier('Address')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('0x0100007f'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(declaration_statement(
                        local_variable_declaration(
                          type(qualified_identifier(identifier('IPAddress'))),
                          variable_declarator(
                            identifier('hostadd'),
                            '=',
                            variable_initializer(expression(
                                'new',
                                type(qualified_identifier(identifier('IPAddress'))),
                                '(',
                                argument_list(argument(expression(literal('0x0100007f')))),
                                ')'
                              ))
                          )
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Console')),
                            '.',
                            identifier('WriteLine')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(literal('"address is "')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(
                                    expression(identifier('hostadd')),
                                    '.',
                                    identifier('ToString')
                                  ),
                                  '(',
                                  ')'
                                )
                              ))),
                          ')'
                        ),
                        ';'
                      )),
                    statement(embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('hostadd')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(literal('"127.0.0.1"'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )),
                    statement(embedded_statement(
                        'return',
                        expression(literal('0')),
                        ';'
                      )),
                    '}'
                  ))
              )),
            '}'
          ))),
      '}'
    ))
)