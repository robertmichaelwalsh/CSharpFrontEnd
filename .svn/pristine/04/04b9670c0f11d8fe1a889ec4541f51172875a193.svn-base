compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('TestJit'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_nan'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('nan1'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('NaN')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('nan2'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('NaN')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('neg_inf1'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('NegativeInfinity')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('neg_inf2'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('NegativeInfinity')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('pos_inf1'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('PositiveInfinity')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('pos_inf2'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('Double')),
                            '.',
                            identifier('PositiveInfinity')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('err'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('nan1')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(identifier('nan2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('nan1')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('nan2')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('neg_inf1')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('neg_inf2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('neg_inf1')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('neg_inf2')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('pos_inf1')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('pos_inf2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(
                          expression(identifier('pos_inf1')),
                          '.',
                          identifier('Equals')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('pos_inf2')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('pos_inf1')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(identifier('neg_inf1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('pos_inf1')),
                        '.',
                        identifier('Equals')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('neg_inf1')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('pos_inf1')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(identifier('nan1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type('predefined_type'('double')),
            identifier('test_call'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('double')),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(identifier('b'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_alu'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('9')))
                      ),
                      ',',
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('6')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('err'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('+')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('15'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('-')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('b'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('54'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('/')),
                          expression(literal('4'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2.25'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('a')),
                          'binary_operator'('overloadable_binary_operator'('%')),
                          expression(literal('4'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'unary_operator'('-'),
                        expression(identifier('a'))
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      'expression'(
                        'unary_operator'('-'),
                        expression(literal('9'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_branch'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('double')),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('0.5')))
                      ),
                      ',',
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('0.5')))
                      ),
                      ',',
                      variable_declarator(identifier('t'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('err'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('>=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('<=')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(identifier('b'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('0'))
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      expression(
                        expression(identifier('t')),
                        assignment_operator('='),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('t')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(literal('1.0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('err')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('0.1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('err')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('num'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_call')),
                        '(',
                        argument_list(
                          argument(expression(literal('3'))),
                          ',',
                          argument(expression(literal('5')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_branch')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_alu')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('test_nan')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('num')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('num')),
                      'unary_assignment_operator'('++')
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)