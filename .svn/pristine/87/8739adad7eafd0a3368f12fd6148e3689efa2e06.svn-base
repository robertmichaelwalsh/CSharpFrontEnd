compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('LockTest'),
        '{',
        member_declaration(type_declaration(class_declaration(
              'modifier'('public'),
              'class',
              identifier('Test'),
              '{',
              member_declaration(property_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  identifier('val'),
                  '{',
                  accessor_declarations(
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                expression(identifier('v')),
                                ')'
                              ),
                              ';'
                            )),
                          '}'
                        )),
                      'set',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('v')),
                                assignment_operator('='),
                                expression(identifier('value'))
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    ),
                    ambig(
                      'get',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              'return',
                              expression(
                                '(',
                                expression(identifier('v')),
                                ')'
                              ),
                              ';'
                            )),
                          '}'
                        )),
                      'set',
                      body(block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('v')),
                                assignment_operator('='),
                                expression(identifier('value'))
                              ),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  ),
                  '}'
                )),
              member_declaration(field_declaration(
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('v'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            'type'('void'),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Test'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Test'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'lock',
                    '(',
                    expression(identifier('a')),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('a')),
                                '.',
                                identifier('val')
                              ),
                              assignment_operator('='),
                              expression(literal('2'))
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(literal('"a is "')),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('a')),
                              '.',
                              identifier('val')
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)