compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type('predefined_type'('bool')),
            identifier('testprime'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('x')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          expression(identifier('x')),
                          'binary_operator'('overloadable_binary_operator'('&')),
                          expression(literal('1'))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'for',
                            '(',
                            for_initializer(local_variable_declaration(
                                type(predefined_type(integral_type('int'))),
                                variable_declarator(
                                  identifier('n'),
                                  '=',
                                  variable_initializer(expression(literal('3')))
                                )
                              )),
                            ';',
                            expression(
                              expression(identifier('n')),
                              'binary_operator'('overloadable_binary_operator'('<')),
                              expression(identifier('x'))
                            ),
                            ';',
                            expression(
                              expression(identifier('n')),
                              assignment_operator('+='),
                              expression(literal('2'))
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    'if',
                                    '(',
                                    expression(
                                      'expression'(
                                        '(',
                                        expression(
                                          expression(identifier('x')),
                                          'binary_operator'('overloadable_binary_operator'('%')),
                                          expression(identifier('n'))
                                        ),
                                        ')'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('==')),
                                      expression(literal('0'))
                                    ),
                                    ')',
                                    embedded_statement(
                                      'return',
                                      expression(literal('false')),
                                      ';'
                                    )
                                  )),
                                '}'
                              ))
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('true')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(
                        expression(identifier('x')),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('2'))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(
                        expression(identifier('testprime')),
                        '(',
                        argument_list(argument(expression(literal('17')))),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)