compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Explicit')
                ),
                ')'
              )
            )),
          ']'
        ),
        'struct',
        identifier('TestStructure'),
        '{',
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('0')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('internal'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('number'))),
            ';'
          )),
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('8')),
                    ')'
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('MarshalAs')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('ByValArray')
                      ),
                      ',',
                      expression(
                        expression(identifier('SizeConst')),
                        assignment_operator('='),
                        expression(literal('1024'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('ByValArray')
                      ),
                      ',',
                      named_argument_list(named_argument(
                          identifier('SizeConst'),
                          '=',
                          expression(literal('1024'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('internal'),
            type(array_type(
                type(predefined_type(integral_type('byte'))),
                rank_specifier(
                  '[',
                  ']'
                )
              )),
            variable_declarators(variable_declarator(identifier('stuff'))),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('size'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('SizeOf')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  'typeof',
                                  '(',
                                  type(qualified_identifier(identifier('TestStructure'))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"Size of t: {0}"'))),
                        ',',
                        argument(expression(identifier('size')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('size')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1032'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('size')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('SizeOf')
                        ),
                        '(',
                        argument_list(argument(expression(
                              'typeof',
                              '(',
                              type(qualified_identifier(identifier('TestStructure2'))),
                              ')'
                            ))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"Size of t2: {0}"'))),
                        ',',
                        argument(expression(identifier('size')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('size')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(struct_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('StructLayout')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('LayoutKind')),
                  '.',
                  identifier('Explicit')
                ),
                ')'
              )
            )),
          ']'
        ),
        'struct',
        identifier('TestStructure2'),
        '{',
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('0')),
                    ')'
                  )
                )),
              ']'
            ),
            type(predefined_type(integral_type('byte'))),
            variable_declarators(variable_declarator(identifier('val'))),
            ';'
          )),
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('FieldOffset')),
                  attribute_arguments(
                    '(',
                    expression(literal('2')),
                    ')'
                  )
                )),
              ']'
            ),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('val2'))),
            ';'
          )),
        '}'
      )))
)