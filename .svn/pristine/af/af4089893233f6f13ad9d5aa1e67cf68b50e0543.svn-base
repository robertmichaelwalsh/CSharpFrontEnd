compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(field_declaration(
            'modifier'('private'),
            type(predefined_type(integral_type('long'))),
            variable_declarators(variable_declarator(
                identifier('res'),
                '=',
                variable_initializer(expression(literal('0')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'type'('void'),
            identifier('test'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('long'))),
                      variable_declarator(
                        identifier('a'),
                        '=',
                        variable_initializer(expression(literal('1')))
                      ),
                      ',',
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('2')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(literal('2')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('a'))
                        ),
                        'binary_operator'('overloadable_binary_operator'('+')),
                        expression(
                          expression(literal('3')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('b'))
                        )
                      )
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Test'))),
                      variable_declarator(
                        identifier('x'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Test'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('x')),
                        '.',
                        identifier('test')
                      ),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(identifier('x')),
                            '.',
                            identifier('res')
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('x')),
                        '.',
                        identifier('res')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('8'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)