compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('Remoting'),
    '.',
    identifier('Contexts'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        attribute_section(
          '[',
          attribute_list(attribute(
              qualified_identifier(identifier('Synchronization')),
              attribute_arguments(
                '(',
                expression(
                  expression(identifier('SynchronizationAttribute')),
                  '.',
                  identifier('REQUIRES_NEW')
                ),
                ')'
              )
            )),
          ']'
        ),
        'class',
        identifier('CBO'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ContextBoundObject')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            type('predefined_type'('bool')),
            identifier('Test'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"start value: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('T')),
                            '.',
                            identifier('var')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('T')),
                        '.',
                        identifier('var')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('true')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('T')),
                        '.',
                        identifier('var')
                      ),
                      assignment_operator('='),
                      expression(literal('100'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"end value: {0}"'))),
                        ',',
                        argument(expression(
                            expression(identifier('T')),
                            '.',
                            identifier('var')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(
                        expression(
                          expression(identifier('T')),
                          '.',
                          identifier('var')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('100'))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('T'),
        '{',
        member_declaration(field_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(qualified_identifier(identifier('ContextStatic')))),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(
                identifier('var'),
                '=',
                variable_initializer(expression(literal('5')))
              )),
            ';'
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('bool')),
                      variable_declarator(
                        identifier('failed'),
                        '=',
                        variable_initializer(expression(literal('false')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('var')),
                      assignment_operator('='),
                      expression(literal('10'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('CBO'))),
                      variable_declarator(
                        identifier('cbo'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('CBO'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('failed')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('cbo')),
                          '.',
                          identifier('Test')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('var')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('10'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('failed')),
                        assignment_operator('='),
                        expression(literal('true'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"value in main context: {0}"'))),
                        ',',
                        argument(expression(identifier('var')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(identifier('failed')),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)