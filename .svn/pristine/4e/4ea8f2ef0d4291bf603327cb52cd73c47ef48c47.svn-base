compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(interface_declaration(
        'modifier'('public'),
        'interface',
        identifier('ICommon'),
        '{',
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('DoIt'),
          '(',
          ')',
          ';'
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Base'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ICommon')))
        ),
        '{',
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('ICommon')),
            '.',
            identifier('DoIt'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type(predefined_type(integral_type('int'))),
            identifier('DoIt'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('2')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Derived'),
        class_base(
          ':',
          interface_type_list(
            qualified_identifier(identifier('Base')),
            ',',
            qualified_identifier(identifier('ICommon'))
          )
        ),
        '{',
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('ICommon')),
            '.',
            identifier('DoIt'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('3')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('new'),
            'modifier'('virtual'),
            type(predefined_type(integral_type('int'))),
            identifier('DoIt'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('4')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('ReallyDerived'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Derived')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type(predefined_type(integral_type('int'))),
            identifier('DoIt'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('5')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ReallyDerived'))),
                      variable_declarator(
                        identifier('r1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('ReallyDerived'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Derived'))),
                      variable_declarator(
                        identifier('r2'),
                        '=',
                        variable_initializer(expression(identifier('r1')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Base'))),
                      variable_declarator(
                        identifier('r3'),
                        '=',
                        variable_initializer(expression(identifier('r1')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('ICommon'))),
                      variable_declarator(
                        identifier('r4'),
                        '=',
                        variable_initializer(expression(identifier('r1')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Object'))),
                      variable_declarator(
                        identifier('r5'),
                        '=',
                        variable_initializer(expression(identifier('r1')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r1')),
                          '.',
                          identifier('DoIt')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('ICommon'))),
                              ')',
                              expression(identifier('r1'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('DoIt')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r2')),
                          '.',
                          identifier('DoIt')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r3')),
                          '.',
                          identifier('DoIt')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('r4')),
                          '.',
                          identifier('DoIt')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)