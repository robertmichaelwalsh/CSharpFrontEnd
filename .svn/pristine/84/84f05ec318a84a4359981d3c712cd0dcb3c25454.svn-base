compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Text'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Tests'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('a')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('2'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('0')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('SimpleStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('d'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('SimpleStruct2'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('d'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('byte'))),
                  variable_declarators(variable_declarator(identifier('e'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('double')),
                  variable_declarators(variable_declarator(identifier('f'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('byte'))),
                  variable_declarators(variable_declarator(identifier('g'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('long'))),
                  variable_declarators(variable_declarator(identifier('h'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      ambig(
                        '(',
                        expression(
                          expression(identifier('LayoutKind')),
                          '.',
                          identifier('Sequential')
                        ),
                        ',',
                        expression(
                          expression(identifier('Size')),
                          assignment_operator('='),
                          expression(literal('0'))
                        ),
                        ')'
                      ),
                      ambig(
                        '(',
                        expression(
                          expression(identifier('LayoutKind')),
                          '.',
                          identifier('Sequential')
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('Size'),
                            '=',
                            expression(literal('0'))
                          )),
                        ')'
                      )
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('EmptyStruct'),
              '{',
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('DelegateStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(qualified_identifier(identifier('SimpleDelegate'))),
                  variable_declarators(variable_declarator(identifier('del'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  attribute_section(
                    '[',
                    attribute_list(attribute(
                        qualified_identifier(identifier('MarshalAs')),
                        attribute_arguments(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('FunctionPtr')
                          ),
                          ')'
                        )
                      )),
                    ']'
                  ),
                  'modifier'('public'),
                  type(qualified_identifier(identifier('SimpleDelegate'))),
                  variable_declarators(variable_declarator(identifier('del2'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('Point'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('double')),
                  variable_declarators(variable_declarator(identifier('x'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('double')),
                  variable_declarators(variable_declarator(identifier('y'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('MixedPoint'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('x'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('double')),
                  variable_declarators(variable_declarator(identifier('y'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(class_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'class',
              identifier('SimpleClass'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('d'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('byte'))),
                  variable_declarators(variable_declarator(identifier('e'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('double')),
                  variable_declarators(variable_declarator(identifier('f'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('byte'))),
                  variable_declarators(variable_declarator(identifier('g'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('long'))),
                  variable_declarators(variable_declarator(identifier('h'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(class_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'class',
              identifier('EmptyClass'),
              '{',
              '}'
            ))),
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('LongAlignStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('long'))),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('long'))),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libnot-found"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"not_found"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libnot-found"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"not_found"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_library_not_found'),
            '(',
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"not_found"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"not_found"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_entry_point_not_found'),
            '(',
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest.dll"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_char"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest.dll"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_char"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_char_2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('char'))),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_char"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_char"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_char'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('char'))),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_char_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_char_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_char_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(predefined_type(integral_type('char'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_bool_byref"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_bool_byref"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_bool_byref'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'ref',
                type('predefined_type'('bool')),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('c')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(predefined_type(integral_type('int'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_empty_string_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_empty_string_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_empty_string_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_string_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_string_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_string_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_unicode_string_array"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_marshal_unicode_string_array"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_marshal_unicode_string_array"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_unicode_string_array'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              ),
              ',',
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('LPArray')
                          ),
                          ',',
                          expression(
                            expression(identifier('ArraySubType')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('UnmanagedType')),
                              '.',
                              identifier('LPStr')
                            )
                          ),
                          ')'
                        ),
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('LPArray')
                          ),
                          ',',
                          named_argument_list(named_argument(
                              identifier('ArraySubType'),
                              '=',
                              expression(
                                expression(identifier('UnmanagedType')),
                                '.',
                                identifier('LPStr')
                              )
                            )),
                          ')'
                        )
                      )
                    )),
                  ']'
                ),
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a2')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_stringbuilder_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_stringbuilder_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_stringbuilder_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(qualified_identifier(identifier('StringBuilder'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_inout_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_inout_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_inout_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(
                    attribute(qualified_identifier(identifier('In'))),
                    ',',
                    attribute(qualified_identifier(identifier('Out')))
                  ),
                  ']'
                ),
                type(array_type(
                    type(predefined_type(integral_type('int'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_inout_nonblittable_array"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_marshal_inout_nonblittable_array"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_marshal_inout_nonblittable_array"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_inout_nonblittable_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(
                    attribute(qualified_identifier(identifier('In'))),
                    ',',
                    attribute(qualified_identifier(identifier('Out')))
                  ),
                  ']'
                ),
                type(array_type(
                    type(predefined_type(integral_type('char'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('a1')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_struct"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_struct"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_struct'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_struct2"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_struct2"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_struct2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleStruct2'))),
                identifier('ss')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_struct2_2"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_struct2_2"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_struct2_2'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('j')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('k')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('SimpleStruct2'))),
                identifier('ss')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_point"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_point"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_point'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('Point'))),
                identifier('p')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_mixed_point"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_mixed_point"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_mixed_point'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('MixedPoint'))),
                identifier('p')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_empty_struct"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_empty_struct"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_empty_struct'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('EmptyStruct'))),
                identifier('es')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_struct_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_struct_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_struct_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(qualified_identifier(identifier('SimpleStruct2'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('ss')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_long_align_struct_array"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_long_align_struct_array"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_long_align_struct_array'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type(qualified_identifier(identifier('LongAlignStruct'))),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('ss')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_class"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_class"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('SimpleClass'))),
            identifier('mono_test_marshal_class'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('j')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('k')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('SimpleClass'))),
                identifier('ss')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('l')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_byref_class"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_byref_class"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_byref_class'),
            '(',
            formal_parameter_list(fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('SimpleClass'))),
                identifier('ss')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate_struct"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate_struct"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate_struct'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('DelegateStruct'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_return_vtype"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_return_vtype"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('SimpleStruct'))),
            identifier('mono_test_return_vtype'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('i')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_stringbuilder"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_stringbuilder"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            'type'('void'),
            identifier('mono_test_marshal_stringbuilder'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(qualified_identifier(identifier('StringBuilder'))),
                identifier('sb')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('len')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_stringbuilder_unicode"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_marshal_stringbuilder_unicode"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_marshal_stringbuilder_unicode"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            'type'('void'),
            identifier('mono_test_marshal_stringbuilder_unicode'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(qualified_identifier(identifier('StringBuilder'))),
                identifier('sb')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('len')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_last_error"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('SetLastError')),
                        assignment_operator('='),
                        expression(literal('true'))
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_last_error"'))
                          ),
                          ',',
                          named_argument(
                            identifier('SetLastError'),
                            '=',
                            expression(literal('true'))
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_last_error"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('SetLastError'),
                            '=',
                            expression(literal('true'))
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            'type'('void'),
            identifier('mono_test_last_error'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('err')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_asany"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_asany"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_asany'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        '(',
                        expression(
                          expression(identifier('UnmanagedType')),
                          '.',
                          identifier('AsAny')
                        ),
                        ')'
                      )
                    )),
                  ']'
                ),
                type('predefined_type'('object')),
                identifier('o')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('what')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_asany"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_asany"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_asany"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_asany_unicode'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        '(',
                        expression(
                          expression(identifier('UnmanagedType')),
                          '.',
                          identifier('AsAny')
                        ),
                        ')'
                      )
                    )),
                  ']'
                ),
                type('predefined_type'('object')),
                identifier('o')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('what')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                )),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('TestDriver')),
                        '.',
                        identifier('RunTests')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Tests'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_char'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_char')),
                      '(',
                      argument_list(argument(expression(literal(''a'')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_char_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('char'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('buf'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('char'))),
                            '[',
                            expression_list(expression(literal('32'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('mono_test_marshal_char_array')),
                      '(',
                      argument_list(argument(expression(identifier('buf')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('s'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('string')),
                            '(',
                            argument_list(argument(expression(identifier('buf')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('StartsWith')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"abcdef"')))),
                      ')'
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('0')),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_1225_marshal_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('a1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(expression(literal('50'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('50'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(identifier('i'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_array')),
                      '(',
                      argument_list(argument(expression(identifier('a1')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_1225_marshal_inout_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('a1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(expression(literal('50'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('50'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(identifier('i'))
                      ),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_inout_array')),
                            '(',
                            argument_list(argument(expression(identifier('a1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('50'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(
                          expression(literal('50')),
                          'binary_operator'('overloadable_binary_operator'('-')),
                          expression(identifier('i'))
                        )
                      ),
                      ')',
                      embedded_statement(block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(
                                  expression(identifier('Console')),
                                  '.',
                                  identifier('WriteLine')
                                ),
                                '(',
                                argument_list(argument(expression(
                                      expression(
                                        expression(
                                          expression(literal('"X: "')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('" "'))
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      expression(
                                        expression(identifier('a1')),
                                        '[',
                                        expression_list(expression(identifier('i'))),
                                        ']'
                                      )
                                    ))),
                                ')'
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'return',
                              expression(literal('2')),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_inout_nonblittable_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('char'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('a1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('char'))),
                            '[',
                            expression_list(expression(literal('10'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(
                          expression(literal('"Hello, World"')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_inout_nonblittable_array')),
                            '(',
                            argument_list(argument(expression(identifier('a1')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('10'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('a1')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal(''F''))
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('2')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_struct'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_struct')),
                      '(',
                      argument_list(argument(expression(identifier('ss')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_struct2'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct2'))),
                      variable_declarator(
                        identifier('ss2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_struct2')),
                      '(',
                      argument_list(argument(expression(identifier('ss2')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_struct3'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct2'))),
                      variable_declarator(
                        identifier('ss2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_struct2_2')),
                      '(',
                      argument_list(
                        argument(expression(literal('10'))),
                        ',',
                        argument(expression(literal('11'))),
                        ',',
                        argument(expression(literal('12'))),
                        ',',
                        argument(expression(identifier('ss2')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_empty_struct'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('EmptyStruct'))),
                      variable_declarator(
                        identifier('es'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('EmptyStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_empty_struct')),
                        '(',
                        argument_list(
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(identifier('es'))),
                          ',',
                          argument(expression(literal('2')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_struct_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('SimpleStruct2'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ss_arr'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct2'))),
                            '[',
                            expression_list(expression(literal('2'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct2'))),
                      variable_declarator(
                        identifier('ss2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss_arr')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(identifier('ss2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST2"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('100'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('2.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('43'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('124L'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss_arr')),
                        '[',
                        expression_list(expression(literal('1'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(identifier('ss2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_struct_array')),
                      '(',
                      argument_list(argument(expression(identifier('ss_arr')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_105_marshal_long_align_struct_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(qualified_identifier(identifier('LongAlignStruct'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ss_arr'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('LongAlignStruct'))),
                            '[',
                            expression_list(expression(literal('2'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('LongAlignStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('LongAlignStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('10'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(literal('15'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss_arr')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(identifier('ss'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('20'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('25'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(literal('30'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss_arr')),
                        '[',
                        expression_list(expression(literal('1'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(identifier('ss'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_long_align_struct_array')),
                      '(',
                      argument_list(argument(expression(identifier('ss_arr')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_class'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleClass'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleClass'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleClass'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_class')),
                            '(',
                            argument_list(
                              argument(expression(literal('10'))),
                              ',',
                              argument(expression(literal('11'))),
                              ',',
                              argument(expression(literal('12'))),
                              ',',
                              argument(expression(identifier('ss'))),
                              ',',
                              argument(expression(literal('14')))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(
                                  expression(
                                    expression(
                                      expression(
                                        expression(
                                          expression(identifier('res')),
                                          '.',
                                          identifier('a')
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('==')),
                                        expression(
                                          expression(identifier('ss')),
                                          '.',
                                          identifier('a')
                                        )
                                      ),
                                      'binary_operator'('&&'),
                                      expression(
                                        expression(
                                          expression(identifier('res')),
                                          '.',
                                          identifier('b')
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('==')),
                                        expression(
                                          expression(identifier('ss')),
                                          '.',
                                          identifier('b')
                                        )
                                      )
                                    ),
                                    'binary_operator'('&&'),
                                    expression(
                                      expression(
                                        expression(identifier('res')),
                                        '.',
                                        identifier('c')
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('==')),
                                      expression(
                                        expression(identifier('ss')),
                                        '.',
                                        identifier('c')
                                      )
                                    )
                                  ),
                                  'binary_operator'('&&'),
                                  expression(
                                    expression(
                                      expression(identifier('res')),
                                      '.',
                                      identifier('d')
                                    ),
                                    'binary_operator'('overloadable_binary_operator'('==')),
                                    expression(
                                      expression(identifier('ss')),
                                      '.',
                                      identifier('d')
                                    )
                                  )
                                ),
                                'binary_operator'('&&'),
                                expression(
                                  expression(
                                    expression(identifier('res')),
                                    '.',
                                    identifier('e')
                                  ),
                                  'binary_operator'('overloadable_binary_operator'('==')),
                                  expression(
                                    expression(identifier('ss')),
                                    '.',
                                    identifier('e')
                                  )
                                )
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(
                                  expression(identifier('res')),
                                  '.',
                                  identifier('f')
                                ),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(
                                  expression(identifier('ss')),
                                  '.',
                                  identifier('f')
                                )
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(
                                expression(identifier('res')),
                                '.',
                                identifier('g')
                              ),
                              'binary_operator'('overloadable_binary_operator'('==')),
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('g')
                              )
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('res')),
                              '.',
                              identifier('h')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('h')
                            )
                          )
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('res')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('mono_test_marshal_class')),
                        '(',
                        argument_list(
                          argument(expression(literal('10'))),
                          ',',
                          argument(expression(literal('11'))),
                          ',',
                          argument(expression(literal('12'))),
                          ',',
                          argument(expression(literal('null'))),
                          ',',
                          argument(expression(literal('14')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_byref_class'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleClass'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleClass'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_byref_class')),
                            '(',
                            argument_list(argument(
                                'ref',
                                expression(identifier('ss'))
                              )),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"TEST-RES"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_delegate_struct'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('DelegateStruct'))),
                      variable_declarator(
                        identifier('s'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('DelegateStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('del')
                      ),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('SimpleDelegate'))),
                        '(',
                        argument_list(argument(expression(identifier('delegate_test')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('s')),
                        '.',
                        identifier('del2')
                      ),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('SimpleDelegate'))),
                        '(',
                        argument_list(argument(expression(identifier('delegate_test')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate_struct')),
                      '(',
                      argument_list(argument(expression(identifier('s')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_point'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('Point'))),
                      variable_declarator(
                        identifier('pt'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('Point'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('pt')),
                        '.',
                        identifier('x')
                      ),
                      assignment_operator('='),
                      expression(literal('1.25'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('pt')),
                        '.',
                        identifier('y')
                      ),
                      assignment_operator('='),
                      expression(literal('3.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_point')),
                      '(',
                      argument_list(argument(expression(identifier('pt')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_mixed_point'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MixedPoint'))),
                      variable_declarator(
                        identifier('mpt'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('MixedPoint'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('mpt')),
                        '.',
                        identifier('x')
                      ),
                      assignment_operator('='),
                      expression(literal('5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('mpt')),
                        '.',
                        identifier('y')
                      ),
                      assignment_operator('='),
                      expression(literal('6.75'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_mixed_point')),
                      '(',
                      argument_list(argument(expression(identifier('mpt')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_bool_byref'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('bool')),
                      variable_declarator(
                        identifier('b'),
                        '=',
                        variable_initializer(expression(literal('true')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_marshal_bool_byref')),
                        '(',
                        argument_list(
                          argument(expression(literal('99'))),
                          ',',
                          argument(
                            'ref',
                            expression(identifier('b'))
                          ),
                          ',',
                          argument(expression(literal('100')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('b')),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_marshal_bool_byref')),
                        '(',
                        argument_list(
                          argument(expression(literal('99'))),
                          ',',
                          argument(
                            'ref',
                            expression(identifier('b'))
                          ),
                          ',',
                          argument(expression(literal('100')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('12')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('b')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('true'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('13')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_return_vtype'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_return_vtype')),
                            '(',
                            argument_list(argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('IntPtr'))),
                                  '(',
                                  argument_list(argument(expression(literal('5')))),
                                  ')'
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            'unary_operator'('!'),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('a')
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(identifier('ss')),
                            '.',
                            identifier('b')
                          )
                        ),
                        'binary_operator'('&&'),
                        'expression'(
                          'unary_operator'('!'),
                          expression(
                            expression(identifier('ss')),
                            '.',
                            identifier('c')
                          )
                        )
                      ),
                      'binary_operator'('&&'),
                      expression(
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('d')
                        ),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('"TEST"'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('0')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_stringbuilder'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('StringBuilder'))),
                      variable_declarator(
                        identifier('sb'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('StringBuilder'))),
                            '(',
                            argument_list(argument(expression(literal('255')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sb')),
                        '.',
                        identifier('Append')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"ABCD"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('mono_test_marshal_stringbuilder')),
                      '(',
                      argument_list(
                        argument(expression(identifier('sb'))),
                        ',',
                        argument(expression(
                            expression(identifier('sb')),
                            '.',
                            identifier('Capacity')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('String'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('sb')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"This is my message.  Isn't it nice?"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_stringbuilder_unicode'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('StringBuilder'))),
                      variable_declarator(
                        identifier('sb'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('StringBuilder'))),
                            '(',
                            argument_list(argument(expression(literal('255')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('mono_test_marshal_stringbuilder_unicode')),
                      '(',
                      argument_list(
                        argument(expression(identifier('sb'))),
                        ',',
                        argument(expression(
                            expression(identifier('sb')),
                            '.',
                            identifier('Capacity')
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('String'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('sb')),
                              '.',
                              identifier('ToString')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"This is my message.  Isn't it nice?"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_empty_string_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_empty_string_array')),
                      '(',
                      argument_list(argument(expression(literal('null')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_string_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_string_array')),
                      '(',
                      argument_list(argument(expression(
                            'new',
                            array_type(
                              type(qualified_identifier(identifier('String'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('"ABC"'))),
                                ',',
                                variable_initializer(expression(literal('"DEF"')))
                              ),
                              '}'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_unicode_string_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_unicode_string_array')),
                      '(',
                      argument_list(
                        argument(expression(
                            'new',
                            array_type(
                              type(qualified_identifier(identifier('String'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('"ABC"'))),
                                ',',
                                variable_initializer(expression(literal('"DEF"')))
                              ),
                              '}'
                            )
                          )),
                        ',',
                        argument(expression(
                            'new',
                            array_type(
                              type(qualified_identifier(identifier('String'))),
                              rank_specifier(
                                '[',
                                ']'
                              )
                            ),
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(expression(literal('"ABC"'))),
                                ',',
                                variable_initializer(expression(literal('"DEF"')))
                              ),
                              '}'
                            )
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_stringbuilder_array'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('StringBuilder'))),
                      variable_declarator(
                        identifier('sb1'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('StringBuilder'))),
                            '(',
                            argument_list(argument(expression(literal('"ABC"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('StringBuilder'))),
                      variable_declarator(
                        identifier('sb2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('StringBuilder'))),
                            '(',
                            argument_list(argument(expression(literal('"DEF"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_stringbuilder_array')),
                            '(',
                            argument_list(argument(expression(
                                  'new',
                                  array_type(
                                    type(qualified_identifier(identifier('StringBuilder'))),
                                    rank_specifier(
                                      '[',
                                      ']'
                                    )
                                  ),
                                  array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(identifier('sb1'))),
                                      ',',
                                      variable_initializer(expression(identifier('sb2')))
                                    ),
                                    '}'
                                  )
                                ))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(identifier('res')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('sb1')),
                          '.',
                          identifier('ToString')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"DEF"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('5')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('sb2')),
                          '.',
                          identifier('ToString')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"ABC"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('6')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_last_error'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('mono_test_last_error')),
                      '(',
                      argument_list(argument(expression(literal('5')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('GetLastWin32Error')
                        ),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('5'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('0')),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_library_not_found'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_entry_point_not_found')),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('EntryPointNotFoundException')),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_entry_point_not_found'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_library_not_found')),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('DllNotFoundException')),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_trim_dll_from_name'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('mono_test_marshal_char_2')),
                      '(',
                      argument_list(argument(expression(literal(''A'')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(type_declaration(class_declaration(
              'class',
              identifier('C'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type(predefined_type(integral_type('int'))),
                  variable_declarators(variable_declarator(identifier('i'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_asany'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_asany')),
                        '(',
                        argument_list(
                          argument(expression(literal('5'))),
                          ',',
                          argument(expression(literal('1')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_asany')),
                        '(',
                        argument_list(
                          argument(expression(literal('"ABC"'))),
                          ',',
                          argument(expression(literal('2')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct2'))),
                      variable_declarator(
                        identifier('ss2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct2'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('e')
                      ),
                      assignment_operator('='),
                      expression(literal('99'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('f')
                      ),
                      assignment_operator('='),
                      expression(literal('1.5'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('g')
                      ),
                      assignment_operator('='),
                      expression(literal('42'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss2')),
                        '.',
                        identifier('h')
                      ),
                      assignment_operator('='),
                      expression(literal('123L'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_asany')),
                        '(',
                        argument_list(
                          argument(expression(identifier('ss2'))),
                          ',',
                          argument(expression(literal('3')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_asany_unicode')),
                        '(',
                        argument_list(
                          argument(expression(literal('"ABC"'))),
                          ',',
                          argument(expression(literal('4')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('4')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(declaration_statement(
                          local_variable_declaration(
                            type(qualified_identifier(identifier('C'))),
                            variable_declarator(
                              identifier('c'),
                              '=',
                              variable_initializer(expression(
                                  'new',
                                  type(qualified_identifier(identifier('C'))),
                                  '(',
                                  ')'
                                ))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(
                              expression(identifier('c')),
                              '.',
                              identifier('i')
                            ),
                            assignment_operator('='),
                            expression(literal('5'))
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_test_asany')),
                            '(',
                            argument_list(
                              argument(expression(identifier('c'))),
                              ',',
                              argument(expression(literal('0')))
                            ),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('5')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ArgumentException')),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_test_asany')),
                            '(',
                            argument_list(
                              argument(expression(
                                  'new',
                                  type(qualified_identifier(identifier('Object'))),
                                  '(',
                                  ')'
                                )),
                              ',',
                              argument(expression(literal('0')))
                            ),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('6')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ArgumentException')),
                          ')',
                          block(
                            '{',
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)