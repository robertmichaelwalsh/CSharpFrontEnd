compilation_unit(
  namespace_member_declaration(type_declaration(interface_declaration(
        'interface',
        identifier('IA'),
        '{',
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Add'),
          '(',
          formal_parameter_list(fixed_parameter(
              type(predefined_type(integral_type('int'))),
              identifier('i')
            )),
          ')',
          ';'
        ),
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Add2'),
          '(',
          formal_parameter_list(fixed_parameter(
              type(predefined_type(integral_type('int'))),
              identifier('i')
            )),
          ')',
          ';'
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(interface_declaration(
        'interface',
        identifier('IB'),
        '{',
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Add'),
          '(',
          formal_parameter_list(fixed_parameter(
              type(predefined_type(integral_type('int'))),
              identifier('i')
            )),
          ')',
          ';'
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(interface_declaration(
        'interface',
        identifier('IC'),
        '{',
        interface_member_declaration(
          type(predefined_type(integral_type('int'))),
          identifier('Add'),
          '(',
          formal_parameter_list(fixed_parameter(
              type(predefined_type(integral_type('int'))),
              identifier('i')
            )),
          ')',
          ';'
        ),
        '}'
      ))),
  namespace_member_declaration(type_declaration(interface_declaration(
        'interface',
        identifier('ID'),
        ':',
        interface_type_list(
          qualified_identifier(identifier('IA')),
          ',',
          qualified_identifier(identifier('IB'))
        ),
        '{',
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('D'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ID')))
        ),
        '{',
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IA')),
            '.',
            identifier('Add'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('5')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IA')),
            '.',
            identifier('Add2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('6')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IB')),
            '.',
            identifier('Add'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('7')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('E'),
        class_base(
          ':',
          interface_type_list(
            qualified_identifier(identifier('IC')),
            ',',
            qualified_identifier(identifier('ID'))
          )
        ),
        '{',
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IC')),
            '.',
            identifier('Add'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('8')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IA')),
            '.',
            identifier('Add'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('9')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IA')),
            '.',
            identifier('Add2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('10')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            type(predefined_type(integral_type('int'))),
            qualified_identifier(identifier('IB')),
            '.',
            identifier('Add'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(literal('11')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('C'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('ID'))),
                identifier('n')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('IA'))),
                              ')',
                              expression(identifier('n'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('Add2')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('6'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              '(',
                              type(qualified_identifier(identifier('IB'))),
                              ')',
                              expression(identifier('n'))
                            ),
                            ')'
                          ),
                          '.',
                          identifier('Add')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('7'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('D'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('D'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('E'))),
                      variable_declarator(
                        identifier('e'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('E'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('Test')),
                        '(',
                        argument_list(argument(expression(identifier('d')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)