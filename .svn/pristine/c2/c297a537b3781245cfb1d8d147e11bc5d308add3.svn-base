compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('static'),
            'type'('void'),
            identifier('puts'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('s')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('jagged'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          ambig(
                            type(array_type(
                                type(predefined_type(integral_type('int'))),
                                rank_specifier(
                                  '[',
                                  ']'
                                )
                              )),
                            rank_specifier(
                              '[',
                              ']'
                            )
                          ),
                          ambig(
                            type(predefined_type(integral_type('int'))),
                            rank_specifier(
                              '[',
                              ']'
                            ),
                            rank_specifier(
                              '[',
                              ']'
                            )
                          )
                        )),
                      variable_declarator(
                        identifier('j2'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(expression(literal('3'))),
                            ']',
                            rank_specifier(
                              '[',
                              ']'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('j2')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(predefined_type(integral_type('int'))),
                        '[',
                        expression_list(expression(literal('3'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('j2')),
                        '[',
                        expression_list(expression(literal('1'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(predefined_type(integral_type('int'))),
                        '[',
                        expression_list(expression(literal('6'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('j2')),
                        '[',
                        expression_list(expression(literal('2'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(predefined_type(integral_type('int'))),
                        '[',
                        expression_list(expression(literal('9'))),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('j2')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'for',
                      '(',
                      for_initializer(local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('j'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        )),
                      ';',
                      expression(
                        expression(identifier('j')),
                        'binary_operator'('overloadable_binary_operator'('<')),
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('1'))
                            ),
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(literal('3'))
                        )
                      ),
                      ';',
                      expression(
                        expression(identifier('j')),
                        'unary_assignment_operator'('++')
                      ),
                      ')',
                      embedded_statement(
                        expression(
                          expression(
                            expression(
                              expression(identifier('j2')),
                              '[',
                              expression_list(expression(identifier('i'))),
                              ']'
                            ),
                            '[',
                            expression_list(expression(identifier('j'))),
                            ']'
                          ),
                          assignment_operator('='),
                          expression(identifier('j'))
                        ),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('j2')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'for',
                      '(',
                      for_initializer(local_variable_declaration(
                          type(predefined_type(integral_type('int'))),
                          variable_declarator(
                            identifier('j'),
                            '=',
                            variable_initializer(expression(literal('0')))
                          )
                        )),
                      ';',
                      expression(
                        expression(identifier('j')),
                        'binary_operator'('overloadable_binary_operator'('<')),
                        'expression'(
                          'expression'(
                            '(',
                            expression(
                              expression(identifier('i')),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('1'))
                            ),
                            ')'
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(literal('3'))
                        )
                      ),
                      ';',
                      expression(
                        expression(identifier('j')),
                        'unary_assignment_operator'('++')
                      ),
                      ')',
                      embedded_statement(
                        'if',
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(identifier('j2')),
                              '[',
                              expression_list(expression(identifier('i'))),
                              ']'
                            ),
                            '[',
                            expression_list(expression(identifier('j'))),
                            ']'
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          expression(identifier('j'))
                        ),
                        ')',
                        embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('stest'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('string')),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('sa'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('string')),
                            '[',
                            expression_list(expression(literal('32'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sa')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('"This"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sa')),
                        '[',
                        expression_list(expression(literal('2'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('"is"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sa')),
                        '[',
                        expression_list(expression(literal('10'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('"a"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sa')),
                        '[',
                        expression_list(expression(literal('20'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('"stupid"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('sa')),
                        '[',
                        expression_list(expression(literal('21'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('"Test"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('sa')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'if',
                            '(',
                            expression(
                              expression(
                                expression(identifier('sa')),
                                '[',
                                expression_list(expression(identifier('i'))),
                                ']'
                              ),
                              'binary_operator'('overloadable_binary_operator'('!=')),
                              expression(literal('null'))
                            ),
                            ')',
                            embedded_statement(
                              expression(
                                expression(identifier('puts')),
                                '(',
                                argument_list(argument(expression(
                                      expression(identifier('sa')),
                                      '[',
                                      expression_list(expression(identifier('i'))),
                                      ']'
                                    ))),
                                ')'
                              ),
                              ';'
                            )
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('atest2'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ',',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ia'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(
                              expression(literal('32')),
                              ',',
                              expression(literal('32'))
                            ),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('GetLength')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '[',
                          expression_list(
                            expression(identifier('i')),
                            ',',
                            expression(identifier('i'))
                          ),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('GetLength')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '[',
                          expression_list(
                            expression(identifier('i')),
                            ',',
                            expression(identifier('i'))
                          ),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('GetLength')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('SetValue')
                        ),
                        '(',
                        argument_list(
                          argument(expression(
                              expression(
                                expression(identifier('i')),
                                'binary_operator'('overloadable_binary_operator'('*')),
                                expression(identifier('i'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('*')),
                              expression(identifier('i'))
                            )),
                          ',',
                          argument(expression(identifier('i'))),
                          ',',
                          argument(expression(identifier('i')))
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('GetLength')
                        ),
                        '(',
                        argument_list(argument(expression(literal('0')))),
                        ')'
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        'expression'(
                          '(',
                          type(predefined_type(integral_type('int'))),
                          ')',
                          expression(
                            expression(
                              expression(identifier('ia')),
                              '.',
                              identifier('GetValue')
                            ),
                            '(',
                            argument_list(
                              argument(expression(identifier('i'))),
                              ',',
                              argument(expression(identifier('i')))
                            ),
                            ')'
                          )
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(
                          expression(
                            expression(identifier('i')),
                            'binary_operator'('overloadable_binary_operator'('*')),
                            expression(identifier('i'))
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('atest'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('ia'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(expression(literal('32'))),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('ia')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        assignment_operator('='),
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('ia')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '[',
                          expression_list(expression(identifier('i'))),
                          ']'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(
                          expression(identifier('i')),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('ia')),
                        '.',
                        identifier('Rank')
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('GetValue')
                        ),
                        '(',
                        argument_list(argument(expression(literal('2')))),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('ia')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('ia')),
                          '.',
                          identifier('SetValue')
                        ),
                        '(',
                        argument_list(
                          argument(expression(
                              expression(
                                expression(identifier('i')),
                                'binary_operator'('overloadable_binary_operator'('*')),
                                expression(identifier('i'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('*')),
                              expression(identifier('i'))
                            )),
                          ',',
                          argument(expression(identifier('i')))
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(
                        expression(identifier('ia')),
                        '.',
                        identifier('Length')
                      )
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        'expression'(
                          '(',
                          type(predefined_type(integral_type('int'))),
                          ')',
                          expression(
                            expression(
                              expression(identifier('ia')),
                              '.',
                              identifier('GetValue')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('i')))),
                            ')'
                          )
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(
                          expression(
                            expression(identifier('i')),
                            'binary_operator'('overloadable_binary_operator'('*')),
                            expression(identifier('i'))
                          ),
                          'binary_operator'('overloadable_binary_operator'('*')),
                          expression(identifier('i'))
                        )
                      ),
                      ')',
                      embedded_statement(block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('puts')),
                                '(',
                                argument_list(argument(expression(
                                      expression(
                                        expression(
                                          expression(literal('"Crap: "')),
                                          'binary_operator'('overloadable_binary_operator'('+')),
                                          expression(identifier('i'))
                                        ),
                                        'binary_operator'('overloadable_binary_operator'('+')),
                                        expression(literal('" "'))
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('+')),
                                      'expression'(
                                        '(',
                                        type(predefined_type(integral_type('int'))),
                                        ')',
                                        expression(
                                          expression(
                                            expression(identifier('ia')),
                                            '.',
                                            identifier('GetValue')
                                          ),
                                          '(',
                                          argument_list(argument(expression(identifier('i')))),
                                          ')'
                                        )
                                      )
                                    ))),
                                ')'
                              ),
                              ';'
                            )),
                          statement(embedded_statement(
                              'return',
                              expression(literal('4')),
                              ';'
                            )),
                          '}'
                        ))
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts')),
                      '(',
                      argument_list(argument(expression(literal('"a"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('atest')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(
                        expression(identifier('atest')),
                        '(',
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts')),
                      '(',
                      argument_list(argument(expression(literal('"b"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('atest2')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts')),
                      '(',
                      argument_list(argument(expression(literal('"c"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('atest2')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts')),
                      '(',
                      argument_list(argument(expression(literal('"d"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('stest')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('puts')),
                      '(',
                      argument_list(argument(expression(literal('"e"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('jagged')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)