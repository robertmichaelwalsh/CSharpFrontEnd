compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('Test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type('predefined_type'('decimal')),
                          rank_specifier(
                            '[',
                            ',',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('tab'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type('predefined_type'('decimal')),
                            '[',
                            expression_list(
                              expression(literal('2')),
                              ',',
                              expression(literal('2'))
                            ),
                            ']',
                            array_initializer(
                              '{',
                              variable_initializer_list(
                                variable_initializer(array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(literal('3'))),
                                      ',',
                                      variable_initializer(expression(literal('4')))
                                    ),
                                    '}'
                                  )),
                                ',',
                                variable_initializer(array_initializer(
                                    '{',
                                    variable_initializer_list(
                                      variable_initializer(expression(literal('5'))),
                                      ',',
                                      variable_initializer(expression(literal('6')))
                                    ),
                                    '}'
                                  ))
                              ),
                              '}'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('bool')),
                      variable_declarator(
                        identifier('b1'),
                        '=',
                        variable_initializer(expression(literal('false')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('decimal')),
                      variable_declarator(identifier('d'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('d')),
                            assignment_operator('='),
                            expression(
                              expression(identifier('tab')),
                              '[',
                              expression_list(
                                expression(literal('1')),
                                ',',
                                expression(literal('2'))
                              ),
                              ']'
                            )
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('e'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('b1')),
                                  assignment_operator('='),
                                  expression(literal('true'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      expression(identifier('b1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('d')),
                      assignment_operator('='),
                      expression(
                        expression(identifier('tab')),
                        '[',
                        expression_list(
                          expression(literal('1')),
                          ',',
                          expression(literal('1'))
                        ),
                        ']'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('d')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('6'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)