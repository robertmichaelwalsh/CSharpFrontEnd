compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Tests'),
        '{',
        member_declaration(type_declaration(struct_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'struct',
              identifier('SimpleStruct'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('d'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(type_declaration(class_declaration(
              attribute_section(
                '[',
                attribute_list(attribute(
                    qualified_identifier(identifier('StructLayout')),
                    attribute_arguments(
                      '(',
                      expression(
                        expression(identifier('LayoutKind')),
                        '.',
                        identifier('Sequential')
                      ),
                      ')'
                    )
                  )),
                ']'
              ),
              'modifier'('public'),
              'class',
              identifier('SimpleClass'),
              '{',
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('a'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('b'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('bool')),
                  variable_declarators(variable_declarator(identifier('c'))),
                  ';'
                )),
              member_declaration(field_declaration(
                  'modifier'('public'),
                  type('predefined_type'('string')),
                  variable_declarators(variable_declarator(identifier('d'))),
                  ';'
                )),
              '}'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('SimpleStruct'))),
            identifier('delegate_test_struct'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('!'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('a')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('!'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('b')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(
                        'unary_operator'('!'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('c')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('res')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('d')
                        ),
                        'binary_operator'('overloadable_binary_operator'('+')),
                        expression(literal('"-RES"'))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_struct_byref'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(identifier('a')),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('1'))
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(identifier('b')),
                                'binary_operator'('overloadable_binary_operator'('==')),
                                expression(literal('2'))
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('a')
                            )
                          ),
                          'binary_operator'('&&'),
                          'expression'(
                            'unary_operator'('!'),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('b')
                            )
                          )
                        ),
                        'binary_operator'('&&'),
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('c')
                        )
                      ),
                      'binary_operator'('&&'),
                      expression(
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('d')
                        ),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('"TEST2"'))
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('a')
                              ),
                              assignment_operator('='),
                              expression(literal('true'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('b')
                              ),
                              assignment_operator('='),
                              expression(literal('true'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('c')
                              ),
                              assignment_operator('='),
                              expression(literal('true'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('d')
                              ),
                              assignment_operator('='),
                              expression(literal('"TEST3"'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('0')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_struct_out'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'out',
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST3"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('SimpleClass'))),
            identifier('delegate_test_class'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleClass'))),
                identifier('ss')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ss')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('null')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          'expression'(
                            'expression'(
                              'expression'(
                                'unary_operator'('!'),
                                expression(
                                  expression(identifier('ss')),
                                  '.',
                                  identifier('a')
                                )
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('b')
                              )
                            ),
                            'binary_operator'('&&'),
                            'expression'(
                              'unary_operator'('!'),
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('c')
                              )
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('d')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('"TEST"'))
                          )
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('null')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleClass'))),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(identifier('ss')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_class_byref'),
            '(',
            formal_parameter_list(fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('SimpleClass'))),
                identifier('ss')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('ss')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(
                        'unary_operator'('-'),
                        expression(literal('1'))
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        'expression'(
                          'expression'(
                            'unary_operator'('!'),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('a')
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(identifier('ss')),
                            '.',
                            identifier('b')
                          )
                        ),
                        'binary_operator'('&&'),
                        'expression'(
                          'unary_operator'('!'),
                          expression(
                            expression(identifier('ss')),
                            '.',
                            identifier('c')
                          )
                        )
                      ),
                      'binary_operator'('&&'),
                      expression(
                        expression(
                          expression(identifier('ss')),
                          '.',
                          identifier('d')
                        ),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('"TEST"'))
                      )
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('a')
                              ),
                              assignment_operator('='),
                              expression(literal('true'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('b')
                              ),
                              assignment_operator('='),
                              expression(literal('false'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('c')
                              ),
                              assignment_operator('='),
                              expression(literal('true'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('d')
                              ),
                              assignment_operator('='),
                              expression(literal('"RES"'))
                            ),
                            ';'
                          )),
                        statement(embedded_statement(
                            'return',
                            expression(literal('0')),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('1')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_class_out'),
            '(',
            formal_parameter_list(fixed_parameter(
                'out',
                type(qualified_identifier(identifier('SimpleClass'))),
                identifier('ss')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('ss')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('SimpleClass'))),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('a')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('false'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('c')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"RES"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_primitive_byref'),
            '(',
            formal_parameter_list(fixed_parameter(
                'ref',
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('i')),
                      assignment_operator('='),
                      expression(literal('2'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('delegate_test_string_marshalling'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('s')),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('"ABC"'))
                      ),
                      '?',
                      expression(literal('0')),
                      ':',
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_ref_vtype"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_ref_vtype"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_ref_vtype'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'ref',
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('TestDelegate'))),
                identifier('d')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('OutStructDelegate'),
              '(',
              formal_parameter_list(
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                ),
                ',',
                fixed_parameter(
                  'out',
                  type(qualified_identifier(identifier('SimpleStruct'))),
                  identifier('ss')
                ),
                ',',
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('b')
                )
              ),
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_out_struct"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_out_struct"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_out_struct'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              ),
              ',',
              fixed_parameter(
                'out',
                type(qualified_identifier(identifier('SimpleStruct'))),
                identifier('ss')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('b')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('OutStructDelegate'))),
                identifier('d')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate2"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate2"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate2'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate2'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate4"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate4"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate4'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate4'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate5"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate5"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate5'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate5'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate6"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate6"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate6'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate5'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate7"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate7"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate7'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate7'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate8"'))
                      ),
                      ',',
                      expression(
                        expression(identifier('CharSet')),
                        assignment_operator('='),
                        expression(
                          expression(identifier('CharSet')),
                          '.',
                          identifier('Unicode')
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        named_argument_list(
                          named_argument(
                            identifier('EntryPoint'),
                            '=',
                            expression(literal('"mono_test_marshal_delegate8"'))
                          ),
                          ',',
                          named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          )
                        )
                      ),
                      ambig(
                        '(',
                        expression(literal('"libtest"')),
                        ',',
                        expression(
                          expression(identifier('EntryPoint')),
                          assignment_operator('='),
                          expression(literal('"mono_test_marshal_delegate8"'))
                        ),
                        ',',
                        named_argument_list(named_argument(
                            identifier('CharSet'),
                            '=',
                            expression(
                              expression(identifier('CharSet')),
                              '.',
                              identifier('Unicode')
                            )
                          ))
                      ),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate8'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate8'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate9"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate9"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate9'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate9'))),
                identifier('d')
              ),
              ',',
              fixed_parameter(
                type(qualified_identifier(identifier('return_int_delegate'))),
                identifier('d2')
              )
            ),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_delegate10"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_delegate10"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_delegate10'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('SimpleDelegate9'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_primitive_byref_delegate"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_primitive_byref_delegate"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_primitive_byref_delegate'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('PrimitiveByrefDelegate'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_return_delegate_delegate"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_return_delegate_delegate"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('public'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('mono_test_marshal_return_delegate_delegate'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('ReturnDelegateDelegate'))),
                identifier('d')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('TestDelegate'),
              '(',
              formal_parameter_list(
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('a')
                ),
                ',',
                fixed_parameter(
                  'ref',
                  type(qualified_identifier(identifier('SimpleStruct'))),
                  identifier('ss')
                ),
                ',',
                fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('b')
                )
              ),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(qualified_identifier(identifier('SimpleStruct'))),
              identifier('SimpleDelegate2'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(qualified_identifier(identifier('SimpleStruct'))),
                  identifier('ss')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(qualified_identifier(identifier('SimpleClass'))),
              identifier('SimpleDelegate4'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(qualified_identifier(identifier('SimpleClass'))),
                  identifier('ss')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate5'),
              '(',
              formal_parameter_list(fixed_parameter(
                  'ref',
                  type(qualified_identifier(identifier('SimpleClass'))),
                  identifier('ss')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate7'),
              '(',
              formal_parameter_list(fixed_parameter(
                  'out',
                  type(qualified_identifier(identifier('SimpleClass'))),
                  identifier('ss')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate8'),
              '(',
              formal_parameter_list(fixed_parameter(
                  attribute_section(
                    '[',
                    attribute_list(attribute(
                        qualified_identifier(identifier('MarshalAs')),
                        attribute_arguments(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('LPWStr')
                          ),
                          ')'
                        )
                      )),
                    ']'
                  ),
                  type('predefined_type'('string')),
                  identifier('s1')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('return_int_delegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(predefined_type(integral_type('int'))),
                  identifier('i')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('SimpleDelegate9'),
              '(',
              formal_parameter_list(fixed_parameter(
                  type(qualified_identifier(identifier('return_int_delegate'))),
                  identifier('del')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(predefined_type(integral_type('int'))),
              identifier('PrimitiveByrefDelegate'),
              '(',
              formal_parameter_list(fixed_parameter(
                  'ref',
                  type(predefined_type(integral_type('int'))),
                  identifier('i')
                )),
              ')',
              ';'
            ))),
        member_declaration(type_declaration(delegate_declaration(
              'modifier'('public'),
              'delegate',
              type(qualified_identifier(identifier('return_int_delegate'))),
              identifier('ReturnDelegateDelegate'),
              '(',
              ')',
              ';'
            ))),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('TestDriver')),
                        '.',
                        identifier('RunTests')
                      ),
                      '(',
                      argument_list(argument(expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('Tests'))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_struct_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate2'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate2'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_struct')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate2')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_byref_struct_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('TestDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('TestDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_struct_byref')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('b')
                      ),
                      assignment_operator('='),
                      expression(literal('true'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('ss')),
                        '.',
                        identifier('d')
                      ),
                      assignment_operator('='),
                      expression(literal('"TEST1"'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('mono_test_ref_vtype')),
                        '(',
                        argument_list(
                          argument(expression(literal('1'))),
                          ',',
                          argument(
                            'ref',
                            expression(identifier('ss'))
                          ),
                          ',',
                          argument(expression(literal('2'))),
                          ',',
                          argument(expression(identifier('d')))
                        ),
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'unary_operator'('!'),
                      'expression'(
                        '(',
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('a')
                              ),
                              'binary_operator'('&&'),
                              expression(
                                expression(identifier('ss')),
                                '.',
                                identifier('b')
                              )
                            ),
                            'binary_operator'('&&'),
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('c')
                            )
                          ),
                          'binary_operator'('&&'),
                          expression(
                            expression(
                              expression(identifier('ss')),
                              '.',
                              identifier('d')
                            ),
                            'binary_operator'('overloadable_binary_operator'('==')),
                            expression(literal('"TEST3"'))
                          )
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_out_struct_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleStruct'))),
                      variable_declarator(
                        identifier('ss'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleStruct'))),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('OutStructDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('OutStructDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_struct_out')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_out_struct')),
                      '(',
                      argument_list(
                        argument(expression(literal('1'))),
                        ',',
                        argument(
                          'out',
                          expression(identifier('ss'))
                        ),
                        ',',
                        argument(expression(literal('2'))),
                        ',',
                        argument(expression(identifier('d')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_class_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate4'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate4'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_class')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate4')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_byref_class_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate5'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate5'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_class_byref')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate5')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_out_class_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate7'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate7'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_class_out')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate7')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_string_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate8'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate8'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_string_marshalling')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate8')),
                      '(',
                      argument_list(
                        argument(expression(identifier('d'))),
                        ',',
                        argument(expression(literal('"ABC"')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_byref_class_delegate_null'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate5'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate5'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_class_byref')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_test_marshal_delegate6')),
                            '(',
                            argument_list(argument(expression(identifier('d')))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ArgumentNullException')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'return',
                                expression(literal('0')),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('return_self'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('i')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(identifier('i')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('call_int_delegate'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('return_int_delegate'))),
                identifier('d')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('d')),
                      '(',
                      argument_list(argument(expression(literal('55')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_55_marshal_delegate_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate9'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate9'))),
                            '(',
                            argument_list(argument(expression(identifier('call_int_delegate')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_delegate9')),
                      '(',
                      argument_list(
                        argument(expression(identifier('d'))),
                        ',',
                        argument(expression(
                            'new',
                            type(qualified_identifier(identifier('return_int_delegate'))),
                            '(',
                            argument_list(argument(expression(identifier('return_self')))),
                            ')'
                          ))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_delegate_delegate_unmanaged_ftn'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('SimpleDelegate9'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('SimpleDelegate9'))),
                            '(',
                            argument_list(argument(expression(identifier('call_int_delegate')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('mono_test_marshal_delegate10')),
                            '(',
                            argument_list(argument(expression(identifier('d')))),
                            ')'
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'return',
                          expression(literal('1')),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('ArgumentException')),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                'return',
                                expression(literal('0')),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('2')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_0_marshal_primitive_byref_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('PrimitiveByrefDelegate'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('PrimitiveByrefDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('delegate_test_primitive_byref')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_primitive_byref_delegate')),
                      '(',
                      argument_list(argument(expression(identifier('d')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('return_int_delegate'))),
            identifier('return_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('return_int_delegate'))),
                      '(',
                      argument_list(argument(expression(identifier('return_self')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test_55_marshal_return_delegate_delegate'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('mono_test_marshal_return_delegate_delegate')),
                      '(',
                      argument_list(argument(expression(
                            'new',
                            type(qualified_identifier(identifier('ReturnDelegateDelegate'))),
                            '(',
                            argument_list(argument(expression(identifier('return_delegate')))),
                            ')'
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)