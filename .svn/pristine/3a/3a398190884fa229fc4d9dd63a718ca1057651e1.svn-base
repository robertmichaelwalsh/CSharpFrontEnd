compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Reflection'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('abstract'),
        'class',
        identifier('test'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('m'),
                        '=',
                        variable_initializer(expression(
                            'expression'(
                              'expression'(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('SubTestClass'))),
                                ')'
                              ),
                              '.',
                              identifier('GetMethod')
                            ),
                            '(',
                            argument_list(argument(expression(literal('"get_name"')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('MethodInfo'))),
                      variable_declarator(
                        identifier('bm'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('m')),
                              '.',
                              identifier('GetBaseDefinition')
                            ),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('bm')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('bm')),
                            '.',
                            identifier('DeclaringType')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('TestClass'))),
                            ')'
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('bm')),
                          '.',
                          identifier('Name')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('"get_name"'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('m')),
                      assignment_operator('='),
                      expression(
                        'expression'(
                          'expression'(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('SubTestClass'))),
                            ')'
                          ),
                          '.',
                          identifier('GetMethod')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"get_name2"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('bm')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('m')),
                          '.',
                          identifier('GetBaseDefinition')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('bm')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('bm')),
                            '.',
                            identifier('DeclaringType')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('TestClass'))),
                            ')'
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('bm')),
                          '.',
                          identifier('Name')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('"get_name2"'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('m')),
                      assignment_operator('='),
                      expression(
                        'expression'(
                          'expression'(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('SubTestClass'))),
                            ')'
                          ),
                          '.',
                          identifier('GetMethod')
                        ),
                        '(',
                        argument_list(argument(expression(literal('"get_name3"')))),
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('bm')),
                      assignment_operator('='),
                      expression(
                        expression(
                          expression(identifier('m')),
                          '.',
                          identifier('GetBaseDefinition')
                        ),
                        '(',
                        ')'
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(
                          expression(identifier('bm')),
                          'binary_operator'('overloadable_binary_operator'('==')),
                          expression(literal('null'))
                        ),
                        'binary_operator'('||'),
                        expression(
                          expression(
                            expression(identifier('bm')),
                            '.',
                            identifier('DeclaringType')
                          ),
                          'binary_operator'('overloadable_binary_operator'('!=')),
                          'expression'(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('BaseTestClass'))),
                            ')'
                          )
                        )
                      ),
                      'binary_operator'('||'),
                      expression(
                        expression(
                          expression(identifier('bm')),
                          '.',
                          identifier('Name')
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('"get_name3"'))
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('abstract'),
        'class',
        identifier('BaseTestClass'),
        '{',
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('abstract'),
            type('predefined_type'('string')),
            identifier('name3'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                'body'(';')
              ),
              ambig(
                'get',
                'body'(';')
              )
            ),
            '}'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('abstract'),
        'class',
        identifier('TestClass'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('BaseTestClass')))
        ),
        '{',
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('abstract'),
            type('predefined_type'('string')),
            identifier('name'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                'body'(';')
              ),
              ambig(
                'get',
                'body'(';')
              )
            ),
            '}'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('virtual'),
            type('predefined_type'('string')),
            identifier('name2'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('null')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('null')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'class',
        identifier('SubTestClass'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('TestClass')))
        ),
        '{',
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type('predefined_type'('string')),
            identifier('name'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type('predefined_type'('string')),
            identifier('name2'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        member_declaration(property_declaration(
            'modifier'('public'),
            'modifier'('override'),
            type('predefined_type'('string')),
            identifier('name3'),
            '{',
            accessor_declarations(
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              ),
              ambig(
                'get',
                body(block(
                    '{',
                    statement(embedded_statement(
                        'return',
                        expression(literal('""')),
                        ';'
                      )),
                    '}'
                  ))
              )
            ),
            '}'
          )),
        '}'
      )))
)