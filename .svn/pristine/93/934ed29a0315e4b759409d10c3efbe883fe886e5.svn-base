compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Benchmark'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Run'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('count'),
                        '=',
                        variable_initializer(expression(literal('32')))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(array_type(
                          type(predefined_type(integral_type('int'))),
                          rank_specifier(
                            '[',
                            ']'
                          )
                        )),
                      variable_declarator(
                        identifier('fibs'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(predefined_type(integral_type('int'))),
                            '[',
                            expression_list(expression(
                                expression(identifier('count')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(literal('1'))
                              )),
                            ']'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('index'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('index2'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('temp'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('fibs')),
                        '[',
                        expression_list(expression(literal('0'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('fibs')),
                        '[',
                        expression_list(expression(literal('1'))),
                        ']'
                      ),
                      assignment_operator('='),
                      expression(literal('1'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(expression(
                        expression(identifier('index')),
                        assignment_operator('='),
                        expression(literal('2'))
                      )),
                    ';',
                    expression(
                      expression(identifier('index')),
                      'binary_operator'('overloadable_binary_operator'('<=')),
                      expression(identifier('count'))
                    ),
                    ';',
                    'expression'(
                      'unary_assignment_operator'('++'),
                      expression(identifier('index'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            expression(
                              expression(
                                expression(identifier('fibs')),
                                '[',
                                expression_list(expression(identifier('index'))),
                                ']'
                              ),
                              assignment_operator('='),
                              expression(
                                expression(
                                  expression(identifier('fibs')),
                                  '[',
                                  expression_list(expression(
                                      expression(identifier('index')),
                                      'binary_operator'('overloadable_binary_operator'('-')),
                                      expression(literal('2'))
                                    )),
                                  ']'
                                ),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(
                                  expression(identifier('fibs')),
                                  '[',
                                  expression_list(expression(
                                      expression(identifier('index')),
                                      'binary_operator'('overloadable_binary_operator'('-')),
                                      expression(literal('1'))
                                    )),
                                  ']'
                                )
                              )
                            ),
                            ';'
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(expression(
                        expression(identifier('index')),
                        assignment_operator('='),
                        expression(literal('0'))
                      )),
                    ';',
                    expression(
                      expression(identifier('index')),
                      'binary_operator'('overloadable_binary_operator'('<=')),
                      expression(identifier('count'))
                    ),
                    ';',
                    'expression'(
                      'unary_assignment_operator'('++'),
                      expression(identifier('index'))
                    ),
                    ')',
                    embedded_statement(block(
                        '{',
                        statement(embedded_statement(
                            'for',
                            '(',
                            for_initializer(expression(
                                expression(identifier('index2')),
                                assignment_operator('='),
                                expression(literal('1'))
                              )),
                            ';',
                            expression(
                              expression(identifier('index2')),
                              'binary_operator'('overloadable_binary_operator'('<=')),
                              expression(identifier('count'))
                            ),
                            ';',
                            'expression'(
                              'unary_assignment_operator'('++'),
                              expression(identifier('index2'))
                            ),
                            ')',
                            embedded_statement(block(
                                '{',
                                statement(embedded_statement(
                                    'if',
                                    '(',
                                    expression(
                                      expression(
                                        expression(identifier('fibs')),
                                        '[',
                                        expression_list(expression(
                                            expression(identifier('index2')),
                                            'binary_operator'('overloadable_binary_operator'('-')),
                                            expression(literal('1'))
                                          )),
                                        ']'
                                      ),
                                      'binary_operator'('overloadable_binary_operator'('<')),
                                      expression(
                                        expression(identifier('fibs')),
                                        '[',
                                        expression_list(expression(identifier('index2'))),
                                        ']'
                                      )
                                    ),
                                    ')',
                                    embedded_statement(block(
                                        '{',
                                        statement(declaration_statement(
                                            local_variable_declaration(
                                              type(predefined_type(integral_type('int'))),
                                              variable_declarator(
                                                identifier('ti'),
                                                '=',
                                                variable_initializer(expression(
                                                    expression(identifier('index2')),
                                                    'binary_operator'('overloadable_binary_operator'('-')),
                                                    expression(literal('1'))
                                                  ))
                                              )
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(identifier('temp')),
                                              assignment_operator('='),
                                              expression(
                                                expression(identifier('fibs')),
                                                '[',
                                                expression_list(expression(identifier('ti'))),
                                                ']'
                                              )
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(
                                                expression(identifier('fibs')),
                                                '[',
                                                expression_list(expression(identifier('ti'))),
                                                ']'
                                              ),
                                              assignment_operator('='),
                                              expression(
                                                expression(identifier('fibs')),
                                                '[',
                                                expression_list(expression(identifier('index2'))),
                                                ']'
                                              )
                                            ),
                                            ';'
                                          )),
                                        statement(embedded_statement(
                                            expression(
                                              expression(
                                                expression(identifier('fibs')),
                                                '[',
                                                expression_list(expression(identifier('index2'))),
                                                ']'
                                              ),
                                              assignment_operator('='),
                                              expression(identifier('temp'))
                                            ),
                                            ';'
                                          )),
                                        '}'
                                      ))
                                  )),
                                '}'
                              ))
                          )),
                        '}'
                      ))
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('fibs')),
                      '[',
                      expression_list(expression(literal('0'))),
                      ']'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'for',
                    '(',
                    for_initializer(local_variable_declaration(
                        type(predefined_type(integral_type('int'))),
                        variable_declarator(
                          identifier('i'),
                          '=',
                          variable_initializer(expression(literal('0')))
                        )
                      )),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'binary_operator'('overloadable_binary_operator'('<')),
                      expression(literal('1000000'))
                    ),
                    ';',
                    expression(
                      expression(identifier('i')),
                      'unary_assignment_operator'('++')
                    ),
                    ')',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('Run')),
                          '(',
                          ')'
                        ),
                        'binary_operator'('overloadable_binary_operator'('!=')),
                        expression(literal('3524578'))
                      ),
                      ')',
                      embedded_statement(
                        'return',
                        expression(literal('1')),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)