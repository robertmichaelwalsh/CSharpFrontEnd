compilation_unit(namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('ackermann'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(array_type(
                    type('predefined_type'('string')),
                    rank_specifier(
                      '[',
                      ']'
                    )
                  )),
                identifier('args')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('NUM'),
                        '=',
                        variable_initializer(expression(literal('8')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('args')),
                        '.',
                        identifier('Length')
                      ),
                      'binary_operator'('overloadable_binary_operator'('>')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('NUM')),
                        assignment_operator('='),
                        expression(
                          expression(
                            expression(
                              expression(identifier('System')),
                              '.',
                              identifier('Int32')
                            ),
                            '.',
                            identifier('Parse')
                          ),
                          '(',
                          argument_list(argument(expression(
                                expression(identifier('args')),
                                '[',
                                expression_list(expression(literal('0'))),
                                ']'
                              ))),
                          ')'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(
                          expression(identifier('System')),
                          '.',
                          identifier('Console')
                        ),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(
                            expression(
                              expression(
                                expression(literal('"Ack(3,"')),
                                'binary_operator'('overloadable_binary_operator'('+')),
                                expression(identifier('NUM'))
                              ),
                              'binary_operator'('overloadable_binary_operator'('+')),
                              expression(literal('"): "'))
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('Ack')),
                              '(',
                              argument_list(
                                argument(expression(literal('3'))),
                                ',',
                                argument(expression(identifier('NUM')))
                              ),
                              ')'
                            )
                          ))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Ack'),
            '(',
            formal_parameter_list(
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('M')
              ),
              ',',
              fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('N')
              )
            ),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('M')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(
                        '(',
                        expression(
                          expression(identifier('N')),
                          'binary_operator'('overloadable_binary_operator'('+')),
                          expression(literal('1'))
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('N')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('0'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(
                        '(',
                        expression(
                          expression(identifier('Ack')),
                          '(',
                          argument_list(
                            argument(expression(
                                expression(identifier('M')),
                                'binary_operator'('overloadable_binary_operator'('-')),
                                expression(literal('1'))
                              )),
                            ',',
                            argument(expression(literal('1')))
                          ),
                          ')'
                        ),
                        ')'
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      '(',
                      expression(
                        expression(identifier('Ack')),
                        '(',
                        argument_list(
                          argument(expression(
                              expression(identifier('M')),
                              'binary_operator'('overloadable_binary_operator'('-')),
                              expression(literal('1'))
                            )),
                          ',',
                          argument(expression(
                              expression(identifier('Ack')),
                              '(',
                              argument_list(
                                argument(expression(identifier('M'))),
                                ',',
                                argument(expression(
                                    '(',
                                    expression(
                                      expression(identifier('N')),
                                      'binary_operator'('overloadable_binary_operator'('-')),
                                      expression(literal('1'))
                                    ),
                                    ')'
                                  ))
                              ),
                              ')'
                            ))
                        ),
                        ')'
                      ),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))))