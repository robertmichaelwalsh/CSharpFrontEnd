compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('MyEx'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('Exception')))
        ),
        '{',
        member_declaration(constructor_declaration(
            constructor_modifier('public'),
            identifier('MyEx'),
            '(',
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Ex'),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('test'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(predefined_type(integral_type('int'))),
                identifier('a')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('res'))
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('fin'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('res')),
                            assignment_operator('='),
                            expression(
                              expression(literal('10')),
                              'binary_operator'('overloadable_binary_operator'('/')),
                              expression(identifier('a'))
                            )
                          ),
                          ';'
                        )),
                      statement(embedded_statement(
                          'throw',
                          expression(
                            'new',
                            type(qualified_identifier(identifier('MyEx'))),
                            '(',
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('Exception')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('ex')),
                                  assignment_operator('='),
                                  expression(
                                    'new',
                                    type(qualified_identifier(identifier('MyEx'))),
                                    '(',
                                    ')'
                                  )
                                ),
                                ';'
                              )),
                            statement(embedded_statement(
                                'throw',
                                ';'
                              )),
                            '}'
                          )
                        ))),
                    'finally',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('fin')),
                            assignment_operator('='),
                            expression(literal('1'))
                          ),
                          ';'
                        )),
                      '}'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('res')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('catched'),
                        '=',
                        variable_initializer(expression(literal('0')))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('test')),
                            '(',
                            argument_list(argument(expression(literal('1')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('MyEx')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('catched')),
                                  assignment_operator('='),
                                  expression(literal('1'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )))
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('catched')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('1'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'try',
                    block(
                      '{',
                      statement(embedded_statement(
                          expression(
                            expression(identifier('test')),
                            '(',
                            argument_list(argument(expression(literal('0')))),
                            ')'
                          ),
                          ';'
                        )),
                      '}'
                    ),
                    catch_clauses(
                      specific_catch_clauses(specific_catch_clause(
                          'catch',
                          '(',
                          qualified_identifier(identifier('MyEx')),
                          identifier('ex'),
                          ')',
                          block(
                            '{',
                            statement(embedded_statement(
                                expression(
                                  expression(identifier('catched')),
                                  assignment_operator('='),
                                  expression(literal('2'))
                                ),
                                ';'
                              )),
                            '}'
                          )
                        )),
                      general_catch_clause(
                        'catch',
                        block(
                          '{',
                          statement(embedded_statement(
                              expression(
                                expression(identifier('catched')),
                                assignment_operator('='),
                                expression(literal('3'))
                              ),
                              ';'
                            )),
                          '}'
                        )
                      )
                    )
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('catched')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('3'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('3')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)