compilation_unit(
  using_directive(
    'using',
    identifier('System'),
    ';'
  ),
  using_directive(
    'using',
    identifier('System'),
    '.',
    identifier('Runtime'),
    '.',
    identifier('InteropServices'),
    ';'
  ),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('MyMarshal'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ICustomMarshaler')))
        ),
        '{',
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('ICustomMarshaler'))),
            identifier('GetInstance'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('s')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"GetInstance called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      'new',
                      type(qualified_identifier(identifier('MyMarshal'))),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpManagedData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('managedObj')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"CleanUpManagedData called"')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpNativeData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('pNativeData')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"CleanUpNativeData called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('pNativeData')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(
                        expression(identifier('IntPtr')),
                        '.',
                        identifier('Zero')
                      )
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('FreeHGlobal')
                        ),
                        '(',
                        argument_list(argument(expression(identifier('pNativeData')))),
                        ')'
                      ),
                      ';'
                    )
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('GetNativeDataSize'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"GetNativeDataSize() called"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('4')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(qualified_identifier(identifier('IntPtr'))),
            identifier('MarshalManagedToNative'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('managedObj')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"MarshalManagedToNative()"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('IntPtr')),
                      '.',
                      identifier('Zero')
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type('predefined_type'('object')),
            identifier('MarshalNativeToManaged'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('pNativeData')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(argument(expression(literal('"MarshalNativeToManaged()"')))),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(literal('"*"')),
                        'binary_operator'('overloadable_binary_operator'('+')),
                        expression(
                          expression(
                            expression(identifier('Marshal')),
                            '.',
                            identifier('PtrToStringAnsi')
                          ),
                          '(',
                          argument_list(argument(expression(identifier('pNativeData')))),
                          ')'
                        )
                      ),
                      'binary_operator'('overloadable_binary_operator'('+')),
                      expression(literal('"*"'))
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('time_t_CustomMarshaler'),
        class_base(
          ':',
          interface_type_list(qualified_identifier(identifier('ICustomMarshaler')))
        ),
        '{',
        member_declaration(field_declaration(
            'modifier'('static'),
            type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
            variable_declarators(variable_declarator(identifier('marshaler'))),
            ';'
          )),
        member_declaration(field_declaration(
            type(predefined_type(integral_type('int'))),
            variable_declarators(variable_declarator(identifier('utc_offset'))),
            ';'
          )),
        member_declaration(field_declaration(
            type(qualified_identifier(identifier('DateTime'))),
            variable_declarators(variable_declarator(identifier('local_epoch'))),
            ';'
          )),
        member_declaration(constructor_declaration(
            constructor_modifier('private'),
            identifier('time_t_CustomMarshaler'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(identifier('utc_offset')),
                      assignment_operator('='),
                      expression(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(
                          expression(
                            expression(
                              expression(
                                expression(identifier('DateTime')),
                                '.',
                                identifier('Now')
                              ),
                              '.',
                              identifier('Subtract')
                            ),
                            '(',
                            argument_list(argument(expression(
                                  expression(identifier('DateTime')),
                                  '.',
                                  identifier('UtcNow')
                                ))),
                            ')'
                          ),
                          '.',
                          identifier('TotalSeconds')
                        )
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('local_epoch')),
                      assignment_operator('='),
                      expression(
                        'new',
                        type(qualified_identifier(identifier('DateTime'))),
                        '(',
                        argument_list(
                          argument(expression(literal('1970'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('1'))),
                          ',',
                          argument(expression(literal('0'))),
                          ',',
                          argument(expression(literal('0'))),
                          ',',
                          argument(expression(literal('0')))
                        ),
                        ')'
                      )
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(qualified_identifier(identifier('ICustomMarshaler'))),
            identifier('GetInstance'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('string')),
                identifier('cookie')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('marshaler')),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('null'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(identifier('marshaler')),
                        assignment_operator('='),
                        expression(
                          'new',
                          type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
                          '(',
                          ')'
                        )
                      ),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('marshaler')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(qualified_identifier(identifier('IntPtr'))),
            identifier('MarshalManagedToNative'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('obj')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('DateTime'))),
                      variable_declarator(
                        identifier('dt'),
                        '=',
                        variable_initializer(expression(
                            '(',
                            type(qualified_identifier(identifier('DateTime'))),
                            ')',
                            expression(identifier('obj'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('size'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(
                                expression(identifier('Marshal')),
                                '.',
                                identifier('SizeOf')
                              ),
                              '(',
                              argument_list(argument(expression(
                                    'typeof',
                                    '(',
                                    type(predefined_type(integral_type('int'))),
                                    ')'
                                  ))),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(
                              expression(identifier('GetNativeDataSize')),
                              '(',
                              ')'
                            )
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('IntPtr'))),
                      variable_declarator(
                        identifier('ptr'),
                        '=',
                        variable_initializer(expression(
                            expression(
                              expression(identifier('Marshal')),
                              '.',
                              identifier('AllocCoTaskMem')
                            ),
                            '(',
                            argument_list(argument(expression(identifier('size')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(
                        identifier('secs'),
                        '=',
                        variable_initializer(expression(
                            'expression'(
                              '(',
                              expression(
                                '(',
                                type(predefined_type(integral_type('int'))),
                                ')',
                                expression(
                                  expression(
                                    expression(
                                      expression(identifier('dt')),
                                      '.',
                                      identifier('Subtract')
                                    ),
                                    '(',
                                    argument_list(argument(expression(identifier('local_epoch')))),
                                    ')'
                                  ),
                                  '.',
                                  identifier('TotalSeconds')
                                )
                              ),
                              ')'
                            ),
                            'binary_operator'('overloadable_binary_operator'('+')),
                            expression(identifier('utc_offset'))
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(
                        expression(identifier('GetNativeDataSize')),
                        '(',
                        ')'
                      ),
                      'binary_operator'('overloadable_binary_operator'('==')),
                      expression(literal('4'))
                    ),
                    ')',
                    embedded_statement(
                      expression(
                        expression(
                          expression(identifier('Marshal')),
                          '.',
                          identifier('WriteInt32')
                        ),
                        '(',
                        argument_list(
                          argument(expression(identifier('ptr'))),
                          ',',
                          argument(expression(identifier('secs')))
                        ),
                        ')'
                      ),
                      ';'
                    ),
                    'else',
                    embedded_statement(
                      'if',
                      '(',
                      expression(
                        expression(
                          expression(identifier('GetNativeDataSize')),
                          '(',
                          ')'
                        ),
                        'binary_operator'('overloadable_binary_operator'('==')),
                        expression(literal('8'))
                      ),
                      ')',
                      embedded_statement(
                        expression(
                          expression(
                            expression(identifier('Marshal')),
                            '.',
                            identifier('WriteInt64')
                          ),
                          '(',
                          argument_list(
                            argument(expression(identifier('ptr'))),
                            ',',
                            argument(expression(identifier('secs')))
                          ),
                          ')'
                        ),
                        ';'
                      ),
                      'else',
                      embedded_statement(
                        'throw',
                        expression(
                          'new',
                          type(qualified_identifier(identifier('Exception'))),
                          '(',
                          argument_list(argument(expression(literal('"Unexpected native size for time_t."')))),
                          ')'
                        ),
                        ';'
                      )
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(identifier('ptr')),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpNativeData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('data')
              )),
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Marshal')),
                        '.',
                        identifier('FreeHGlobal')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('data')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type('predefined_type'('object')),
            identifier('MarshalNativeToManaged'),
            '(',
            formal_parameter_list(fixed_parameter(
                type(qualified_identifier(identifier('IntPtr'))),
                identifier('data')
              )),
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type(predefined_type(integral_type('int'))),
                      variable_declarator(identifier('secs'))
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(identifier('secs')),
                      assignment_operator('='),
                      expression(
                        '(',
                        type(predefined_type(integral_type('int'))),
                        ')',
                        expression(identifier('data'))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('TimeSpan'))),
                      variable_declarator(
                        identifier('span'),
                        '=',
                        variable_initializer(expression(
                            'new',
                            type(qualified_identifier(identifier('TimeSpan'))),
                            '(',
                            argument_list(
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(literal('0'))),
                              ',',
                              argument(expression(
                                  expression(identifier('secs')),
                                  'binary_operator'('overloadable_binary_operator'('-')),
                                  expression(identifier('utc_offset'))
                                ))
                            ),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(
                        expression(identifier('local_epoch')),
                        '.',
                        identifier('Add')
                      ),
                      '(',
                      argument_list(argument(expression(identifier('span')))),
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'type'('void'),
            identifier('CleanUpManagedData'),
            '(',
            formal_parameter_list(fixed_parameter(
                type('predefined_type'('object')),
                identifier('obj')
              )),
            ')',
            body(block(
                '{',
                '}'
              ))
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(predefined_type(integral_type('int'))),
            identifier('time_t_sizeof'),
            '(',
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            type(predefined_type(integral_type('int'))),
            identifier('GetNativeDataSize'),
            '(',
            ')',
            body(block(
                '{',
                statement(embedded_statement(
                    'return',
                    expression(
                      expression(identifier('time_t_sizeof')),
                      '(',
                      ')'
                    ),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      ))),
  namespace_member_declaration(type_declaration(class_declaration(
        'modifier'('public'),
        'class',
        identifier('Testing'),
        '{',
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    '(',
                    expression(literal('"libtest"')),
                    ')'
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_target('return'),
              ':',
              attribute_list(attribute(
                  qualified_identifier(identifier('MarshalAs')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('CustomMarshaler')
                      ),
                      ',',
                      expression(
                        expression(identifier('MarshalTypeRef')),
                        assignment_operator('='),
                        expression(
                          'typeof',
                          '(',
                          type(qualified_identifier(identifier('MyMarshal'))),
                          ')'
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('CustomMarshaler')
                      ),
                      ',',
                      named_argument_list(named_argument(
                          identifier('MarshalTypeRef'),
                          '=',
                          expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('MyMarshal'))),
                            ')'
                          )
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type('predefined_type'('string')),
            identifier('functionReturningString'),
            '(',
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            attribute_section(
              '[',
              attribute_list(attribute(
                  qualified_identifier(identifier('DllImport')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      expression(
                        expression(identifier('EntryPoint')),
                        assignment_operator('='),
                        expression(literal('"mono_test_marshal_time_t"'))
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(literal('"libtest"')),
                      ',',
                      named_argument_list(named_argument(
                          identifier('EntryPoint'),
                          '=',
                          expression(literal('"mono_test_marshal_time_t"'))
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            attribute_section(
              '[',
              attribute_target('return'),
              ':',
              attribute_list(attribute(
                  qualified_identifier(identifier('MarshalAs')),
                  attribute_arguments(
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('CustomMarshaler')
                      ),
                      ',',
                      expression(
                        expression(identifier('MarshalTypeRef')),
                        assignment_operator('='),
                        expression(
                          'typeof',
                          '(',
                          type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
                          ')'
                        )
                      ),
                      ')'
                    ),
                    ambig(
                      '(',
                      expression(
                        expression(identifier('UnmanagedType')),
                        '.',
                        identifier('CustomMarshaler')
                      ),
                      ',',
                      named_argument_list(named_argument(
                          identifier('MarshalTypeRef'),
                          '=',
                          expression(
                            'typeof',
                            '(',
                            type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
                            ')'
                          )
                        )),
                      ')'
                    )
                  )
                )),
              ']'
            ),
            'modifier'('private'),
            'modifier'('static'),
            'modifier'('extern'),
            type(qualified_identifier(identifier('DateTime'))),
            identifier('mono_test_marshal_time_t'),
            '(',
            formal_parameter_list(fixed_parameter(
                attribute_section(
                  '[',
                  attribute_list(attribute(
                      qualified_identifier(identifier('MarshalAs')),
                      attribute_arguments(
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('CustomMarshaler')
                          ),
                          ',',
                          expression(
                            expression(identifier('MarshalTypeRef')),
                            assignment_operator('='),
                            expression(
                              'typeof',
                              '(',
                              type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
                              ')'
                            )
                          ),
                          ')'
                        ),
                        ambig(
                          '(',
                          expression(
                            expression(identifier('UnmanagedType')),
                            '.',
                            identifier('CustomMarshaler')
                          ),
                          ',',
                          named_argument_list(named_argument(
                              identifier('MarshalTypeRef'),
                              '=',
                              expression(
                                'typeof',
                                '(',
                                type(qualified_identifier(identifier('time_t_CustomMarshaler'))),
                                ')'
                              )
                            )),
                          ')'
                        )
                      )
                    )),
                  ']'
                ),
                type(qualified_identifier(identifier('DateTime'))),
                identifier('t')
              )),
            ')',
            'body'(';')
          )),
        member_declaration(method_declaration(
            'modifier'('public'),
            'modifier'('static'),
            type(predefined_type(integral_type('int'))),
            identifier('Main'),
            '(',
            ')',
            body(block(
                '{',
                statement(declaration_statement(
                    local_variable_declaration(
                      type('predefined_type'('string')),
                      variable_declarator(
                        identifier('res'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('functionReturningString')),
                            '(',
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    expression(
                      expression(
                        expression(identifier('Console')),
                        '.',
                        identifier('WriteLine')
                      ),
                      '(',
                      argument_list(
                        argument(expression(literal('"native string function returns {0}"'))),
                        ',',
                        argument(expression(identifier('res')))
                      ),
                      ')'
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      expression(identifier('res')),
                      'binary_operator'('overloadable_binary_operator'('!=')),
                      expression(literal('"*ABC*"'))
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('1')),
                      ';'
                    )
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('DateTime'))),
                      variable_declarator(
                        identifier('d'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('DateTime')),
                            '.',
                            identifier('Now')
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(declaration_statement(
                    local_variable_declaration(
                      type(qualified_identifier(identifier('DateTime'))),
                      variable_declarator(
                        identifier('d2'),
                        '=',
                        variable_initializer(expression(
                            expression(identifier('mono_test_marshal_time_t')),
                            '(',
                            argument_list(argument(expression(identifier('d')))),
                            ')'
                          ))
                      )
                    ),
                    ';'
                  )),
                statement(embedded_statement(
                    'if',
                    '(',
                    expression(
                      'expression'(
                        '(',
                        expression(
                          'expression'(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('d2')),
                                'binary_operator'('overloadable_binary_operator'('-')),
                                expression(identifier('d'))
                              ),
                              ')'
                            ),
                            '.',
                            identifier('TotalSeconds')
                          ),
                          'binary_operator'('overloadable_binary_operator'('<')),
                          expression(literal('3599'))
                        ),
                        ')'
                      ),
                      'binary_operator'('||'),
                      'expression'(
                        '(',
                        expression(
                          'expression'(
                            'expression'(
                              '(',
                              expression(
                                expression(identifier('d2')),
                                'binary_operator'('overloadable_binary_operator'('-')),
                                expression(identifier('d'))
                              ),
                              ')'
                            ),
                            '.',
                            identifier('TotalSeconds')
                          ),
                          'binary_operator'('overloadable_binary_operator'('>')),
                          expression(literal('3601'))
                        ),
                        ')'
                      )
                    ),
                    ')',
                    embedded_statement(
                      'return',
                      expression(literal('2')),
                      ';'
                    )
                  )),
                statement(embedded_statement(
                    'return',
                    expression(literal('0')),
                    ';'
                  )),
                '}'
              ))
          )),
        '}'
      )))
)